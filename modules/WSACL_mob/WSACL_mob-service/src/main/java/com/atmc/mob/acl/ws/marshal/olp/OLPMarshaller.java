/*
 * 
 */
package com.atmc.mob.acl.ws.marshal.olp;

import com.atmc.mob.acl.ws.proxy.olp.enterprisecontext.ContextInfo;
import com.atmc.mob.acl.ws.proxy.olp.enterprisecontext.EnterpriseContextType;
import com.atmc.mob.acl.ws.proxy.olp.enterprisecontext.ObjectFactory;
import com.atmc.mob.acl.ws.proxy.olp.enterprisecontext.RequestOriginator;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFactory;

//import org.apache.log4j.Logger;

/**
 * @author Basel A.Aziz
 */
public class OLPMarshaller
{
	/**
	 * Logger
	 */
	//private static Logger logger = Logger.getLogger(OLPMarshaller.class);
	public static final String MERCHANT_REF_NUM = "refnum";
	public static final long MERCHANT_ID = 1234;
	//1: Primary, 2:Secondary
	public static final int MERCHANT_TYPE = 1;
	
	protected static SOAPFactory soapFactory;
	// TODO replace
	private static final String REQUESTOR_CODE = "ATMC";

	private static int requestUID = 0;

	static
	{
		
		try
		{
			soapFactory = SOAPFactory.newInstance();
		}
		catch (SOAPException e)
		{
			e.printStackTrace();
		}
		
	}

	public static EnterpriseContextType marshalHeader() throws SOAPException 
	{

		ObjectFactory factory = new ObjectFactory();
		EnterpriseContextType entContext = factory.createEnterpriseContextType();
		ContextInfo contextInfo = factory.createContextInfo();
		contextInfo.setApplicationContextId(1);
		contextInfo.setBusinessContextId("CO");
		contextInfo.setProcessContextId(generateProcessContextId());

		RequestOriginator requestOriginator = factory.createRequestOriginator();
		// 1:web browser, 2:Mobile Browser
		requestOriginator.setChannelId(1);
		requestOriginator.setMachineIPAddress(getMachineIPAddress());
		requestOriginator.setRequestedTimestamp(getCurrentDateCalendar());
		requestOriginator.setRequesterCode(REQUESTOR_CODE);
		requestOriginator.setUserPrincipleName("userID");

		entContext.setContextInfo(contextInfo);
		entContext.setRequestOriginator(requestOriginator);
		
		return entContext;

//		SOAPElement createEnterpriseContext = soapFactory.createElement("enterpriseContext", "", "http://enterprise.olp.sadad.com/Infrastructure/EnterpriseContext");
//		SOAPElement contextInfo = createEnterpriseContext.addChildElement("contextInfo");
//		contextInfo.addChildElement("ProcessContextId").addTextNode(generateProcessContextId());
//		contextInfo.addChildElement("businessContextId").addTextNode("CO");
//		contextInfo.addChildElement("applicationContextId").addTextNode("1");
//		//contextInfo.addChildElement("languageCode").addTextNode(getMsgLanguageCode(msgASIHeaderNode));
//		
//		SOAPElement requestOriginator = createEnterpriseContext.addChildElement("requestOriginator");
//		requestOriginator.addChildElement("requesterCode").addTextNode(REQUESTOR_CODE);
//		requestOriginator.addChildElement("machineIPAddress").addTextNode(getMachineIPAddress());
//		requestOriginator.addChildElement("userPrincipleName").addTextNode("userID");
//		requestOriginator.addChildElement("requestedTimestamp").addTextNode(getCurrentDateString());
//		requestOriginator.addChildElement("channelId").addTextNode("1");
//		
//		return createEnterpriseContext;

	}

	/**
	 * This will be a universal message identifier with the combination of Requester Code Unique Number generated by Caller (6 digit) Timestamp in milliseconds
	 * 
	 * @return String
	 * @see
	 */
	private static synchronized String generateProcessContextId()
	{
		StringBuffer processContextId = new StringBuffer(REQUESTOR_CODE);
		if (requestUID > 999999) requestUID = 0; // Reset once reach max of 6 digits
		processContextId.append(String.format("%06d", requestUID));
		requestUID++;
		processContextId.append(System.currentTimeMillis());
		return processContextId.toString();
	}

	/**
	 * Time when the request is initiated from source machine in format DateTime(DD-MM-YYYY HH:mm:ss.SSS)
	 * 
	 * @return String
	 * @see
	 */
	private static XMLGregorianCalendar getCurrentDateCalendar()
	{

		GregorianCalendar cal = new GregorianCalendar();

		try
		{
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(cal);
		}
		catch (DatatypeConfigurationException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}

	}
	
	/**
	 * Time when the request is initiated from source machine in format DateTime(DD-MM-YYYY HH:mm:ss.SSS)
	 * 
	 * @return String
	 * @see
	 */
	private static String getCurrentDateString()
	{
		Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
        String strDate = sdf.format(cal.getTime());
		return strDate;
	}
	
	
	/**
	 * Time when the request is initiated from source machine in format DateTime(DD-MM-YYYY HH:mm:ss.SSS)
	 * 
	 * @return String
	 * @see
	 */
	private static String getMachineIPAddress()
	{
		try
		{
			return InetAddress.getLocalHost().getHostAddress();
		}
		catch (UnknownHostException e)
		{
			//logger.error(e);
			return "127.0.0.1";
		}

	}


}
