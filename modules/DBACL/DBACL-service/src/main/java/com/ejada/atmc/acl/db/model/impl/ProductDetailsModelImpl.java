/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.ProductDetails;
import com.ejada.atmc.acl.db.model.ProductDetailsModel;
import com.ejada.atmc.acl.db.model.ProductDetailsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductDetails service. Represents a row in the &quot;PM_PRODUCT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class ProductDetailsModelImpl
	extends BaseModelImpl<ProductDetails> implements ProductDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product details model instance should use the <code>ProductDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "PM_PRODUCT";

	public static final Object[][] TABLE_COLUMNS = {
		{"MDM_PROD_SYS_ID", Types.BIGINT},
		{"MDM_PROD_LOB_SYS_ID", Types.DOUBLE},
		{"MDM_PROD_EFF_FM_DT", Types.TIMESTAMP},
		{"MDM_PROD_EFF_TO_DT", Types.TIMESTAMP},
		{"MDM_PROD_CR_DT", Types.TIMESTAMP}, {"MDM_PROD_CR_UID", Types.VARCHAR},
		{"MDM_PROD_UPD_DT", Types.VARCHAR}, {"MDM_PROD_UPD_UID", Types.VARCHAR},
		{"MDM_PROD_CODE", Types.VARCHAR}, {"MDM_PROD_NAME", Types.VARCHAR},
		{"MDM_PROD_NAME_AR", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MDM_PROD_SYS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MDM_PROD_LOB_SYS_ID", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("MDM_PROD_EFF_FM_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_PROD_EFF_TO_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_PROD_CR_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_PROD_CR_UID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PROD_UPD_DT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PROD_UPD_UID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PROD_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PROD_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PROD_NAME_AR", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PM_PRODUCT (MDM_PROD_SYS_ID LONG not null primary key,MDM_PROD_LOB_SYS_ID DOUBLE,MDM_PROD_EFF_FM_DT DATE null,MDM_PROD_EFF_TO_DT DATE null,MDM_PROD_CR_DT DATE null,MDM_PROD_CR_UID VARCHAR(75) null,MDM_PROD_UPD_DT VARCHAR(75) null,MDM_PROD_UPD_UID VARCHAR(75) null,MDM_PROD_CODE VARCHAR(75) null,MDM_PROD_NAME VARCHAR(75) null,MDM_PROD_NAME_AR VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table PM_PRODUCT";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productDetails.sysId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PM_PRODUCT.MDM_PROD_SYS_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PRODUCTCODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SYSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ProductDetails toModel(ProductDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProductDetails model = new ProductDetailsImpl();

		model.setSysId(soapModel.getSysId());
		model.setLobSysId(soapModel.getLobSysId());
		model.setEffFmDate(soapModel.getEffFmDate());
		model.setEffToDate(soapModel.getEffToDate());
		model.setCrDate(soapModel.getCrDate());
		model.setCrUid(soapModel.getCrUid());
		model.setUpdDate(soapModel.getUpdDate());
		model.setUpdUid(soapModel.getUpdUid());
		model.setProductCode(soapModel.getProductCode());
		model.setProductName(soapModel.getProductName());
		model.setProductNameAr(soapModel.getProductNameAr());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ProductDetails> toModels(
		ProductDetailsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ProductDetails> models = new ArrayList<ProductDetails>(
			soapModels.length);

		for (ProductDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ProductDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sysId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSysId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sysId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductDetails.class;
	}

	@Override
	public String getModelClassName() {
		return ProductDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProductDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProductDetails.class.getClassLoader(), ProductDetails.class,
			ModelWrapper.class);

		try {
			Constructor<ProductDetails> constructor =
				(Constructor<ProductDetails>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ProductDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ProductDetails, Object>>();
		Map<String, BiConsumer<ProductDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProductDetails, ?>>();

		attributeGetterFunctions.put("sysId", ProductDetails::getSysId);
		attributeSetterBiConsumers.put(
			"sysId",
			(BiConsumer<ProductDetails, Long>)ProductDetails::setSysId);
		attributeGetterFunctions.put("lobSysId", ProductDetails::getLobSysId);
		attributeSetterBiConsumers.put(
			"lobSysId",
			(BiConsumer<ProductDetails, Double>)ProductDetails::setLobSysId);
		attributeGetterFunctions.put("effFmDate", ProductDetails::getEffFmDate);
		attributeSetterBiConsumers.put(
			"effFmDate",
			(BiConsumer<ProductDetails, Date>)ProductDetails::setEffFmDate);
		attributeGetterFunctions.put("effToDate", ProductDetails::getEffToDate);
		attributeSetterBiConsumers.put(
			"effToDate",
			(BiConsumer<ProductDetails, Date>)ProductDetails::setEffToDate);
		attributeGetterFunctions.put("crDate", ProductDetails::getCrDate);
		attributeSetterBiConsumers.put(
			"crDate",
			(BiConsumer<ProductDetails, Date>)ProductDetails::setCrDate);
		attributeGetterFunctions.put("crUid", ProductDetails::getCrUid);
		attributeSetterBiConsumers.put(
			"crUid",
			(BiConsumer<ProductDetails, String>)ProductDetails::setCrUid);
		attributeGetterFunctions.put("updDate", ProductDetails::getUpdDate);
		attributeSetterBiConsumers.put(
			"updDate",
			(BiConsumer<ProductDetails, String>)ProductDetails::setUpdDate);
		attributeGetterFunctions.put("updUid", ProductDetails::getUpdUid);
		attributeSetterBiConsumers.put(
			"updUid",
			(BiConsumer<ProductDetails, String>)ProductDetails::setUpdUid);
		attributeGetterFunctions.put(
			"productCode", ProductDetails::getProductCode);
		attributeSetterBiConsumers.put(
			"productCode",
			(BiConsumer<ProductDetails, String>)ProductDetails::setProductCode);
		attributeGetterFunctions.put(
			"productName", ProductDetails::getProductName);
		attributeSetterBiConsumers.put(
			"productName",
			(BiConsumer<ProductDetails, String>)ProductDetails::setProductName);
		attributeGetterFunctions.put(
			"productNameAr", ProductDetails::getProductNameAr);
		attributeSetterBiConsumers.put(
			"productNameAr",
			(BiConsumer<ProductDetails, String>)
				ProductDetails::setProductNameAr);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSysId() {
		return _sysId;
	}

	@Override
	public void setSysId(long sysId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sysId = sysId;
	}

	@JSON
	@Override
	public double getLobSysId() {
		return _lobSysId;
	}

	@Override
	public void setLobSysId(double lobSysId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lobSysId = lobSysId;
	}

	@JSON
	@Override
	public Date getEffFmDate() {
		return _effFmDate;
	}

	@Override
	public void setEffFmDate(Date effFmDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_effFmDate = effFmDate;
	}

	@JSON
	@Override
	public Date getEffToDate() {
		return _effToDate;
	}

	@Override
	public void setEffToDate(Date effToDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_effToDate = effToDate;
	}

	@JSON
	@Override
	public Date getCrDate() {
		return _crDate;
	}

	@Override
	public void setCrDate(Date crDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crDate = crDate;
	}

	@JSON
	@Override
	public String getCrUid() {
		if (_crUid == null) {
			return "";
		}
		else {
			return _crUid;
		}
	}

	@Override
	public void setCrUid(String crUid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crUid = crUid;
	}

	@JSON
	@Override
	public String getUpdDate() {
		if (_updDate == null) {
			return "";
		}
		else {
			return _updDate;
		}
	}

	@Override
	public void setUpdDate(String updDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updDate = updDate;
	}

	@JSON
	@Override
	public String getUpdUid() {
		if (_updUid == null) {
			return "";
		}
		else {
			return _updUid;
		}
	}

	@Override
	public void setUpdUid(String updUid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updUid = updUid;
	}

	@JSON
	@Override
	public String getProductCode() {
		if (_productCode == null) {
			return "";
		}
		else {
			return _productCode;
		}
	}

	@Override
	public void setProductCode(String productCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productCode = productCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalProductCode() {
		return getColumnOriginalValue("MDM_PROD_CODE");
	}

	@JSON
	@Override
	public String getProductName() {
		if (_productName == null) {
			return "";
		}
		else {
			return _productName;
		}
	}

	@Override
	public void setProductName(String productName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productName = productName;
	}

	@JSON
	@Override
	public String getProductNameAr() {
		if (_productNameAr == null) {
			return "";
		}
		else {
			return _productNameAr;
		}
	}

	@Override
	public void setProductNameAr(String productNameAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productNameAr = productNameAr;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ProductDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductDetailsImpl productDetailsImpl = new ProductDetailsImpl();

		productDetailsImpl.setSysId(getSysId());
		productDetailsImpl.setLobSysId(getLobSysId());
		productDetailsImpl.setEffFmDate(getEffFmDate());
		productDetailsImpl.setEffToDate(getEffToDate());
		productDetailsImpl.setCrDate(getCrDate());
		productDetailsImpl.setCrUid(getCrUid());
		productDetailsImpl.setUpdDate(getUpdDate());
		productDetailsImpl.setUpdUid(getUpdUid());
		productDetailsImpl.setProductCode(getProductCode());
		productDetailsImpl.setProductName(getProductName());
		productDetailsImpl.setProductNameAr(getProductNameAr());

		productDetailsImpl.resetOriginalValues();

		return productDetailsImpl;
	}

	@Override
	public int compareTo(ProductDetails productDetails) {
		long primaryKey = productDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductDetails)) {
			return false;
		}

		ProductDetails productDetails = (ProductDetails)object;

		long primaryKey = productDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductDetails> toCacheModel() {
		ProductDetailsCacheModel productDetailsCacheModel =
			new ProductDetailsCacheModel();

		productDetailsCacheModel.sysId = getSysId();

		productDetailsCacheModel.lobSysId = getLobSysId();

		Date effFmDate = getEffFmDate();

		if (effFmDate != null) {
			productDetailsCacheModel.effFmDate = effFmDate.getTime();
		}
		else {
			productDetailsCacheModel.effFmDate = Long.MIN_VALUE;
		}

		Date effToDate = getEffToDate();

		if (effToDate != null) {
			productDetailsCacheModel.effToDate = effToDate.getTime();
		}
		else {
			productDetailsCacheModel.effToDate = Long.MIN_VALUE;
		}

		Date crDate = getCrDate();

		if (crDate != null) {
			productDetailsCacheModel.crDate = crDate.getTime();
		}
		else {
			productDetailsCacheModel.crDate = Long.MIN_VALUE;
		}

		productDetailsCacheModel.crUid = getCrUid();

		String crUid = productDetailsCacheModel.crUid;

		if ((crUid != null) && (crUid.length() == 0)) {
			productDetailsCacheModel.crUid = null;
		}

		productDetailsCacheModel.updDate = getUpdDate();

		String updDate = productDetailsCacheModel.updDate;

		if ((updDate != null) && (updDate.length() == 0)) {
			productDetailsCacheModel.updDate = null;
		}

		productDetailsCacheModel.updUid = getUpdUid();

		String updUid = productDetailsCacheModel.updUid;

		if ((updUid != null) && (updUid.length() == 0)) {
			productDetailsCacheModel.updUid = null;
		}

		productDetailsCacheModel.productCode = getProductCode();

		String productCode = productDetailsCacheModel.productCode;

		if ((productCode != null) && (productCode.length() == 0)) {
			productDetailsCacheModel.productCode = null;
		}

		productDetailsCacheModel.productName = getProductName();

		String productName = productDetailsCacheModel.productName;

		if ((productName != null) && (productName.length() == 0)) {
			productDetailsCacheModel.productName = null;
		}

		productDetailsCacheModel.productNameAr = getProductNameAr();

		String productNameAr = productDetailsCacheModel.productNameAr;

		if ((productNameAr != null) && (productNameAr.length() == 0)) {
			productDetailsCacheModel.productNameAr = null;
		}

		return productDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ProductDetails)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ProductDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ProductDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ProductDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductDetails>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _sysId;
	private double _lobSysId;
	private Date _effFmDate;
	private Date _effToDate;
	private Date _crDate;
	private String _crUid;
	private String _updDate;
	private String _updUid;
	private String _productCode;
	private String _productName;
	private String _productNameAr;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ProductDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProductDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("MDM_PROD_SYS_ID", _sysId);
		_columnOriginalValues.put("MDM_PROD_LOB_SYS_ID", _lobSysId);
		_columnOriginalValues.put("MDM_PROD_EFF_FM_DT", _effFmDate);
		_columnOriginalValues.put("MDM_PROD_EFF_TO_DT", _effToDate);
		_columnOriginalValues.put("MDM_PROD_CR_DT", _crDate);
		_columnOriginalValues.put("MDM_PROD_CR_UID", _crUid);
		_columnOriginalValues.put("MDM_PROD_UPD_DT", _updDate);
		_columnOriginalValues.put("MDM_PROD_UPD_UID", _updUid);
		_columnOriginalValues.put("MDM_PROD_CODE", _productCode);
		_columnOriginalValues.put("MDM_PROD_NAME", _productName);
		_columnOriginalValues.put("MDM_PROD_NAME_AR", _productNameAr);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("MDM_PROD_SYS_ID", "sysId");
		attributeNames.put("MDM_PROD_LOB_SYS_ID", "lobSysId");
		attributeNames.put("MDM_PROD_EFF_FM_DT", "effFmDate");
		attributeNames.put("MDM_PROD_EFF_TO_DT", "effToDate");
		attributeNames.put("MDM_PROD_CR_DT", "crDate");
		attributeNames.put("MDM_PROD_CR_UID", "crUid");
		attributeNames.put("MDM_PROD_UPD_DT", "updDate");
		attributeNames.put("MDM_PROD_UPD_UID", "updUid");
		attributeNames.put("MDM_PROD_CODE", "productCode");
		attributeNames.put("MDM_PROD_NAME", "productName");
		attributeNames.put("MDM_PROD_NAME_AR", "productNameAr");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("MDM_PROD_SYS_ID", 1L);

		columnBitmasks.put("MDM_PROD_LOB_SYS_ID", 2L);

		columnBitmasks.put("MDM_PROD_EFF_FM_DT", 4L);

		columnBitmasks.put("MDM_PROD_EFF_TO_DT", 8L);

		columnBitmasks.put("MDM_PROD_CR_DT", 16L);

		columnBitmasks.put("MDM_PROD_CR_UID", 32L);

		columnBitmasks.put("MDM_PROD_UPD_DT", 64L);

		columnBitmasks.put("MDM_PROD_UPD_UID", 128L);

		columnBitmasks.put("MDM_PROD_CODE", 256L);

		columnBitmasks.put("MDM_PROD_NAME", 512L);

		columnBitmasks.put("MDM_PROD_NAME_AR", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProductDetails _escapedModel;

}