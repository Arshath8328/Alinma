/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.ClaimTPSearch;
import com.ejada.atmc.acl.db.model.ClaimTPSearchModel;
import com.ejada.atmc.acl.db.model.ClaimTPSearchSoap;
import com.ejada.atmc.acl.db.service.persistence.ClaimTPSearchPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ClaimTPSearch service. Represents a row in the &quot;ODS_CLAIM_TP_SEARCH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ClaimTPSearchModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClaimTPSearchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClaimTPSearchImpl
 * @generated
 */
@JSON(strict = true)
public class ClaimTPSearchModelImpl
	extends BaseModelImpl<ClaimTPSearch> implements ClaimTPSearchModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a claim tp search model instance should use the <code>ClaimTPSearch</code> interface instead.
	 */
	public static final String TABLE_NAME = "ODS_CLAIM_TP_SEARCH";

	public static final Object[][] TABLE_COLUMNS = {
		{"ODS_REPORT_NO", Types.VARCHAR}, {"ODS_TP_ID", Types.VARCHAR},
		{"ODS_TP_DRIVER_NAME", Types.VARCHAR}, {"ODS_TP_AGE", Types.VARCHAR},
		{"ODS_VEHICLE_SEQ_CUSTOM", Types.VARCHAR},
		{"ODS_TP_MOBILE_NO", Types.VARCHAR},
		{"ODS_TP_NATIONALITY", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ODS_REPORT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_TP_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_TP_DRIVER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_TP_AGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_VEHICLE_SEQ_CUSTOM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_TP_MOBILE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_TP_NATIONALITY", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ODS_CLAIM_TP_SEARCH (ODS_REPORT_NO VARCHAR(75) not null,ODS_TP_ID VARCHAR(75) not null,ODS_TP_DRIVER_NAME VARCHAR(75) null,ODS_TP_AGE VARCHAR(75) null,ODS_VEHICLE_SEQ_CUSTOM VARCHAR(75) null,ODS_TP_MOBILE_NO VARCHAR(75) null,ODS_TP_NATIONALITY VARCHAR(75) null,primary key (ODS_REPORT_NO, ODS_TP_ID))";

	public static final String TABLE_SQL_DROP =
		"drop table ODS_CLAIM_TP_SEARCH";

	public static final String ORDER_BY_JPQL =
		" ORDER BY claimTPSearch.id.reportNo ASC, claimTPSearch.id.tpId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ODS_CLAIM_TP_SEARCH.ODS_REPORT_NO ASC, ODS_CLAIM_TP_SEARCH.ODS_TP_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REPORTNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long TPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ClaimTPSearch toModel(ClaimTPSearchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ClaimTPSearch model = new ClaimTPSearchImpl();

		model.setReportNo(soapModel.getReportNo());
		model.setTpId(soapModel.getTpId());
		model.setTpDriverName(soapModel.getTpDriverName());
		model.setTpAge(soapModel.getTpAge());
		model.setVehicleSEQCustom(soapModel.getVehicleSEQCustom());
		model.setTpMobileNo(soapModel.getTpMobileNo());
		model.setTpNationality(soapModel.getTpNationality());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ClaimTPSearch> toModels(ClaimTPSearchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ClaimTPSearch> models = new ArrayList<ClaimTPSearch>(
			soapModels.length);

		for (ClaimTPSearchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ClaimTPSearchModelImpl() {
	}

	@Override
	public ClaimTPSearchPK getPrimaryKey() {
		return new ClaimTPSearchPK(_reportNo, _tpId);
	}

	@Override
	public void setPrimaryKey(ClaimTPSearchPK primaryKey) {
		setReportNo(primaryKey.reportNo);
		setTpId(primaryKey.tpId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ClaimTPSearchPK(_reportNo, _tpId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ClaimTPSearchPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ClaimTPSearch.class;
	}

	@Override
	public String getModelClassName() {
		return ClaimTPSearch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ClaimTPSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ClaimTPSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimTPSearch, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ClaimTPSearch)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ClaimTPSearch, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ClaimTPSearch, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ClaimTPSearch)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ClaimTPSearch, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ClaimTPSearch, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ClaimTPSearch>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ClaimTPSearch.class.getClassLoader(), ClaimTPSearch.class,
			ModelWrapper.class);

		try {
			Constructor<ClaimTPSearch> constructor =
				(Constructor<ClaimTPSearch>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ClaimTPSearch, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ClaimTPSearch, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ClaimTPSearch, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ClaimTPSearch, Object>>();
		Map<String, BiConsumer<ClaimTPSearch, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ClaimTPSearch, ?>>();

		attributeGetterFunctions.put("reportNo", ClaimTPSearch::getReportNo);
		attributeSetterBiConsumers.put(
			"reportNo",
			(BiConsumer<ClaimTPSearch, String>)ClaimTPSearch::setReportNo);
		attributeGetterFunctions.put("tpId", ClaimTPSearch::getTpId);
		attributeSetterBiConsumers.put(
			"tpId", (BiConsumer<ClaimTPSearch, String>)ClaimTPSearch::setTpId);
		attributeGetterFunctions.put(
			"tpDriverName", ClaimTPSearch::getTpDriverName);
		attributeSetterBiConsumers.put(
			"tpDriverName",
			(BiConsumer<ClaimTPSearch, String>)ClaimTPSearch::setTpDriverName);
		attributeGetterFunctions.put("tpAge", ClaimTPSearch::getTpAge);
		attributeSetterBiConsumers.put(
			"tpAge",
			(BiConsumer<ClaimTPSearch, String>)ClaimTPSearch::setTpAge);
		attributeGetterFunctions.put(
			"vehicleSEQCustom", ClaimTPSearch::getVehicleSEQCustom);
		attributeSetterBiConsumers.put(
			"vehicleSEQCustom",
			(BiConsumer<ClaimTPSearch, String>)
				ClaimTPSearch::setVehicleSEQCustom);
		attributeGetterFunctions.put(
			"tpMobileNo", ClaimTPSearch::getTpMobileNo);
		attributeSetterBiConsumers.put(
			"tpMobileNo",
			(BiConsumer<ClaimTPSearch, String>)ClaimTPSearch::setTpMobileNo);
		attributeGetterFunctions.put(
			"tpNationality", ClaimTPSearch::getTpNationality);
		attributeSetterBiConsumers.put(
			"tpNationality",
			(BiConsumer<ClaimTPSearch, String>)ClaimTPSearch::setTpNationality);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getReportNo() {
		if (_reportNo == null) {
			return "";
		}
		else {
			return _reportNo;
		}
	}

	@Override
	public void setReportNo(String reportNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportNo = reportNo;
	}

	@JSON
	@Override
	public String getTpId() {
		if (_tpId == null) {
			return "";
		}
		else {
			return _tpId;
		}
	}

	@Override
	public void setTpId(String tpId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tpId = tpId;
	}

	@JSON
	@Override
	public String getTpDriverName() {
		if (_tpDriverName == null) {
			return "";
		}
		else {
			return _tpDriverName;
		}
	}

	@Override
	public void setTpDriverName(String tpDriverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tpDriverName = tpDriverName;
	}

	@JSON
	@Override
	public String getTpAge() {
		if (_tpAge == null) {
			return "";
		}
		else {
			return _tpAge;
		}
	}

	@Override
	public void setTpAge(String tpAge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tpAge = tpAge;
	}

	@JSON
	@Override
	public String getVehicleSEQCustom() {
		if (_vehicleSEQCustom == null) {
			return "";
		}
		else {
			return _vehicleSEQCustom;
		}
	}

	@Override
	public void setVehicleSEQCustom(String vehicleSEQCustom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleSEQCustom = vehicleSEQCustom;
	}

	@JSON
	@Override
	public String getTpMobileNo() {
		if (_tpMobileNo == null) {
			return "";
		}
		else {
			return _tpMobileNo;
		}
	}

	@Override
	public void setTpMobileNo(String tpMobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tpMobileNo = tpMobileNo;
	}

	@JSON
	@Override
	public String getTpNationality() {
		if (_tpNationality == null) {
			return "";
		}
		else {
			return _tpNationality;
		}
	}

	@Override
	public void setTpNationality(String tpNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tpNationality = tpNationality;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ClaimTPSearch toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ClaimTPSearch>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClaimTPSearchImpl claimTPSearchImpl = new ClaimTPSearchImpl();

		claimTPSearchImpl.setReportNo(getReportNo());
		claimTPSearchImpl.setTpId(getTpId());
		claimTPSearchImpl.setTpDriverName(getTpDriverName());
		claimTPSearchImpl.setTpAge(getTpAge());
		claimTPSearchImpl.setVehicleSEQCustom(getVehicleSEQCustom());
		claimTPSearchImpl.setTpMobileNo(getTpMobileNo());
		claimTPSearchImpl.setTpNationality(getTpNationality());

		claimTPSearchImpl.resetOriginalValues();

		return claimTPSearchImpl;
	}

	@Override
	public int compareTo(ClaimTPSearch claimTPSearch) {
		ClaimTPSearchPK primaryKey = claimTPSearch.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ClaimTPSearch)) {
			return false;
		}

		ClaimTPSearch claimTPSearch = (ClaimTPSearch)object;

		ClaimTPSearchPK primaryKey = claimTPSearch.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ClaimTPSearch> toCacheModel() {
		ClaimTPSearchCacheModel claimTPSearchCacheModel =
			new ClaimTPSearchCacheModel();

		claimTPSearchCacheModel.claimTPSearchPK = getPrimaryKey();

		claimTPSearchCacheModel.reportNo = getReportNo();

		String reportNo = claimTPSearchCacheModel.reportNo;

		if ((reportNo != null) && (reportNo.length() == 0)) {
			claimTPSearchCacheModel.reportNo = null;
		}

		claimTPSearchCacheModel.tpId = getTpId();

		String tpId = claimTPSearchCacheModel.tpId;

		if ((tpId != null) && (tpId.length() == 0)) {
			claimTPSearchCacheModel.tpId = null;
		}

		claimTPSearchCacheModel.tpDriverName = getTpDriverName();

		String tpDriverName = claimTPSearchCacheModel.tpDriverName;

		if ((tpDriverName != null) && (tpDriverName.length() == 0)) {
			claimTPSearchCacheModel.tpDriverName = null;
		}

		claimTPSearchCacheModel.tpAge = getTpAge();

		String tpAge = claimTPSearchCacheModel.tpAge;

		if ((tpAge != null) && (tpAge.length() == 0)) {
			claimTPSearchCacheModel.tpAge = null;
		}

		claimTPSearchCacheModel.vehicleSEQCustom = getVehicleSEQCustom();

		String vehicleSEQCustom = claimTPSearchCacheModel.vehicleSEQCustom;

		if ((vehicleSEQCustom != null) && (vehicleSEQCustom.length() == 0)) {
			claimTPSearchCacheModel.vehicleSEQCustom = null;
		}

		claimTPSearchCacheModel.tpMobileNo = getTpMobileNo();

		String tpMobileNo = claimTPSearchCacheModel.tpMobileNo;

		if ((tpMobileNo != null) && (tpMobileNo.length() == 0)) {
			claimTPSearchCacheModel.tpMobileNo = null;
		}

		claimTPSearchCacheModel.tpNationality = getTpNationality();

		String tpNationality = claimTPSearchCacheModel.tpNationality;

		if ((tpNationality != null) && (tpNationality.length() == 0)) {
			claimTPSearchCacheModel.tpNationality = null;
		}

		return claimTPSearchCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ClaimTPSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ClaimTPSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimTPSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ClaimTPSearch)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ClaimTPSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ClaimTPSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimTPSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ClaimTPSearch)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ClaimTPSearch>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _reportNo;
	private String _tpId;
	private String _tpDriverName;
	private String _tpAge;
	private String _vehicleSEQCustom;
	private String _tpMobileNo;
	private String _tpNationality;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ClaimTPSearch, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ClaimTPSearch)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ODS_REPORT_NO", _reportNo);
		_columnOriginalValues.put("ODS_TP_ID", _tpId);
		_columnOriginalValues.put("ODS_TP_DRIVER_NAME", _tpDriverName);
		_columnOriginalValues.put("ODS_TP_AGE", _tpAge);
		_columnOriginalValues.put("ODS_VEHICLE_SEQ_CUSTOM", _vehicleSEQCustom);
		_columnOriginalValues.put("ODS_TP_MOBILE_NO", _tpMobileNo);
		_columnOriginalValues.put("ODS_TP_NATIONALITY", _tpNationality);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ODS_REPORT_NO", "reportNo");
		attributeNames.put("ODS_TP_ID", "tpId");
		attributeNames.put("ODS_TP_DRIVER_NAME", "tpDriverName");
		attributeNames.put("ODS_TP_AGE", "tpAge");
		attributeNames.put("ODS_VEHICLE_SEQ_CUSTOM", "vehicleSEQCustom");
		attributeNames.put("ODS_TP_MOBILE_NO", "tpMobileNo");
		attributeNames.put("ODS_TP_NATIONALITY", "tpNationality");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ODS_REPORT_NO", 1L);

		columnBitmasks.put("ODS_TP_ID", 2L);

		columnBitmasks.put("ODS_TP_DRIVER_NAME", 4L);

		columnBitmasks.put("ODS_TP_AGE", 8L);

		columnBitmasks.put("ODS_VEHICLE_SEQ_CUSTOM", 16L);

		columnBitmasks.put("ODS_TP_MOBILE_NO", 32L);

		columnBitmasks.put("ODS_TP_NATIONALITY", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ClaimTPSearch _escapedModel;

}