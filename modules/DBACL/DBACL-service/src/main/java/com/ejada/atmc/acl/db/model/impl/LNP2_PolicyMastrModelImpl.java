/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.LNP2_PolicyMastr;
import com.ejada.atmc.acl.db.model.LNP2_PolicyMastrModel;
import com.ejada.atmc.acl.db.model.LNP2_PolicyMastrSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LNP2_PolicyMastr service. Represents a row in the &quot;LNP2_POLICYMASTR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LNP2_PolicyMastrModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LNP2_PolicyMastrImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LNP2_PolicyMastrImpl
 * @generated
 */
@JSON(strict = true)
public class LNP2_PolicyMastrModelImpl
	extends BaseModelImpl<LNP2_PolicyMastr> implements LNP2_PolicyMastrModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lnp2_ policy mastr model instance should use the <code>LNP2_PolicyMastr</code> interface instead.
	 */
	public static final String TABLE_NAME = "LNP2_POLICYMASTR";

	public static final Object[][] TABLE_COLUMNS = {
		{"NP1_PROPOSAL", Types.VARCHAR}, {"NP2_SETNO", Types.VARCHAR},
		{"CFR_FORFEITUCD", Types.VARCHAR}, {"CMO_MODE", Types.VARCHAR},
		{"PCU_CURRCODE", Types.VARCHAR}, {"AAG_AGCODE", Types.BIGINT},
		{"CCL_CATEGORYCD", Types.VARCHAR}, {"USE_USERID", Types.VARCHAR},
		{"USE_DATETIME", Types.TIMESTAMP}, {"NP2_GROSPRM", Types.BIGINT},
		{"NP2_AGEPREM", Types.BIGINT}, {"NP2_COMMENDATE", Types.TIMESTAMP},
		{"NP2_SUMATRISK", Types.BIGINT}, {"NP2_SUBSTANDAR", Types.VARCHAR},
		{"NP2_EFFECTDATE", Types.TIMESTAMP},
		{"NP2_EXPIRYDATE", Types.TIMESTAMP},
		{"NP2_ENDOFPRMDT", Types.TIMESTAMP}, {"NP2_PAIDUPAMT", Types.BIGINT},
		{"NP2_DIFFINPREM", Types.BIGINT}, {"NP2_DIFFINFYCO", Types.BIGINT},
		{"NP2_CHARGES", Types.BIGINT}, {"NP2_TOTLOAD", Types.BIGINT},
		{"NP2_NEXTDUEDAT", Types.TIMESTAMP}, {"NP2_AGEADMITT", Types.BIGINT},
		{"NP2_OPTIMAINDEX", Types.BIGINT}, {"NP2_AGEPREM2ND", Types.BIGINT},
		{"NP2_POLICYFEES", Types.BIGINT}, {"NP2_SAR", Types.BIGINT},
		{"NP2_TOTPREMIUM", Types.BIGINT}, {"NP2_APPROVED", Types.BIGINT},
		{"NP2_ENDORSEMENTNO", Types.VARCHAR}, {"PFS_ACNTYEAR", Types.VARCHAR},
		{"ARQ_REQUESTYPE", Types.VARCHAR}, {"ARQ_REQUESTNO", Types.BIGINT},
		{"NP2_FORFEITDAT", Types.TIMESTAMP}, {"CONVERT", Types.BIGINT},
		{"NP2_NOTIONALAGE", Types.BIGINT}, {"COP_OCCUPATICD", Types.VARCHAR},
		{"NP2_DOB", Types.TIMESTAMP}, {"NP2_ACCR_PROC", Types.VARCHAR},
		{"NP2_EFFECTIVEAGE", Types.BIGINT}, {"NP2_NOM2NDLIFE", Types.VARCHAR},
		{"NP2_DOB_2ND", Types.TIMESTAMP}, {"NP2_LASTREVBONUS", Types.BIGINT},
		{"NP2_REVERSIONARY", Types.BIGINT}, {"NP2_RIDER_BONUS", Types.BIGINT},
		{"NP2_LAST_RIDER_BONUS", Types.BIGINT},
		{"NP2_AGEPREM_ACTUAL", Types.BIGINT},
		{"NP2_AGEPREM2ND_ACTUAL", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("NP1_PROPOSAL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NP2_SETNO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CFR_FORFEITUCD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CMO_MODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PCU_CURRCODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("AAG_AGCODE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CCL_CATEGORYCD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("USE_USERID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("USE_DATETIME", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_GROSPRM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_AGEPREM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_COMMENDATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_SUMATRISK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_SUBSTANDAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NP2_EFFECTDATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_EXPIRYDATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_ENDOFPRMDT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_PAIDUPAMT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_DIFFINPREM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_DIFFINFYCO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_CHARGES", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_TOTLOAD", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_NEXTDUEDAT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_AGEADMITT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_OPTIMAINDEX", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_AGEPREM2ND", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_POLICYFEES", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_SAR", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_TOTPREMIUM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_APPROVED", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_ENDORSEMENTNO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PFS_ACNTYEAR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ARQ_REQUESTYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ARQ_REQUESTNO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_FORFEITDAT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CONVERT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_NOTIONALAGE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("COP_OCCUPATICD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NP2_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_ACCR_PROC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NP2_EFFECTIVEAGE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_NOM2NDLIFE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NP2_DOB_2ND", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("NP2_LASTREVBONUS", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_REVERSIONARY", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_RIDER_BONUS", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_LAST_RIDER_BONUS", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_AGEPREM_ACTUAL", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NP2_AGEPREM2ND_ACTUAL", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LNP2_POLICYMASTR (NP1_PROPOSAL VARCHAR(75) not null primary key,NP2_SETNO VARCHAR(75) null,CFR_FORFEITUCD VARCHAR(75) null,CMO_MODE VARCHAR(75) null,PCU_CURRCODE VARCHAR(75) null,AAG_AGCODE LONG,CCL_CATEGORYCD VARCHAR(75) null,USE_USERID VARCHAR(75) null,USE_DATETIME DATE null,NP2_GROSPRM LONG,NP2_AGEPREM LONG,NP2_COMMENDATE DATE null,NP2_SUMATRISK LONG,NP2_SUBSTANDAR VARCHAR(75) null,NP2_EFFECTDATE DATE null,NP2_EXPIRYDATE DATE null,NP2_ENDOFPRMDT DATE null,NP2_PAIDUPAMT LONG,NP2_DIFFINPREM LONG,NP2_DIFFINFYCO LONG,NP2_CHARGES LONG,NP2_TOTLOAD LONG,NP2_NEXTDUEDAT DATE null,NP2_AGEADMITT LONG,NP2_OPTIMAINDEX LONG,NP2_AGEPREM2ND LONG,NP2_POLICYFEES LONG,NP2_SAR LONG,NP2_TOTPREMIUM LONG,NP2_APPROVED LONG,NP2_ENDORSEMENTNO VARCHAR(75) null,PFS_ACNTYEAR VARCHAR(75) null,ARQ_REQUESTYPE VARCHAR(75) null,ARQ_REQUESTNO LONG,NP2_FORFEITDAT DATE null,CONVERT LONG,NP2_NOTIONALAGE LONG,COP_OCCUPATICD VARCHAR(75) null,NP2_DOB DATE null,NP2_ACCR_PROC VARCHAR(75) null,NP2_EFFECTIVEAGE LONG,NP2_NOM2NDLIFE VARCHAR(75) null,NP2_DOB_2ND DATE null,NP2_LASTREVBONUS LONG,NP2_REVERSIONARY LONG,NP2_RIDER_BONUS LONG,NP2_LAST_RIDER_BONUS LONG,NP2_AGEPREM_ACTUAL LONG,NP2_AGEPREM2ND_ACTUAL LONG)";

	public static final String TABLE_SQL_DROP = "drop table LNP2_POLICYMASTR";

	public static final String ORDER_BY_JPQL =
		" ORDER BY lnp2_PolicyMastr.np1_proposal ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LNP2_POLICYMASTR.NP1_PROPOSAL ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long NP1_PROPOSAL_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static LNP2_PolicyMastr toModel(LNP2_PolicyMastrSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LNP2_PolicyMastr model = new LNP2_PolicyMastrImpl();

		model.setNp1_proposal(soapModel.getNp1_proposal());
		model.setNp2_setno(soapModel.getNp2_setno());
		model.setCfr_forfeitucd(soapModel.getCfr_forfeitucd());
		model.setCmo_mode(soapModel.getCmo_mode());
		model.setPcu_currcode(soapModel.getPcu_currcode());
		model.setAag_agcode(soapModel.getAag_agcode());
		model.setCcl_categorycd(soapModel.getCcl_categorycd());
		model.setUse_userid(soapModel.getUse_userid());
		model.setUse_datetime(soapModel.getUse_datetime());
		model.setNp2_grosprm(soapModel.getNp2_grosprm());
		model.setNp2_ageprem(soapModel.getNp2_ageprem());
		model.setNp2_commendate(soapModel.getNp2_commendate());
		model.setNp2_sumatrisk(soapModel.getNp2_sumatrisk());
		model.setNp2_substandar(soapModel.getNp2_substandar());
		model.setNp2_effectdate(soapModel.getNp2_effectdate());
		model.setNp2_expirydate(soapModel.getNp2_expirydate());
		model.setNp2_endofprmdt(soapModel.getNp2_endofprmdt());
		model.setNp2_paidupamt(soapModel.getNp2_paidupamt());
		model.setNp2_diffinprem(soapModel.getNp2_diffinprem());
		model.setNp2_diffinfyco(soapModel.getNp2_diffinfyco());
		model.setNp2_charges(soapModel.getNp2_charges());
		model.setNp2_totload(soapModel.getNp2_totload());
		model.setNp2_nextduedat(soapModel.getNp2_nextduedat());
		model.setNp2_ageadmitt(soapModel.getNp2_ageadmitt());
		model.setNp2_optimaindex(soapModel.getNp2_optimaindex());
		model.setNp2_ageprem2nd(soapModel.getNp2_ageprem2nd());
		model.setNp2_policyfees(soapModel.getNp2_policyfees());
		model.setNp2_sar(soapModel.getNp2_sar());
		model.setNp2_totpremium(soapModel.getNp2_totpremium());
		model.setNp2_approved(soapModel.getNp2_approved());
		model.setNp2_endorsementno(soapModel.getNp2_endorsementno());
		model.setPfs_acntyear(soapModel.getPfs_acntyear());
		model.setArq_requestype(soapModel.getArq_requestype());
		model.setArq_requestno(soapModel.getArq_requestno());
		model.setNp2_forfeitdat(soapModel.getNp2_forfeitdat());
		model.setConvert(soapModel.getConvert());
		model.setNp2_notionalage(soapModel.getNp2_notionalage());
		model.setCop_occupaticd(soapModel.getCop_occupaticd());
		model.setNp2_dob(soapModel.getNp2_dob());
		model.setNp2_accr_proc(soapModel.getNp2_accr_proc());
		model.setNp2_effectiveage(soapModel.getNp2_effectiveage());
		model.setNp2_nom2ndlife(soapModel.getNp2_nom2ndlife());
		model.setNp2_dob_2nd(soapModel.getNp2_dob_2nd());
		model.setNp2_lastrevbonus(soapModel.getNp2_lastrevbonus());
		model.setNp2_reversionary(soapModel.getNp2_reversionary());
		model.setNp2_rider_bonus(soapModel.getNp2_rider_bonus());
		model.setNp2_last_rider_bonus(soapModel.getNp2_last_rider_bonus());
		model.setNp2_ageprem_actual(soapModel.getNp2_ageprem_actual());
		model.setNp2_ageprem2nd_actual(soapModel.getNp2_ageprem2nd_actual());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<LNP2_PolicyMastr> toModels(
		LNP2_PolicyMastrSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LNP2_PolicyMastr> models = new ArrayList<LNP2_PolicyMastr>(
			soapModels.length);

		for (LNP2_PolicyMastrSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LNP2_PolicyMastrModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _np1_proposal;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setNp1_proposal(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _np1_proposal;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return LNP2_PolicyMastr.class;
	}

	@Override
	public String getModelClassName() {
		return LNP2_PolicyMastr.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LNP2_PolicyMastr, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LNP2_PolicyMastr, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LNP2_PolicyMastr, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LNP2_PolicyMastr)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LNP2_PolicyMastr, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LNP2_PolicyMastr, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LNP2_PolicyMastr)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LNP2_PolicyMastr, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LNP2_PolicyMastr, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LNP2_PolicyMastr>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LNP2_PolicyMastr.class.getClassLoader(), LNP2_PolicyMastr.class,
			ModelWrapper.class);

		try {
			Constructor<LNP2_PolicyMastr> constructor =
				(Constructor<LNP2_PolicyMastr>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LNP2_PolicyMastr, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LNP2_PolicyMastr, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LNP2_PolicyMastr, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<LNP2_PolicyMastr, Object>>();
		Map<String, BiConsumer<LNP2_PolicyMastr, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LNP2_PolicyMastr, ?>>();

		attributeGetterFunctions.put(
			"np1_proposal", LNP2_PolicyMastr::getNp1_proposal);
		attributeSetterBiConsumers.put(
			"np1_proposal",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setNp1_proposal);
		attributeGetterFunctions.put(
			"np2_setno", LNP2_PolicyMastr::getNp2_setno);
		attributeSetterBiConsumers.put(
			"np2_setno",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setNp2_setno);
		attributeGetterFunctions.put(
			"cfr_forfeitucd", LNP2_PolicyMastr::getCfr_forfeitucd);
		attributeSetterBiConsumers.put(
			"cfr_forfeitucd",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setCfr_forfeitucd);
		attributeGetterFunctions.put("cmo_mode", LNP2_PolicyMastr::getCmo_mode);
		attributeSetterBiConsumers.put(
			"cmo_mode",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setCmo_mode);
		attributeGetterFunctions.put(
			"pcu_currcode", LNP2_PolicyMastr::getPcu_currcode);
		attributeSetterBiConsumers.put(
			"pcu_currcode",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setPcu_currcode);
		attributeGetterFunctions.put(
			"aag_agcode", LNP2_PolicyMastr::getAag_agcode);
		attributeSetterBiConsumers.put(
			"aag_agcode",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setAag_agcode);
		attributeGetterFunctions.put(
			"ccl_categorycd", LNP2_PolicyMastr::getCcl_categorycd);
		attributeSetterBiConsumers.put(
			"ccl_categorycd",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setCcl_categorycd);
		attributeGetterFunctions.put(
			"use_userid", LNP2_PolicyMastr::getUse_userid);
		attributeSetterBiConsumers.put(
			"use_userid",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setUse_userid);
		attributeGetterFunctions.put(
			"use_datetime", LNP2_PolicyMastr::getUse_datetime);
		attributeSetterBiConsumers.put(
			"use_datetime",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setUse_datetime);
		attributeGetterFunctions.put(
			"np2_grosprm", LNP2_PolicyMastr::getNp2_grosprm);
		attributeSetterBiConsumers.put(
			"np2_grosprm",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_grosprm);
		attributeGetterFunctions.put(
			"np2_ageprem", LNP2_PolicyMastr::getNp2_ageprem);
		attributeSetterBiConsumers.put(
			"np2_ageprem",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_ageprem);
		attributeGetterFunctions.put(
			"np2_commendate", LNP2_PolicyMastr::getNp2_commendate);
		attributeSetterBiConsumers.put(
			"np2_commendate",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setNp2_commendate);
		attributeGetterFunctions.put(
			"np2_sumatrisk", LNP2_PolicyMastr::getNp2_sumatrisk);
		attributeSetterBiConsumers.put(
			"np2_sumatrisk",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_sumatrisk);
		attributeGetterFunctions.put(
			"np2_substandar", LNP2_PolicyMastr::getNp2_substandar);
		attributeSetterBiConsumers.put(
			"np2_substandar",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setNp2_substandar);
		attributeGetterFunctions.put(
			"np2_effectdate", LNP2_PolicyMastr::getNp2_effectdate);
		attributeSetterBiConsumers.put(
			"np2_effectdate",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setNp2_effectdate);
		attributeGetterFunctions.put(
			"np2_expirydate", LNP2_PolicyMastr::getNp2_expirydate);
		attributeSetterBiConsumers.put(
			"np2_expirydate",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setNp2_expirydate);
		attributeGetterFunctions.put(
			"np2_endofprmdt", LNP2_PolicyMastr::getNp2_endofprmdt);
		attributeSetterBiConsumers.put(
			"np2_endofprmdt",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setNp2_endofprmdt);
		attributeGetterFunctions.put(
			"np2_paidupamt", LNP2_PolicyMastr::getNp2_paidupamt);
		attributeSetterBiConsumers.put(
			"np2_paidupamt",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_paidupamt);
		attributeGetterFunctions.put(
			"np2_diffinprem", LNP2_PolicyMastr::getNp2_diffinprem);
		attributeSetterBiConsumers.put(
			"np2_diffinprem",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_diffinprem);
		attributeGetterFunctions.put(
			"np2_diffinfyco", LNP2_PolicyMastr::getNp2_diffinfyco);
		attributeSetterBiConsumers.put(
			"np2_diffinfyco",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_diffinfyco);
		attributeGetterFunctions.put(
			"np2_charges", LNP2_PolicyMastr::getNp2_charges);
		attributeSetterBiConsumers.put(
			"np2_charges",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_charges);
		attributeGetterFunctions.put(
			"np2_totload", LNP2_PolicyMastr::getNp2_totload);
		attributeSetterBiConsumers.put(
			"np2_totload",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_totload);
		attributeGetterFunctions.put(
			"np2_nextduedat", LNP2_PolicyMastr::getNp2_nextduedat);
		attributeSetterBiConsumers.put(
			"np2_nextduedat",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setNp2_nextduedat);
		attributeGetterFunctions.put(
			"np2_ageadmitt", LNP2_PolicyMastr::getNp2_ageadmitt);
		attributeSetterBiConsumers.put(
			"np2_ageadmitt",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_ageadmitt);
		attributeGetterFunctions.put(
			"np2_optimaindex", LNP2_PolicyMastr::getNp2_optimaindex);
		attributeSetterBiConsumers.put(
			"np2_optimaindex",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_optimaindex);
		attributeGetterFunctions.put(
			"np2_ageprem2nd", LNP2_PolicyMastr::getNp2_ageprem2nd);
		attributeSetterBiConsumers.put(
			"np2_ageprem2nd",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_ageprem2nd);
		attributeGetterFunctions.put(
			"np2_policyfees", LNP2_PolicyMastr::getNp2_policyfees);
		attributeSetterBiConsumers.put(
			"np2_policyfees",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_policyfees);
		attributeGetterFunctions.put("np2_sar", LNP2_PolicyMastr::getNp2_sar);
		attributeSetterBiConsumers.put(
			"np2_sar",
			(BiConsumer<LNP2_PolicyMastr, Long>)LNP2_PolicyMastr::setNp2_sar);
		attributeGetterFunctions.put(
			"np2_totpremium", LNP2_PolicyMastr::getNp2_totpremium);
		attributeSetterBiConsumers.put(
			"np2_totpremium",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_totpremium);
		attributeGetterFunctions.put(
			"np2_approved", LNP2_PolicyMastr::getNp2_approved);
		attributeSetterBiConsumers.put(
			"np2_approved",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_approved);
		attributeGetterFunctions.put(
			"np2_endorsementno", LNP2_PolicyMastr::getNp2_endorsementno);
		attributeSetterBiConsumers.put(
			"np2_endorsementno",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setNp2_endorsementno);
		attributeGetterFunctions.put(
			"pfs_acntyear", LNP2_PolicyMastr::getPfs_acntyear);
		attributeSetterBiConsumers.put(
			"pfs_acntyear",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setPfs_acntyear);
		attributeGetterFunctions.put(
			"arq_requestype", LNP2_PolicyMastr::getArq_requestype);
		attributeSetterBiConsumers.put(
			"arq_requestype",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setArq_requestype);
		attributeGetterFunctions.put(
			"arq_requestno", LNP2_PolicyMastr::getArq_requestno);
		attributeSetterBiConsumers.put(
			"arq_requestno",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setArq_requestno);
		attributeGetterFunctions.put(
			"np2_forfeitdat", LNP2_PolicyMastr::getNp2_forfeitdat);
		attributeSetterBiConsumers.put(
			"np2_forfeitdat",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setNp2_forfeitdat);
		attributeGetterFunctions.put("convert", LNP2_PolicyMastr::getConvert);
		attributeSetterBiConsumers.put(
			"convert",
			(BiConsumer<LNP2_PolicyMastr, Long>)LNP2_PolicyMastr::setConvert);
		attributeGetterFunctions.put(
			"np2_notionalage", LNP2_PolicyMastr::getNp2_notionalage);
		attributeSetterBiConsumers.put(
			"np2_notionalage",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_notionalage);
		attributeGetterFunctions.put(
			"cop_occupaticd", LNP2_PolicyMastr::getCop_occupaticd);
		attributeSetterBiConsumers.put(
			"cop_occupaticd",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setCop_occupaticd);
		attributeGetterFunctions.put("np2_dob", LNP2_PolicyMastr::getNp2_dob);
		attributeSetterBiConsumers.put(
			"np2_dob",
			(BiConsumer<LNP2_PolicyMastr, Date>)LNP2_PolicyMastr::setNp2_dob);
		attributeGetterFunctions.put(
			"np2_accr_proc", LNP2_PolicyMastr::getNp2_accr_proc);
		attributeSetterBiConsumers.put(
			"np2_accr_proc",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setNp2_accr_proc);
		attributeGetterFunctions.put(
			"np2_effectiveage", LNP2_PolicyMastr::getNp2_effectiveage);
		attributeSetterBiConsumers.put(
			"np2_effectiveage",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_effectiveage);
		attributeGetterFunctions.put(
			"np2_nom2ndlife", LNP2_PolicyMastr::getNp2_nom2ndlife);
		attributeSetterBiConsumers.put(
			"np2_nom2ndlife",
			(BiConsumer<LNP2_PolicyMastr, String>)
				LNP2_PolicyMastr::setNp2_nom2ndlife);
		attributeGetterFunctions.put(
			"np2_dob_2nd", LNP2_PolicyMastr::getNp2_dob_2nd);
		attributeSetterBiConsumers.put(
			"np2_dob_2nd",
			(BiConsumer<LNP2_PolicyMastr, Date>)
				LNP2_PolicyMastr::setNp2_dob_2nd);
		attributeGetterFunctions.put(
			"np2_lastrevbonus", LNP2_PolicyMastr::getNp2_lastrevbonus);
		attributeSetterBiConsumers.put(
			"np2_lastrevbonus",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_lastrevbonus);
		attributeGetterFunctions.put(
			"np2_reversionary", LNP2_PolicyMastr::getNp2_reversionary);
		attributeSetterBiConsumers.put(
			"np2_reversionary",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_reversionary);
		attributeGetterFunctions.put(
			"np2_rider_bonus", LNP2_PolicyMastr::getNp2_rider_bonus);
		attributeSetterBiConsumers.put(
			"np2_rider_bonus",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_rider_bonus);
		attributeGetterFunctions.put(
			"np2_last_rider_bonus", LNP2_PolicyMastr::getNp2_last_rider_bonus);
		attributeSetterBiConsumers.put(
			"np2_last_rider_bonus",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_last_rider_bonus);
		attributeGetterFunctions.put(
			"np2_ageprem_actual", LNP2_PolicyMastr::getNp2_ageprem_actual);
		attributeSetterBiConsumers.put(
			"np2_ageprem_actual",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_ageprem_actual);
		attributeGetterFunctions.put(
			"np2_ageprem2nd_actual",
			LNP2_PolicyMastr::getNp2_ageprem2nd_actual);
		attributeSetterBiConsumers.put(
			"np2_ageprem2nd_actual",
			(BiConsumer<LNP2_PolicyMastr, Long>)
				LNP2_PolicyMastr::setNp2_ageprem2nd_actual);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getNp1_proposal() {
		if (_np1_proposal == null) {
			return "";
		}
		else {
			return _np1_proposal;
		}
	}

	@Override
	public void setNp1_proposal(String np1_proposal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np1_proposal = np1_proposal;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNp1_proposal() {
		return getColumnOriginalValue("NP1_PROPOSAL");
	}

	@JSON
	@Override
	public String getNp2_setno() {
		if (_np2_setno == null) {
			return "";
		}
		else {
			return _np2_setno;
		}
	}

	@Override
	public void setNp2_setno(String np2_setno) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_setno = np2_setno;
	}

	@JSON
	@Override
	public String getCfr_forfeitucd() {
		if (_cfr_forfeitucd == null) {
			return "";
		}
		else {
			return _cfr_forfeitucd;
		}
	}

	@Override
	public void setCfr_forfeitucd(String cfr_forfeitucd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cfr_forfeitucd = cfr_forfeitucd;
	}

	@JSON
	@Override
	public String getCmo_mode() {
		if (_cmo_mode == null) {
			return "";
		}
		else {
			return _cmo_mode;
		}
	}

	@Override
	public void setCmo_mode(String cmo_mode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cmo_mode = cmo_mode;
	}

	@JSON
	@Override
	public String getPcu_currcode() {
		if (_pcu_currcode == null) {
			return "";
		}
		else {
			return _pcu_currcode;
		}
	}

	@Override
	public void setPcu_currcode(String pcu_currcode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pcu_currcode = pcu_currcode;
	}

	@JSON
	@Override
	public long getAag_agcode() {
		return _aag_agcode;
	}

	@Override
	public void setAag_agcode(long aag_agcode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aag_agcode = aag_agcode;
	}

	@JSON
	@Override
	public String getCcl_categorycd() {
		if (_ccl_categorycd == null) {
			return "";
		}
		else {
			return _ccl_categorycd;
		}
	}

	@Override
	public void setCcl_categorycd(String ccl_categorycd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ccl_categorycd = ccl_categorycd;
	}

	@JSON
	@Override
	public String getUse_userid() {
		if (_use_userid == null) {
			return "";
		}
		else {
			return _use_userid;
		}
	}

	@Override
	public void setUse_userid(String use_userid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_use_userid = use_userid;
	}

	@JSON
	@Override
	public Date getUse_datetime() {
		return _use_datetime;
	}

	@Override
	public void setUse_datetime(Date use_datetime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_use_datetime = use_datetime;
	}

	@JSON
	@Override
	public long getNp2_grosprm() {
		return _np2_grosprm;
	}

	@Override
	public void setNp2_grosprm(long np2_grosprm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_grosprm = np2_grosprm;
	}

	@JSON
	@Override
	public long getNp2_ageprem() {
		return _np2_ageprem;
	}

	@Override
	public void setNp2_ageprem(long np2_ageprem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_ageprem = np2_ageprem;
	}

	@JSON
	@Override
	public Date getNp2_commendate() {
		return _np2_commendate;
	}

	@Override
	public void setNp2_commendate(Date np2_commendate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_commendate = np2_commendate;
	}

	@JSON
	@Override
	public long getNp2_sumatrisk() {
		return _np2_sumatrisk;
	}

	@Override
	public void setNp2_sumatrisk(long np2_sumatrisk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_sumatrisk = np2_sumatrisk;
	}

	@JSON
	@Override
	public String getNp2_substandar() {
		if (_np2_substandar == null) {
			return "";
		}
		else {
			return _np2_substandar;
		}
	}

	@Override
	public void setNp2_substandar(String np2_substandar) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_substandar = np2_substandar;
	}

	@JSON
	@Override
	public Date getNp2_effectdate() {
		return _np2_effectdate;
	}

	@Override
	public void setNp2_effectdate(Date np2_effectdate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_effectdate = np2_effectdate;
	}

	@JSON
	@Override
	public Date getNp2_expirydate() {
		return _np2_expirydate;
	}

	@Override
	public void setNp2_expirydate(Date np2_expirydate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_expirydate = np2_expirydate;
	}

	@JSON
	@Override
	public Date getNp2_endofprmdt() {
		return _np2_endofprmdt;
	}

	@Override
	public void setNp2_endofprmdt(Date np2_endofprmdt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_endofprmdt = np2_endofprmdt;
	}

	@JSON
	@Override
	public long getNp2_paidupamt() {
		return _np2_paidupamt;
	}

	@Override
	public void setNp2_paidupamt(long np2_paidupamt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_paidupamt = np2_paidupamt;
	}

	@JSON
	@Override
	public long getNp2_diffinprem() {
		return _np2_diffinprem;
	}

	@Override
	public void setNp2_diffinprem(long np2_diffinprem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_diffinprem = np2_diffinprem;
	}

	@JSON
	@Override
	public long getNp2_diffinfyco() {
		return _np2_diffinfyco;
	}

	@Override
	public void setNp2_diffinfyco(long np2_diffinfyco) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_diffinfyco = np2_diffinfyco;
	}

	@JSON
	@Override
	public long getNp2_charges() {
		return _np2_charges;
	}

	@Override
	public void setNp2_charges(long np2_charges) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_charges = np2_charges;
	}

	@JSON
	@Override
	public long getNp2_totload() {
		return _np2_totload;
	}

	@Override
	public void setNp2_totload(long np2_totload) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_totload = np2_totload;
	}

	@JSON
	@Override
	public Date getNp2_nextduedat() {
		return _np2_nextduedat;
	}

	@Override
	public void setNp2_nextduedat(Date np2_nextduedat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_nextduedat = np2_nextduedat;
	}

	@JSON
	@Override
	public long getNp2_ageadmitt() {
		return _np2_ageadmitt;
	}

	@Override
	public void setNp2_ageadmitt(long np2_ageadmitt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_ageadmitt = np2_ageadmitt;
	}

	@JSON
	@Override
	public long getNp2_optimaindex() {
		return _np2_optimaindex;
	}

	@Override
	public void setNp2_optimaindex(long np2_optimaindex) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_optimaindex = np2_optimaindex;
	}

	@JSON
	@Override
	public long getNp2_ageprem2nd() {
		return _np2_ageprem2nd;
	}

	@Override
	public void setNp2_ageprem2nd(long np2_ageprem2nd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_ageprem2nd = np2_ageprem2nd;
	}

	@JSON
	@Override
	public long getNp2_policyfees() {
		return _np2_policyfees;
	}

	@Override
	public void setNp2_policyfees(long np2_policyfees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_policyfees = np2_policyfees;
	}

	@JSON
	@Override
	public long getNp2_sar() {
		return _np2_sar;
	}

	@Override
	public void setNp2_sar(long np2_sar) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_sar = np2_sar;
	}

	@JSON
	@Override
	public long getNp2_totpremium() {
		return _np2_totpremium;
	}

	@Override
	public void setNp2_totpremium(long np2_totpremium) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_totpremium = np2_totpremium;
	}

	@JSON
	@Override
	public long getNp2_approved() {
		return _np2_approved;
	}

	@Override
	public void setNp2_approved(long np2_approved) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_approved = np2_approved;
	}

	@JSON
	@Override
	public String getNp2_endorsementno() {
		if (_np2_endorsementno == null) {
			return "";
		}
		else {
			return _np2_endorsementno;
		}
	}

	@Override
	public void setNp2_endorsementno(String np2_endorsementno) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_endorsementno = np2_endorsementno;
	}

	@JSON
	@Override
	public String getPfs_acntyear() {
		if (_pfs_acntyear == null) {
			return "";
		}
		else {
			return _pfs_acntyear;
		}
	}

	@Override
	public void setPfs_acntyear(String pfs_acntyear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pfs_acntyear = pfs_acntyear;
	}

	@JSON
	@Override
	public String getArq_requestype() {
		if (_arq_requestype == null) {
			return "";
		}
		else {
			return _arq_requestype;
		}
	}

	@Override
	public void setArq_requestype(String arq_requestype) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_arq_requestype = arq_requestype;
	}

	@JSON
	@Override
	public long getArq_requestno() {
		return _arq_requestno;
	}

	@Override
	public void setArq_requestno(long arq_requestno) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_arq_requestno = arq_requestno;
	}

	@JSON
	@Override
	public Date getNp2_forfeitdat() {
		return _np2_forfeitdat;
	}

	@Override
	public void setNp2_forfeitdat(Date np2_forfeitdat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_forfeitdat = np2_forfeitdat;
	}

	@JSON
	@Override
	public long getConvert() {
		return _convert;
	}

	@Override
	public void setConvert(long convert) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_convert = convert;
	}

	@JSON
	@Override
	public long getNp2_notionalage() {
		return _np2_notionalage;
	}

	@Override
	public void setNp2_notionalage(long np2_notionalage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_notionalage = np2_notionalage;
	}

	@JSON
	@Override
	public String getCop_occupaticd() {
		if (_cop_occupaticd == null) {
			return "";
		}
		else {
			return _cop_occupaticd;
		}
	}

	@Override
	public void setCop_occupaticd(String cop_occupaticd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cop_occupaticd = cop_occupaticd;
	}

	@JSON
	@Override
	public Date getNp2_dob() {
		return _np2_dob;
	}

	@Override
	public void setNp2_dob(Date np2_dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_dob = np2_dob;
	}

	@JSON
	@Override
	public String getNp2_accr_proc() {
		if (_np2_accr_proc == null) {
			return "";
		}
		else {
			return _np2_accr_proc;
		}
	}

	@Override
	public void setNp2_accr_proc(String np2_accr_proc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_accr_proc = np2_accr_proc;
	}

	@JSON
	@Override
	public long getNp2_effectiveage() {
		return _np2_effectiveage;
	}

	@Override
	public void setNp2_effectiveage(long np2_effectiveage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_effectiveage = np2_effectiveage;
	}

	@JSON
	@Override
	public String getNp2_nom2ndlife() {
		if (_np2_nom2ndlife == null) {
			return "";
		}
		else {
			return _np2_nom2ndlife;
		}
	}

	@Override
	public void setNp2_nom2ndlife(String np2_nom2ndlife) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_nom2ndlife = np2_nom2ndlife;
	}

	@JSON
	@Override
	public Date getNp2_dob_2nd() {
		return _np2_dob_2nd;
	}

	@Override
	public void setNp2_dob_2nd(Date np2_dob_2nd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_dob_2nd = np2_dob_2nd;
	}

	@JSON
	@Override
	public long getNp2_lastrevbonus() {
		return _np2_lastrevbonus;
	}

	@Override
	public void setNp2_lastrevbonus(long np2_lastrevbonus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_lastrevbonus = np2_lastrevbonus;
	}

	@JSON
	@Override
	public long getNp2_reversionary() {
		return _np2_reversionary;
	}

	@Override
	public void setNp2_reversionary(long np2_reversionary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_reversionary = np2_reversionary;
	}

	@JSON
	@Override
	public long getNp2_rider_bonus() {
		return _np2_rider_bonus;
	}

	@Override
	public void setNp2_rider_bonus(long np2_rider_bonus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_rider_bonus = np2_rider_bonus;
	}

	@JSON
	@Override
	public long getNp2_last_rider_bonus() {
		return _np2_last_rider_bonus;
	}

	@Override
	public void setNp2_last_rider_bonus(long np2_last_rider_bonus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_last_rider_bonus = np2_last_rider_bonus;
	}

	@JSON
	@Override
	public long getNp2_ageprem_actual() {
		return _np2_ageprem_actual;
	}

	@Override
	public void setNp2_ageprem_actual(long np2_ageprem_actual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_ageprem_actual = np2_ageprem_actual;
	}

	@JSON
	@Override
	public long getNp2_ageprem2nd_actual() {
		return _np2_ageprem2nd_actual;
	}

	@Override
	public void setNp2_ageprem2nd_actual(long np2_ageprem2nd_actual) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_np2_ageprem2nd_actual = np2_ageprem2nd_actual;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public LNP2_PolicyMastr toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LNP2_PolicyMastr>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LNP2_PolicyMastrImpl lnp2_PolicyMastrImpl = new LNP2_PolicyMastrImpl();

		lnp2_PolicyMastrImpl.setNp1_proposal(getNp1_proposal());
		lnp2_PolicyMastrImpl.setNp2_setno(getNp2_setno());
		lnp2_PolicyMastrImpl.setCfr_forfeitucd(getCfr_forfeitucd());
		lnp2_PolicyMastrImpl.setCmo_mode(getCmo_mode());
		lnp2_PolicyMastrImpl.setPcu_currcode(getPcu_currcode());
		lnp2_PolicyMastrImpl.setAag_agcode(getAag_agcode());
		lnp2_PolicyMastrImpl.setCcl_categorycd(getCcl_categorycd());
		lnp2_PolicyMastrImpl.setUse_userid(getUse_userid());
		lnp2_PolicyMastrImpl.setUse_datetime(getUse_datetime());
		lnp2_PolicyMastrImpl.setNp2_grosprm(getNp2_grosprm());
		lnp2_PolicyMastrImpl.setNp2_ageprem(getNp2_ageprem());
		lnp2_PolicyMastrImpl.setNp2_commendate(getNp2_commendate());
		lnp2_PolicyMastrImpl.setNp2_sumatrisk(getNp2_sumatrisk());
		lnp2_PolicyMastrImpl.setNp2_substandar(getNp2_substandar());
		lnp2_PolicyMastrImpl.setNp2_effectdate(getNp2_effectdate());
		lnp2_PolicyMastrImpl.setNp2_expirydate(getNp2_expirydate());
		lnp2_PolicyMastrImpl.setNp2_endofprmdt(getNp2_endofprmdt());
		lnp2_PolicyMastrImpl.setNp2_paidupamt(getNp2_paidupamt());
		lnp2_PolicyMastrImpl.setNp2_diffinprem(getNp2_diffinprem());
		lnp2_PolicyMastrImpl.setNp2_diffinfyco(getNp2_diffinfyco());
		lnp2_PolicyMastrImpl.setNp2_charges(getNp2_charges());
		lnp2_PolicyMastrImpl.setNp2_totload(getNp2_totload());
		lnp2_PolicyMastrImpl.setNp2_nextduedat(getNp2_nextduedat());
		lnp2_PolicyMastrImpl.setNp2_ageadmitt(getNp2_ageadmitt());
		lnp2_PolicyMastrImpl.setNp2_optimaindex(getNp2_optimaindex());
		lnp2_PolicyMastrImpl.setNp2_ageprem2nd(getNp2_ageprem2nd());
		lnp2_PolicyMastrImpl.setNp2_policyfees(getNp2_policyfees());
		lnp2_PolicyMastrImpl.setNp2_sar(getNp2_sar());
		lnp2_PolicyMastrImpl.setNp2_totpremium(getNp2_totpremium());
		lnp2_PolicyMastrImpl.setNp2_approved(getNp2_approved());
		lnp2_PolicyMastrImpl.setNp2_endorsementno(getNp2_endorsementno());
		lnp2_PolicyMastrImpl.setPfs_acntyear(getPfs_acntyear());
		lnp2_PolicyMastrImpl.setArq_requestype(getArq_requestype());
		lnp2_PolicyMastrImpl.setArq_requestno(getArq_requestno());
		lnp2_PolicyMastrImpl.setNp2_forfeitdat(getNp2_forfeitdat());
		lnp2_PolicyMastrImpl.setConvert(getConvert());
		lnp2_PolicyMastrImpl.setNp2_notionalage(getNp2_notionalage());
		lnp2_PolicyMastrImpl.setCop_occupaticd(getCop_occupaticd());
		lnp2_PolicyMastrImpl.setNp2_dob(getNp2_dob());
		lnp2_PolicyMastrImpl.setNp2_accr_proc(getNp2_accr_proc());
		lnp2_PolicyMastrImpl.setNp2_effectiveage(getNp2_effectiveage());
		lnp2_PolicyMastrImpl.setNp2_nom2ndlife(getNp2_nom2ndlife());
		lnp2_PolicyMastrImpl.setNp2_dob_2nd(getNp2_dob_2nd());
		lnp2_PolicyMastrImpl.setNp2_lastrevbonus(getNp2_lastrevbonus());
		lnp2_PolicyMastrImpl.setNp2_reversionary(getNp2_reversionary());
		lnp2_PolicyMastrImpl.setNp2_rider_bonus(getNp2_rider_bonus());
		lnp2_PolicyMastrImpl.setNp2_last_rider_bonus(getNp2_last_rider_bonus());
		lnp2_PolicyMastrImpl.setNp2_ageprem_actual(getNp2_ageprem_actual());
		lnp2_PolicyMastrImpl.setNp2_ageprem2nd_actual(
			getNp2_ageprem2nd_actual());

		lnp2_PolicyMastrImpl.resetOriginalValues();

		return lnp2_PolicyMastrImpl;
	}

	@Override
	public int compareTo(LNP2_PolicyMastr lnp2_PolicyMastr) {
		String primaryKey = lnp2_PolicyMastr.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LNP2_PolicyMastr)) {
			return false;
		}

		LNP2_PolicyMastr lnp2_PolicyMastr = (LNP2_PolicyMastr)object;

		String primaryKey = lnp2_PolicyMastr.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LNP2_PolicyMastr> toCacheModel() {
		LNP2_PolicyMastrCacheModel lnp2_PolicyMastrCacheModel =
			new LNP2_PolicyMastrCacheModel();

		lnp2_PolicyMastrCacheModel.np1_proposal = getNp1_proposal();

		String np1_proposal = lnp2_PolicyMastrCacheModel.np1_proposal;

		if ((np1_proposal != null) && (np1_proposal.length() == 0)) {
			lnp2_PolicyMastrCacheModel.np1_proposal = null;
		}

		lnp2_PolicyMastrCacheModel.np2_setno = getNp2_setno();

		String np2_setno = lnp2_PolicyMastrCacheModel.np2_setno;

		if ((np2_setno != null) && (np2_setno.length() == 0)) {
			lnp2_PolicyMastrCacheModel.np2_setno = null;
		}

		lnp2_PolicyMastrCacheModel.cfr_forfeitucd = getCfr_forfeitucd();

		String cfr_forfeitucd = lnp2_PolicyMastrCacheModel.cfr_forfeitucd;

		if ((cfr_forfeitucd != null) && (cfr_forfeitucd.length() == 0)) {
			lnp2_PolicyMastrCacheModel.cfr_forfeitucd = null;
		}

		lnp2_PolicyMastrCacheModel.cmo_mode = getCmo_mode();

		String cmo_mode = lnp2_PolicyMastrCacheModel.cmo_mode;

		if ((cmo_mode != null) && (cmo_mode.length() == 0)) {
			lnp2_PolicyMastrCacheModel.cmo_mode = null;
		}

		lnp2_PolicyMastrCacheModel.pcu_currcode = getPcu_currcode();

		String pcu_currcode = lnp2_PolicyMastrCacheModel.pcu_currcode;

		if ((pcu_currcode != null) && (pcu_currcode.length() == 0)) {
			lnp2_PolicyMastrCacheModel.pcu_currcode = null;
		}

		lnp2_PolicyMastrCacheModel.aag_agcode = getAag_agcode();

		lnp2_PolicyMastrCacheModel.ccl_categorycd = getCcl_categorycd();

		String ccl_categorycd = lnp2_PolicyMastrCacheModel.ccl_categorycd;

		if ((ccl_categorycd != null) && (ccl_categorycd.length() == 0)) {
			lnp2_PolicyMastrCacheModel.ccl_categorycd = null;
		}

		lnp2_PolicyMastrCacheModel.use_userid = getUse_userid();

		String use_userid = lnp2_PolicyMastrCacheModel.use_userid;

		if ((use_userid != null) && (use_userid.length() == 0)) {
			lnp2_PolicyMastrCacheModel.use_userid = null;
		}

		Date use_datetime = getUse_datetime();

		if (use_datetime != null) {
			lnp2_PolicyMastrCacheModel.use_datetime = use_datetime.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.use_datetime = Long.MIN_VALUE;
		}

		lnp2_PolicyMastrCacheModel.np2_grosprm = getNp2_grosprm();

		lnp2_PolicyMastrCacheModel.np2_ageprem = getNp2_ageprem();

		Date np2_commendate = getNp2_commendate();

		if (np2_commendate != null) {
			lnp2_PolicyMastrCacheModel.np2_commendate =
				np2_commendate.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_commendate = Long.MIN_VALUE;
		}

		lnp2_PolicyMastrCacheModel.np2_sumatrisk = getNp2_sumatrisk();

		lnp2_PolicyMastrCacheModel.np2_substandar = getNp2_substandar();

		String np2_substandar = lnp2_PolicyMastrCacheModel.np2_substandar;

		if ((np2_substandar != null) && (np2_substandar.length() == 0)) {
			lnp2_PolicyMastrCacheModel.np2_substandar = null;
		}

		Date np2_effectdate = getNp2_effectdate();

		if (np2_effectdate != null) {
			lnp2_PolicyMastrCacheModel.np2_effectdate =
				np2_effectdate.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_effectdate = Long.MIN_VALUE;
		}

		Date np2_expirydate = getNp2_expirydate();

		if (np2_expirydate != null) {
			lnp2_PolicyMastrCacheModel.np2_expirydate =
				np2_expirydate.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_expirydate = Long.MIN_VALUE;
		}

		Date np2_endofprmdt = getNp2_endofprmdt();

		if (np2_endofprmdt != null) {
			lnp2_PolicyMastrCacheModel.np2_endofprmdt =
				np2_endofprmdt.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_endofprmdt = Long.MIN_VALUE;
		}

		lnp2_PolicyMastrCacheModel.np2_paidupamt = getNp2_paidupamt();

		lnp2_PolicyMastrCacheModel.np2_diffinprem = getNp2_diffinprem();

		lnp2_PolicyMastrCacheModel.np2_diffinfyco = getNp2_diffinfyco();

		lnp2_PolicyMastrCacheModel.np2_charges = getNp2_charges();

		lnp2_PolicyMastrCacheModel.np2_totload = getNp2_totload();

		Date np2_nextduedat = getNp2_nextduedat();

		if (np2_nextduedat != null) {
			lnp2_PolicyMastrCacheModel.np2_nextduedat =
				np2_nextduedat.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_nextduedat = Long.MIN_VALUE;
		}

		lnp2_PolicyMastrCacheModel.np2_ageadmitt = getNp2_ageadmitt();

		lnp2_PolicyMastrCacheModel.np2_optimaindex = getNp2_optimaindex();

		lnp2_PolicyMastrCacheModel.np2_ageprem2nd = getNp2_ageprem2nd();

		lnp2_PolicyMastrCacheModel.np2_policyfees = getNp2_policyfees();

		lnp2_PolicyMastrCacheModel.np2_sar = getNp2_sar();

		lnp2_PolicyMastrCacheModel.np2_totpremium = getNp2_totpremium();

		lnp2_PolicyMastrCacheModel.np2_approved = getNp2_approved();

		lnp2_PolicyMastrCacheModel.np2_endorsementno = getNp2_endorsementno();

		String np2_endorsementno = lnp2_PolicyMastrCacheModel.np2_endorsementno;

		if ((np2_endorsementno != null) && (np2_endorsementno.length() == 0)) {
			lnp2_PolicyMastrCacheModel.np2_endorsementno = null;
		}

		lnp2_PolicyMastrCacheModel.pfs_acntyear = getPfs_acntyear();

		String pfs_acntyear = lnp2_PolicyMastrCacheModel.pfs_acntyear;

		if ((pfs_acntyear != null) && (pfs_acntyear.length() == 0)) {
			lnp2_PolicyMastrCacheModel.pfs_acntyear = null;
		}

		lnp2_PolicyMastrCacheModel.arq_requestype = getArq_requestype();

		String arq_requestype = lnp2_PolicyMastrCacheModel.arq_requestype;

		if ((arq_requestype != null) && (arq_requestype.length() == 0)) {
			lnp2_PolicyMastrCacheModel.arq_requestype = null;
		}

		lnp2_PolicyMastrCacheModel.arq_requestno = getArq_requestno();

		Date np2_forfeitdat = getNp2_forfeitdat();

		if (np2_forfeitdat != null) {
			lnp2_PolicyMastrCacheModel.np2_forfeitdat =
				np2_forfeitdat.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_forfeitdat = Long.MIN_VALUE;
		}

		lnp2_PolicyMastrCacheModel.convert = getConvert();

		lnp2_PolicyMastrCacheModel.np2_notionalage = getNp2_notionalage();

		lnp2_PolicyMastrCacheModel.cop_occupaticd = getCop_occupaticd();

		String cop_occupaticd = lnp2_PolicyMastrCacheModel.cop_occupaticd;

		if ((cop_occupaticd != null) && (cop_occupaticd.length() == 0)) {
			lnp2_PolicyMastrCacheModel.cop_occupaticd = null;
		}

		Date np2_dob = getNp2_dob();

		if (np2_dob != null) {
			lnp2_PolicyMastrCacheModel.np2_dob = np2_dob.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_dob = Long.MIN_VALUE;
		}

		lnp2_PolicyMastrCacheModel.np2_accr_proc = getNp2_accr_proc();

		String np2_accr_proc = lnp2_PolicyMastrCacheModel.np2_accr_proc;

		if ((np2_accr_proc != null) && (np2_accr_proc.length() == 0)) {
			lnp2_PolicyMastrCacheModel.np2_accr_proc = null;
		}

		lnp2_PolicyMastrCacheModel.np2_effectiveage = getNp2_effectiveage();

		lnp2_PolicyMastrCacheModel.np2_nom2ndlife = getNp2_nom2ndlife();

		String np2_nom2ndlife = lnp2_PolicyMastrCacheModel.np2_nom2ndlife;

		if ((np2_nom2ndlife != null) && (np2_nom2ndlife.length() == 0)) {
			lnp2_PolicyMastrCacheModel.np2_nom2ndlife = null;
		}

		Date np2_dob_2nd = getNp2_dob_2nd();

		if (np2_dob_2nd != null) {
			lnp2_PolicyMastrCacheModel.np2_dob_2nd = np2_dob_2nd.getTime();
		}
		else {
			lnp2_PolicyMastrCacheModel.np2_dob_2nd = Long.MIN_VALUE;
		}

		lnp2_PolicyMastrCacheModel.np2_lastrevbonus = getNp2_lastrevbonus();

		lnp2_PolicyMastrCacheModel.np2_reversionary = getNp2_reversionary();

		lnp2_PolicyMastrCacheModel.np2_rider_bonus = getNp2_rider_bonus();

		lnp2_PolicyMastrCacheModel.np2_last_rider_bonus =
			getNp2_last_rider_bonus();

		lnp2_PolicyMastrCacheModel.np2_ageprem_actual = getNp2_ageprem_actual();

		lnp2_PolicyMastrCacheModel.np2_ageprem2nd_actual =
			getNp2_ageprem2nd_actual();

		return lnp2_PolicyMastrCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LNP2_PolicyMastr, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LNP2_PolicyMastr, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LNP2_PolicyMastr, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LNP2_PolicyMastr)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LNP2_PolicyMastr, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LNP2_PolicyMastr, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LNP2_PolicyMastr, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LNP2_PolicyMastr)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LNP2_PolicyMastr>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _np1_proposal;
	private String _np2_setno;
	private String _cfr_forfeitucd;
	private String _cmo_mode;
	private String _pcu_currcode;
	private long _aag_agcode;
	private String _ccl_categorycd;
	private String _use_userid;
	private Date _use_datetime;
	private long _np2_grosprm;
	private long _np2_ageprem;
	private Date _np2_commendate;
	private long _np2_sumatrisk;
	private String _np2_substandar;
	private Date _np2_effectdate;
	private Date _np2_expirydate;
	private Date _np2_endofprmdt;
	private long _np2_paidupamt;
	private long _np2_diffinprem;
	private long _np2_diffinfyco;
	private long _np2_charges;
	private long _np2_totload;
	private Date _np2_nextduedat;
	private long _np2_ageadmitt;
	private long _np2_optimaindex;
	private long _np2_ageprem2nd;
	private long _np2_policyfees;
	private long _np2_sar;
	private long _np2_totpremium;
	private long _np2_approved;
	private String _np2_endorsementno;
	private String _pfs_acntyear;
	private String _arq_requestype;
	private long _arq_requestno;
	private Date _np2_forfeitdat;
	private long _convert;
	private long _np2_notionalage;
	private String _cop_occupaticd;
	private Date _np2_dob;
	private String _np2_accr_proc;
	private long _np2_effectiveage;
	private String _np2_nom2ndlife;
	private Date _np2_dob_2nd;
	private long _np2_lastrevbonus;
	private long _np2_reversionary;
	private long _np2_rider_bonus;
	private long _np2_last_rider_bonus;
	private long _np2_ageprem_actual;
	private long _np2_ageprem2nd_actual;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<LNP2_PolicyMastr, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LNP2_PolicyMastr)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("NP1_PROPOSAL", _np1_proposal);
		_columnOriginalValues.put("NP2_SETNO", _np2_setno);
		_columnOriginalValues.put("CFR_FORFEITUCD", _cfr_forfeitucd);
		_columnOriginalValues.put("CMO_MODE", _cmo_mode);
		_columnOriginalValues.put("PCU_CURRCODE", _pcu_currcode);
		_columnOriginalValues.put("AAG_AGCODE", _aag_agcode);
		_columnOriginalValues.put("CCL_CATEGORYCD", _ccl_categorycd);
		_columnOriginalValues.put("USE_USERID", _use_userid);
		_columnOriginalValues.put("USE_DATETIME", _use_datetime);
		_columnOriginalValues.put("NP2_GROSPRM", _np2_grosprm);
		_columnOriginalValues.put("NP2_AGEPREM", _np2_ageprem);
		_columnOriginalValues.put("NP2_COMMENDATE", _np2_commendate);
		_columnOriginalValues.put("NP2_SUMATRISK", _np2_sumatrisk);
		_columnOriginalValues.put("NP2_SUBSTANDAR", _np2_substandar);
		_columnOriginalValues.put("NP2_EFFECTDATE", _np2_effectdate);
		_columnOriginalValues.put("NP2_EXPIRYDATE", _np2_expirydate);
		_columnOriginalValues.put("NP2_ENDOFPRMDT", _np2_endofprmdt);
		_columnOriginalValues.put("NP2_PAIDUPAMT", _np2_paidupamt);
		_columnOriginalValues.put("NP2_DIFFINPREM", _np2_diffinprem);
		_columnOriginalValues.put("NP2_DIFFINFYCO", _np2_diffinfyco);
		_columnOriginalValues.put("NP2_CHARGES", _np2_charges);
		_columnOriginalValues.put("NP2_TOTLOAD", _np2_totload);
		_columnOriginalValues.put("NP2_NEXTDUEDAT", _np2_nextduedat);
		_columnOriginalValues.put("NP2_AGEADMITT", _np2_ageadmitt);
		_columnOriginalValues.put("NP2_OPTIMAINDEX", _np2_optimaindex);
		_columnOriginalValues.put("NP2_AGEPREM2ND", _np2_ageprem2nd);
		_columnOriginalValues.put("NP2_POLICYFEES", _np2_policyfees);
		_columnOriginalValues.put("NP2_SAR", _np2_sar);
		_columnOriginalValues.put("NP2_TOTPREMIUM", _np2_totpremium);
		_columnOriginalValues.put("NP2_APPROVED", _np2_approved);
		_columnOriginalValues.put("NP2_ENDORSEMENTNO", _np2_endorsementno);
		_columnOriginalValues.put("PFS_ACNTYEAR", _pfs_acntyear);
		_columnOriginalValues.put("ARQ_REQUESTYPE", _arq_requestype);
		_columnOriginalValues.put("ARQ_REQUESTNO", _arq_requestno);
		_columnOriginalValues.put("NP2_FORFEITDAT", _np2_forfeitdat);
		_columnOriginalValues.put("CONVERT", _convert);
		_columnOriginalValues.put("NP2_NOTIONALAGE", _np2_notionalage);
		_columnOriginalValues.put("COP_OCCUPATICD", _cop_occupaticd);
		_columnOriginalValues.put("NP2_DOB", _np2_dob);
		_columnOriginalValues.put("NP2_ACCR_PROC", _np2_accr_proc);
		_columnOriginalValues.put("NP2_EFFECTIVEAGE", _np2_effectiveage);
		_columnOriginalValues.put("NP2_NOM2NDLIFE", _np2_nom2ndlife);
		_columnOriginalValues.put("NP2_DOB_2ND", _np2_dob_2nd);
		_columnOriginalValues.put("NP2_LASTREVBONUS", _np2_lastrevbonus);
		_columnOriginalValues.put("NP2_REVERSIONARY", _np2_reversionary);
		_columnOriginalValues.put("NP2_RIDER_BONUS", _np2_rider_bonus);
		_columnOriginalValues.put(
			"NP2_LAST_RIDER_BONUS", _np2_last_rider_bonus);
		_columnOriginalValues.put("NP2_AGEPREM_ACTUAL", _np2_ageprem_actual);
		_columnOriginalValues.put(
			"NP2_AGEPREM2ND_ACTUAL", _np2_ageprem2nd_actual);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("NP1_PROPOSAL", "np1_proposal");
		attributeNames.put("NP2_SETNO", "np2_setno");
		attributeNames.put("CFR_FORFEITUCD", "cfr_forfeitucd");
		attributeNames.put("CMO_MODE", "cmo_mode");
		attributeNames.put("PCU_CURRCODE", "pcu_currcode");
		attributeNames.put("AAG_AGCODE", "aag_agcode");
		attributeNames.put("CCL_CATEGORYCD", "ccl_categorycd");
		attributeNames.put("USE_USERID", "use_userid");
		attributeNames.put("USE_DATETIME", "use_datetime");
		attributeNames.put("NP2_GROSPRM", "np2_grosprm");
		attributeNames.put("NP2_AGEPREM", "np2_ageprem");
		attributeNames.put("NP2_COMMENDATE", "np2_commendate");
		attributeNames.put("NP2_SUMATRISK", "np2_sumatrisk");
		attributeNames.put("NP2_SUBSTANDAR", "np2_substandar");
		attributeNames.put("NP2_EFFECTDATE", "np2_effectdate");
		attributeNames.put("NP2_EXPIRYDATE", "np2_expirydate");
		attributeNames.put("NP2_ENDOFPRMDT", "np2_endofprmdt");
		attributeNames.put("NP2_PAIDUPAMT", "np2_paidupamt");
		attributeNames.put("NP2_DIFFINPREM", "np2_diffinprem");
		attributeNames.put("NP2_DIFFINFYCO", "np2_diffinfyco");
		attributeNames.put("NP2_CHARGES", "np2_charges");
		attributeNames.put("NP2_TOTLOAD", "np2_totload");
		attributeNames.put("NP2_NEXTDUEDAT", "np2_nextduedat");
		attributeNames.put("NP2_AGEADMITT", "np2_ageadmitt");
		attributeNames.put("NP2_OPTIMAINDEX", "np2_optimaindex");
		attributeNames.put("NP2_AGEPREM2ND", "np2_ageprem2nd");
		attributeNames.put("NP2_POLICYFEES", "np2_policyfees");
		attributeNames.put("NP2_SAR", "np2_sar");
		attributeNames.put("NP2_TOTPREMIUM", "np2_totpremium");
		attributeNames.put("NP2_APPROVED", "np2_approved");
		attributeNames.put("NP2_ENDORSEMENTNO", "np2_endorsementno");
		attributeNames.put("PFS_ACNTYEAR", "pfs_acntyear");
		attributeNames.put("ARQ_REQUESTYPE", "arq_requestype");
		attributeNames.put("ARQ_REQUESTNO", "arq_requestno");
		attributeNames.put("NP2_FORFEITDAT", "np2_forfeitdat");
		attributeNames.put("CONVERT", "convert");
		attributeNames.put("NP2_NOTIONALAGE", "np2_notionalage");
		attributeNames.put("COP_OCCUPATICD", "cop_occupaticd");
		attributeNames.put("NP2_DOB", "np2_dob");
		attributeNames.put("NP2_ACCR_PROC", "np2_accr_proc");
		attributeNames.put("NP2_EFFECTIVEAGE", "np2_effectiveage");
		attributeNames.put("NP2_NOM2NDLIFE", "np2_nom2ndlife");
		attributeNames.put("NP2_DOB_2ND", "np2_dob_2nd");
		attributeNames.put("NP2_LASTREVBONUS", "np2_lastrevbonus");
		attributeNames.put("NP2_REVERSIONARY", "np2_reversionary");
		attributeNames.put("NP2_RIDER_BONUS", "np2_rider_bonus");
		attributeNames.put("NP2_LAST_RIDER_BONUS", "np2_last_rider_bonus");
		attributeNames.put("NP2_AGEPREM_ACTUAL", "np2_ageprem_actual");
		attributeNames.put("NP2_AGEPREM2ND_ACTUAL", "np2_ageprem2nd_actual");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("NP1_PROPOSAL", 1L);

		columnBitmasks.put("NP2_SETNO", 2L);

		columnBitmasks.put("CFR_FORFEITUCD", 4L);

		columnBitmasks.put("CMO_MODE", 8L);

		columnBitmasks.put("PCU_CURRCODE", 16L);

		columnBitmasks.put("AAG_AGCODE", 32L);

		columnBitmasks.put("CCL_CATEGORYCD", 64L);

		columnBitmasks.put("USE_USERID", 128L);

		columnBitmasks.put("USE_DATETIME", 256L);

		columnBitmasks.put("NP2_GROSPRM", 512L);

		columnBitmasks.put("NP2_AGEPREM", 1024L);

		columnBitmasks.put("NP2_COMMENDATE", 2048L);

		columnBitmasks.put("NP2_SUMATRISK", 4096L);

		columnBitmasks.put("NP2_SUBSTANDAR", 8192L);

		columnBitmasks.put("NP2_EFFECTDATE", 16384L);

		columnBitmasks.put("NP2_EXPIRYDATE", 32768L);

		columnBitmasks.put("NP2_ENDOFPRMDT", 65536L);

		columnBitmasks.put("NP2_PAIDUPAMT", 131072L);

		columnBitmasks.put("NP2_DIFFINPREM", 262144L);

		columnBitmasks.put("NP2_DIFFINFYCO", 524288L);

		columnBitmasks.put("NP2_CHARGES", 1048576L);

		columnBitmasks.put("NP2_TOTLOAD", 2097152L);

		columnBitmasks.put("NP2_NEXTDUEDAT", 4194304L);

		columnBitmasks.put("NP2_AGEADMITT", 8388608L);

		columnBitmasks.put("NP2_OPTIMAINDEX", 16777216L);

		columnBitmasks.put("NP2_AGEPREM2ND", 33554432L);

		columnBitmasks.put("NP2_POLICYFEES", 67108864L);

		columnBitmasks.put("NP2_SAR", 134217728L);

		columnBitmasks.put("NP2_TOTPREMIUM", 268435456L);

		columnBitmasks.put("NP2_APPROVED", 536870912L);

		columnBitmasks.put("NP2_ENDORSEMENTNO", 1073741824L);

		columnBitmasks.put("PFS_ACNTYEAR", 2147483648L);

		columnBitmasks.put("ARQ_REQUESTYPE", 4294967296L);

		columnBitmasks.put("ARQ_REQUESTNO", 8589934592L);

		columnBitmasks.put("NP2_FORFEITDAT", 17179869184L);

		columnBitmasks.put("CONVERT", 34359738368L);

		columnBitmasks.put("NP2_NOTIONALAGE", 68719476736L);

		columnBitmasks.put("COP_OCCUPATICD", 137438953472L);

		columnBitmasks.put("NP2_DOB", 274877906944L);

		columnBitmasks.put("NP2_ACCR_PROC", 549755813888L);

		columnBitmasks.put("NP2_EFFECTIVEAGE", 1099511627776L);

		columnBitmasks.put("NP2_NOM2NDLIFE", 2199023255552L);

		columnBitmasks.put("NP2_DOB_2ND", 4398046511104L);

		columnBitmasks.put("NP2_LASTREVBONUS", 8796093022208L);

		columnBitmasks.put("NP2_REVERSIONARY", 17592186044416L);

		columnBitmasks.put("NP2_RIDER_BONUS", 35184372088832L);

		columnBitmasks.put("NP2_LAST_RIDER_BONUS", 70368744177664L);

		columnBitmasks.put("NP2_AGEPREM_ACTUAL", 140737488355328L);

		columnBitmasks.put("NP2_AGEPREM2ND_ACTUAL", 281474976710656L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LNP2_PolicyMastr _escapedModel;

}