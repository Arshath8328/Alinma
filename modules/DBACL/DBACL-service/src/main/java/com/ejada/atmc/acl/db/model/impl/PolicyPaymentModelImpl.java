/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.PolicyPayment;
import com.ejada.atmc.acl.db.model.PolicyPaymentModel;
import com.ejada.atmc.acl.db.model.PolicyPaymentSoap;
import com.ejada.atmc.acl.db.service.persistence.PolicyPaymentPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PolicyPayment service. Represents a row in the &quot;ODS_POLICY_PAYMENT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PolicyPaymentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyPaymentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PolicyPaymentImpl
 * @generated
 */
@JSON(strict = true)
public class PolicyPaymentModelImpl
	extends BaseModelImpl<PolicyPayment> implements PolicyPaymentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy payment model instance should use the <code>PolicyPayment</code> interface instead.
	 */
	public static final String TABLE_NAME = "ODS_POLICY_PAYMENT";

	public static final Object[][] TABLE_COLUMNS = {
		{"ODS_POLICY_NO", Types.VARCHAR}, {"ODS_VOUCHER_NO", Types.VARCHAR},
		{"ODS_ENDT_NO", Types.VARCHAR}, {"ODS_CLAIM_NO", Types.VARCHAR},
		{"ODS_DUE_DT", Types.TIMESTAMP}, {"ODS_DOC_DT", Types.TIMESTAMP},
		{"ODS_AMOUNT", Types.DOUBLE}, {"ODS_REFERENCE", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ODS_POLICY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_VOUCHER_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_ENDT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_CLAIM_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_DUE_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_DOC_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ODS_REFERENCE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ODS_POLICY_PAYMENT (ODS_POLICY_NO VARCHAR(75) not null,ODS_VOUCHER_NO VARCHAR(75) not null,ODS_ENDT_NO VARCHAR(75) null,ODS_CLAIM_NO VARCHAR(75) null,ODS_DUE_DT DATE null,ODS_DOC_DT DATE null,ODS_AMOUNT DOUBLE,ODS_REFERENCE VARCHAR(75) null,primary key (ODS_POLICY_NO, ODS_VOUCHER_NO))";

	public static final String TABLE_SQL_DROP = "drop table ODS_POLICY_PAYMENT";

	public static final String ORDER_BY_JPQL =
		" ORDER BY policyPayment.id.policyNo ASC, policyPayment.id.voucherNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ODS_POLICY_PAYMENT.ODS_POLICY_NO ASC, ODS_POLICY_PAYMENT.ODS_VOUCHER_NO ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long VOUCHERNO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static PolicyPayment toModel(PolicyPaymentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PolicyPayment model = new PolicyPaymentImpl();

		model.setPolicyNo(soapModel.getPolicyNo());
		model.setVoucherNo(soapModel.getVoucherNo());
		model.setEndtNo(soapModel.getEndtNo());
		model.setClaimNo(soapModel.getClaimNo());
		model.setDueDate(soapModel.getDueDate());
		model.setDocDate(soapModel.getDocDate());
		model.setAmount(soapModel.getAmount());
		model.setReference(soapModel.getReference());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<PolicyPayment> toModels(PolicyPaymentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PolicyPayment> models = new ArrayList<PolicyPayment>(
			soapModels.length);

		for (PolicyPaymentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PolicyPaymentModelImpl() {
	}

	@Override
	public PolicyPaymentPK getPrimaryKey() {
		return new PolicyPaymentPK(_policyNo, _voucherNo);
	}

	@Override
	public void setPrimaryKey(PolicyPaymentPK primaryKey) {
		setPolicyNo(primaryKey.policyNo);
		setVoucherNo(primaryKey.voucherNo);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new PolicyPaymentPK(_policyNo, _voucherNo);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((PolicyPaymentPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PolicyPayment.class;
	}

	@Override
	public String getModelClassName() {
		return PolicyPayment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PolicyPayment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PolicyPayment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyPayment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PolicyPayment)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PolicyPayment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PolicyPayment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PolicyPayment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PolicyPayment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PolicyPayment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PolicyPayment>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PolicyPayment.class.getClassLoader(), PolicyPayment.class,
			ModelWrapper.class);

		try {
			Constructor<PolicyPayment> constructor =
				(Constructor<PolicyPayment>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PolicyPayment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PolicyPayment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PolicyPayment, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PolicyPayment, Object>>();
		Map<String, BiConsumer<PolicyPayment, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PolicyPayment, ?>>();

		attributeGetterFunctions.put("policyNo", PolicyPayment::getPolicyNo);
		attributeSetterBiConsumers.put(
			"policyNo",
			(BiConsumer<PolicyPayment, String>)PolicyPayment::setPolicyNo);
		attributeGetterFunctions.put("voucherNo", PolicyPayment::getVoucherNo);
		attributeSetterBiConsumers.put(
			"voucherNo",
			(BiConsumer<PolicyPayment, String>)PolicyPayment::setVoucherNo);
		attributeGetterFunctions.put("endtNo", PolicyPayment::getEndtNo);
		attributeSetterBiConsumers.put(
			"endtNo",
			(BiConsumer<PolicyPayment, String>)PolicyPayment::setEndtNo);
		attributeGetterFunctions.put("claimNo", PolicyPayment::getClaimNo);
		attributeSetterBiConsumers.put(
			"claimNo",
			(BiConsumer<PolicyPayment, String>)PolicyPayment::setClaimNo);
		attributeGetterFunctions.put("dueDate", PolicyPayment::getDueDate);
		attributeSetterBiConsumers.put(
			"dueDate",
			(BiConsumer<PolicyPayment, Date>)PolicyPayment::setDueDate);
		attributeGetterFunctions.put("docDate", PolicyPayment::getDocDate);
		attributeSetterBiConsumers.put(
			"docDate",
			(BiConsumer<PolicyPayment, Date>)PolicyPayment::setDocDate);
		attributeGetterFunctions.put("amount", PolicyPayment::getAmount);
		attributeSetterBiConsumers.put(
			"amount",
			(BiConsumer<PolicyPayment, Double>)PolicyPayment::setAmount);
		attributeGetterFunctions.put("reference", PolicyPayment::getReference);
		attributeSetterBiConsumers.put(
			"reference",
			(BiConsumer<PolicyPayment, String>)PolicyPayment::setReference);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getPolicyNo() {
		if (_policyNo == null) {
			return "";
		}
		else {
			return _policyNo;
		}
	}

	@Override
	public void setPolicyNo(String policyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNo = policyNo;
	}

	@JSON
	@Override
	public String getVoucherNo() {
		if (_voucherNo == null) {
			return "";
		}
		else {
			return _voucherNo;
		}
	}

	@Override
	public void setVoucherNo(String voucherNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_voucherNo = voucherNo;
	}

	@JSON
	@Override
	public String getEndtNo() {
		if (_endtNo == null) {
			return "";
		}
		else {
			return _endtNo;
		}
	}

	@Override
	public void setEndtNo(String endtNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endtNo = endtNo;
	}

	@JSON
	@Override
	public String getClaimNo() {
		if (_claimNo == null) {
			return "";
		}
		else {
			return _claimNo;
		}
	}

	@Override
	public void setClaimNo(String claimNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimNo = claimNo;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDate = dueDate;
	}

	@JSON
	@Override
	public Date getDocDate() {
		return _docDate;
	}

	@Override
	public void setDocDate(Date docDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docDate = docDate;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amount = amount;
	}

	@JSON
	@Override
	public String getReference() {
		if (_reference == null) {
			return "";
		}
		else {
			return _reference;
		}
	}

	@Override
	public void setReference(String reference) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reference = reference;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public PolicyPayment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PolicyPayment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyPaymentImpl policyPaymentImpl = new PolicyPaymentImpl();

		policyPaymentImpl.setPolicyNo(getPolicyNo());
		policyPaymentImpl.setVoucherNo(getVoucherNo());
		policyPaymentImpl.setEndtNo(getEndtNo());
		policyPaymentImpl.setClaimNo(getClaimNo());
		policyPaymentImpl.setDueDate(getDueDate());
		policyPaymentImpl.setDocDate(getDocDate());
		policyPaymentImpl.setAmount(getAmount());
		policyPaymentImpl.setReference(getReference());

		policyPaymentImpl.resetOriginalValues();

		return policyPaymentImpl;
	}

	@Override
	public int compareTo(PolicyPayment policyPayment) {
		PolicyPaymentPK primaryKey = policyPayment.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PolicyPayment)) {
			return false;
		}

		PolicyPayment policyPayment = (PolicyPayment)object;

		PolicyPaymentPK primaryKey = policyPayment.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PolicyPayment> toCacheModel() {
		PolicyPaymentCacheModel policyPaymentCacheModel =
			new PolicyPaymentCacheModel();

		policyPaymentCacheModel.policyPaymentPK = getPrimaryKey();

		policyPaymentCacheModel.policyNo = getPolicyNo();

		String policyNo = policyPaymentCacheModel.policyNo;

		if ((policyNo != null) && (policyNo.length() == 0)) {
			policyPaymentCacheModel.policyNo = null;
		}

		policyPaymentCacheModel.voucherNo = getVoucherNo();

		String voucherNo = policyPaymentCacheModel.voucherNo;

		if ((voucherNo != null) && (voucherNo.length() == 0)) {
			policyPaymentCacheModel.voucherNo = null;
		}

		policyPaymentCacheModel.endtNo = getEndtNo();

		String endtNo = policyPaymentCacheModel.endtNo;

		if ((endtNo != null) && (endtNo.length() == 0)) {
			policyPaymentCacheModel.endtNo = null;
		}

		policyPaymentCacheModel.claimNo = getClaimNo();

		String claimNo = policyPaymentCacheModel.claimNo;

		if ((claimNo != null) && (claimNo.length() == 0)) {
			policyPaymentCacheModel.claimNo = null;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			policyPaymentCacheModel.dueDate = dueDate.getTime();
		}
		else {
			policyPaymentCacheModel.dueDate = Long.MIN_VALUE;
		}

		Date docDate = getDocDate();

		if (docDate != null) {
			policyPaymentCacheModel.docDate = docDate.getTime();
		}
		else {
			policyPaymentCacheModel.docDate = Long.MIN_VALUE;
		}

		policyPaymentCacheModel.amount = getAmount();

		policyPaymentCacheModel.reference = getReference();

		String reference = policyPaymentCacheModel.reference;

		if ((reference != null) && (reference.length() == 0)) {
			policyPaymentCacheModel.reference = null;
		}

		return policyPaymentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PolicyPayment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PolicyPayment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyPayment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PolicyPayment)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PolicyPayment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PolicyPayment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyPayment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PolicyPayment)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PolicyPayment>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _policyNo;
	private String _voucherNo;
	private String _endtNo;
	private String _claimNo;
	private Date _dueDate;
	private Date _docDate;
	private double _amount;
	private String _reference;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PolicyPayment, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PolicyPayment)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ODS_POLICY_NO", _policyNo);
		_columnOriginalValues.put("ODS_VOUCHER_NO", _voucherNo);
		_columnOriginalValues.put("ODS_ENDT_NO", _endtNo);
		_columnOriginalValues.put("ODS_CLAIM_NO", _claimNo);
		_columnOriginalValues.put("ODS_DUE_DT", _dueDate);
		_columnOriginalValues.put("ODS_DOC_DT", _docDate);
		_columnOriginalValues.put("ODS_AMOUNT", _amount);
		_columnOriginalValues.put("ODS_REFERENCE", _reference);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ODS_POLICY_NO", "policyNo");
		attributeNames.put("ODS_VOUCHER_NO", "voucherNo");
		attributeNames.put("ODS_ENDT_NO", "endtNo");
		attributeNames.put("ODS_CLAIM_NO", "claimNo");
		attributeNames.put("ODS_DUE_DT", "dueDate");
		attributeNames.put("ODS_DOC_DT", "docDate");
		attributeNames.put("ODS_AMOUNT", "amount");
		attributeNames.put("ODS_REFERENCE", "reference");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ODS_POLICY_NO", 1L);

		columnBitmasks.put("ODS_VOUCHER_NO", 2L);

		columnBitmasks.put("ODS_ENDT_NO", 4L);

		columnBitmasks.put("ODS_CLAIM_NO", 8L);

		columnBitmasks.put("ODS_DUE_DT", 16L);

		columnBitmasks.put("ODS_DOC_DT", 32L);

		columnBitmasks.put("ODS_AMOUNT", 64L);

		columnBitmasks.put("ODS_REFERENCE", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PolicyPayment _escapedModel;

}