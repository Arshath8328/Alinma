/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.YakeenDataSave;
import com.ejada.atmc.acl.db.model.YakeenDataSaveModel;
import com.ejada.atmc.acl.db.model.YakeenDataSaveSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the YakeenDataSave service. Represents a row in the &quot;EJD_YAKEEN_DATA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>YakeenDataSaveModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link YakeenDataSaveImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see YakeenDataSaveImpl
 * @generated
 */
@JSON(strict = true)
public class YakeenDataSaveModelImpl
	extends BaseModelImpl<YakeenDataSave> implements YakeenDataSaveModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a yakeen data save model instance should use the <code>YakeenDataSave</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_YAKEEN_DATA";

	public static final Object[][] TABLE_COLUMNS = {
		{"ID", Types.VARCHAR}, {"OLD_ID", Types.VARCHAR},
		{"SEQUENCE_NUMBER", Types.VARCHAR}, {"DOB", Types.TIMESTAMP},
		{"SERVICE_NAME", Types.VARCHAR}, {"CALLING_DATE", Types.TIMESTAMP},
		{"STATUS", Types.VARCHAR}, {"SERVICE_OUTPUT", Types.VARCHAR},
		{"SERVICE_CALLING_DATE", Types.TIMESTAMP},
		{"SERVICE_MESSAGE", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OLD_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SEQUENCE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SERVICE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CALLING_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SERVICE_OUTPUT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SERVICE_CALLING_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SERVICE_MESSAGE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_YAKEEN_DATA (ID VARCHAR(75) not null primary key,OLD_ID VARCHAR(75) null,SEQUENCE_NUMBER VARCHAR(75) null,DOB DATE null,SERVICE_NAME VARCHAR(75) null,CALLING_DATE DATE null,STATUS VARCHAR(75) null,SERVICE_OUTPUT VARCHAR(75) null,SERVICE_CALLING_DATE DATE null,SERVICE_MESSAGE VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table EJD_YAKEEN_DATA";

	public static final String ORDER_BY_JPQL =
		" ORDER BY yakeenDataSave.Id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_YAKEEN_DATA.ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DOB_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SEQUENCENUMBER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SERVICENAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static YakeenDataSave toModel(YakeenDataSaveSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		YakeenDataSave model = new YakeenDataSaveImpl();

		model.setId(soapModel.getId());
		model.setOldId(soapModel.getOldId());
		model.setSequenceNumber(soapModel.getSequenceNumber());
		model.setDob(soapModel.getDob());
		model.setServiceName(soapModel.getServiceName());
		model.setCallingDate(soapModel.getCallingDate());
		model.setStatus(soapModel.getStatus());
		model.setServiceOutput(soapModel.getServiceOutput());
		model.setServiceCalledDate(soapModel.getServiceCalledDate());
		model.setServiceErrorMessage(soapModel.getServiceErrorMessage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<YakeenDataSave> toModels(
		YakeenDataSaveSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<YakeenDataSave> models = new ArrayList<YakeenDataSave>(
			soapModels.length);

		for (YakeenDataSaveSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public YakeenDataSaveModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return YakeenDataSave.class;
	}

	@Override
	public String getModelClassName() {
		return YakeenDataSave.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<YakeenDataSave, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<YakeenDataSave, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<YakeenDataSave, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((YakeenDataSave)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<YakeenDataSave, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<YakeenDataSave, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(YakeenDataSave)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<YakeenDataSave, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<YakeenDataSave, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, YakeenDataSave>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			YakeenDataSave.class.getClassLoader(), YakeenDataSave.class,
			ModelWrapper.class);

		try {
			Constructor<YakeenDataSave> constructor =
				(Constructor<YakeenDataSave>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<YakeenDataSave, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<YakeenDataSave, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<YakeenDataSave, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<YakeenDataSave, Object>>();
		Map<String, BiConsumer<YakeenDataSave, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<YakeenDataSave, ?>>();

		attributeGetterFunctions.put("Id", YakeenDataSave::getId);
		attributeSetterBiConsumers.put(
			"Id", (BiConsumer<YakeenDataSave, String>)YakeenDataSave::setId);
		attributeGetterFunctions.put("OldId", YakeenDataSave::getOldId);
		attributeSetterBiConsumers.put(
			"OldId",
			(BiConsumer<YakeenDataSave, String>)YakeenDataSave::setOldId);
		attributeGetterFunctions.put(
			"sequenceNumber", YakeenDataSave::getSequenceNumber);
		attributeSetterBiConsumers.put(
			"sequenceNumber",
			(BiConsumer<YakeenDataSave, String>)
				YakeenDataSave::setSequenceNumber);
		attributeGetterFunctions.put("dob", YakeenDataSave::getDob);
		attributeSetterBiConsumers.put(
			"dob", (BiConsumer<YakeenDataSave, Date>)YakeenDataSave::setDob);
		attributeGetterFunctions.put(
			"serviceName", YakeenDataSave::getServiceName);
		attributeSetterBiConsumers.put(
			"serviceName",
			(BiConsumer<YakeenDataSave, String>)YakeenDataSave::setServiceName);
		attributeGetterFunctions.put(
			"callingDate", YakeenDataSave::getCallingDate);
		attributeSetterBiConsumers.put(
			"callingDate",
			(BiConsumer<YakeenDataSave, Date>)YakeenDataSave::setCallingDate);
		attributeGetterFunctions.put("status", YakeenDataSave::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<YakeenDataSave, String>)YakeenDataSave::setStatus);
		attributeGetterFunctions.put(
			"serviceOutput", YakeenDataSave::getServiceOutput);
		attributeSetterBiConsumers.put(
			"serviceOutput",
			(BiConsumer<YakeenDataSave, String>)
				YakeenDataSave::setServiceOutput);
		attributeGetterFunctions.put(
			"serviceCalledDate", YakeenDataSave::getServiceCalledDate);
		attributeSetterBiConsumers.put(
			"serviceCalledDate",
			(BiConsumer<YakeenDataSave, Date>)
				YakeenDataSave::setServiceCalledDate);
		attributeGetterFunctions.put(
			"serviceErrorMessage", YakeenDataSave::getServiceErrorMessage);
		attributeSetterBiConsumers.put(
			"serviceErrorMessage",
			(BiConsumer<YakeenDataSave, String>)
				YakeenDataSave::setServiceErrorMessage);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getId() {
		if (_Id == null) {
			return "";
		}
		else {
			return _Id;
		}
	}

	@Override
	public void setId(String Id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Id = Id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalId() {
		return getColumnOriginalValue("ID");
	}

	@JSON
	@Override
	public String getOldId() {
		if (_OldId == null) {
			return "";
		}
		else {
			return _OldId;
		}
	}

	@Override
	public void setOldId(String OldId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_OldId = OldId;
	}

	@JSON
	@Override
	public String getSequenceNumber() {
		if (_sequenceNumber == null) {
			return "";
		}
		else {
			return _sequenceNumber;
		}
	}

	@Override
	public void setSequenceNumber(String sequenceNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sequenceNumber = sequenceNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSequenceNumber() {
		return getColumnOriginalValue("SEQUENCE_NUMBER");
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dob = dob;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalDob() {
		return getColumnOriginalValue("DOB");
	}

	@JSON
	@Override
	public String getServiceName() {
		if (_serviceName == null) {
			return "";
		}
		else {
			return _serviceName;
		}
	}

	@Override
	public void setServiceName(String serviceName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceName = serviceName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalServiceName() {
		return getColumnOriginalValue("SERVICE_NAME");
	}

	@JSON
	@Override
	public Date getCallingDate() {
		return _callingDate;
	}

	@Override
	public void setCallingDate(Date callingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_callingDate = callingDate;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("STATUS");
	}

	@JSON
	@Override
	public String getServiceOutput() {
		if (_serviceOutput == null) {
			return "";
		}
		else {
			return _serviceOutput;
		}
	}

	@Override
	public void setServiceOutput(String serviceOutput) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceOutput = serviceOutput;
	}

	@JSON
	@Override
	public Date getServiceCalledDate() {
		return _serviceCalledDate;
	}

	@Override
	public void setServiceCalledDate(Date serviceCalledDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceCalledDate = serviceCalledDate;
	}

	@JSON
	@Override
	public String getServiceErrorMessage() {
		if (_serviceErrorMessage == null) {
			return "";
		}
		else {
			return _serviceErrorMessage;
		}
	}

	@Override
	public void setServiceErrorMessage(String serviceErrorMessage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceErrorMessage = serviceErrorMessage;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public YakeenDataSave toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, YakeenDataSave>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		YakeenDataSaveImpl yakeenDataSaveImpl = new YakeenDataSaveImpl();

		yakeenDataSaveImpl.setId(getId());
		yakeenDataSaveImpl.setOldId(getOldId());
		yakeenDataSaveImpl.setSequenceNumber(getSequenceNumber());
		yakeenDataSaveImpl.setDob(getDob());
		yakeenDataSaveImpl.setServiceName(getServiceName());
		yakeenDataSaveImpl.setCallingDate(getCallingDate());
		yakeenDataSaveImpl.setStatus(getStatus());
		yakeenDataSaveImpl.setServiceOutput(getServiceOutput());
		yakeenDataSaveImpl.setServiceCalledDate(getServiceCalledDate());
		yakeenDataSaveImpl.setServiceErrorMessage(getServiceErrorMessage());

		yakeenDataSaveImpl.resetOriginalValues();

		return yakeenDataSaveImpl;
	}

	@Override
	public int compareTo(YakeenDataSave yakeenDataSave) {
		String primaryKey = yakeenDataSave.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof YakeenDataSave)) {
			return false;
		}

		YakeenDataSave yakeenDataSave = (YakeenDataSave)object;

		String primaryKey = yakeenDataSave.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<YakeenDataSave> toCacheModel() {
		YakeenDataSaveCacheModel yakeenDataSaveCacheModel =
			new YakeenDataSaveCacheModel();

		yakeenDataSaveCacheModel.Id = getId();

		String Id = yakeenDataSaveCacheModel.Id;

		if ((Id != null) && (Id.length() == 0)) {
			yakeenDataSaveCacheModel.Id = null;
		}

		yakeenDataSaveCacheModel.OldId = getOldId();

		String OldId = yakeenDataSaveCacheModel.OldId;

		if ((OldId != null) && (OldId.length() == 0)) {
			yakeenDataSaveCacheModel.OldId = null;
		}

		yakeenDataSaveCacheModel.sequenceNumber = getSequenceNumber();

		String sequenceNumber = yakeenDataSaveCacheModel.sequenceNumber;

		if ((sequenceNumber != null) && (sequenceNumber.length() == 0)) {
			yakeenDataSaveCacheModel.sequenceNumber = null;
		}

		Date dob = getDob();

		if (dob != null) {
			yakeenDataSaveCacheModel.dob = dob.getTime();
		}
		else {
			yakeenDataSaveCacheModel.dob = Long.MIN_VALUE;
		}

		yakeenDataSaveCacheModel.serviceName = getServiceName();

		String serviceName = yakeenDataSaveCacheModel.serviceName;

		if ((serviceName != null) && (serviceName.length() == 0)) {
			yakeenDataSaveCacheModel.serviceName = null;
		}

		Date callingDate = getCallingDate();

		if (callingDate != null) {
			yakeenDataSaveCacheModel.callingDate = callingDate.getTime();
		}
		else {
			yakeenDataSaveCacheModel.callingDate = Long.MIN_VALUE;
		}

		yakeenDataSaveCacheModel.status = getStatus();

		String status = yakeenDataSaveCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			yakeenDataSaveCacheModel.status = null;
		}

		yakeenDataSaveCacheModel.serviceOutput = getServiceOutput();

		String serviceOutput = yakeenDataSaveCacheModel.serviceOutput;

		if ((serviceOutput != null) && (serviceOutput.length() == 0)) {
			yakeenDataSaveCacheModel.serviceOutput = null;
		}

		Date serviceCalledDate = getServiceCalledDate();

		if (serviceCalledDate != null) {
			yakeenDataSaveCacheModel.serviceCalledDate =
				serviceCalledDate.getTime();
		}
		else {
			yakeenDataSaveCacheModel.serviceCalledDate = Long.MIN_VALUE;
		}

		yakeenDataSaveCacheModel.serviceErrorMessage = getServiceErrorMessage();

		String serviceErrorMessage =
			yakeenDataSaveCacheModel.serviceErrorMessage;

		if ((serviceErrorMessage != null) &&
			(serviceErrorMessage.length() == 0)) {

			yakeenDataSaveCacheModel.serviceErrorMessage = null;
		}

		return yakeenDataSaveCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<YakeenDataSave, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<YakeenDataSave, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<YakeenDataSave, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((YakeenDataSave)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<YakeenDataSave, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<YakeenDataSave, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<YakeenDataSave, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((YakeenDataSave)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, YakeenDataSave>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _Id;
	private String _OldId;
	private String _sequenceNumber;
	private Date _dob;
	private String _serviceName;
	private Date _callingDate;
	private String _status;
	private String _serviceOutput;
	private Date _serviceCalledDate;
	private String _serviceErrorMessage;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<YakeenDataSave, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((YakeenDataSave)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ID", _Id);
		_columnOriginalValues.put("OLD_ID", _OldId);
		_columnOriginalValues.put("SEQUENCE_NUMBER", _sequenceNumber);
		_columnOriginalValues.put("DOB", _dob);
		_columnOriginalValues.put("SERVICE_NAME", _serviceName);
		_columnOriginalValues.put("CALLING_DATE", _callingDate);
		_columnOriginalValues.put("STATUS", _status);
		_columnOriginalValues.put("SERVICE_OUTPUT", _serviceOutput);
		_columnOriginalValues.put("SERVICE_CALLING_DATE", _serviceCalledDate);
		_columnOriginalValues.put("SERVICE_MESSAGE", _serviceErrorMessage);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ID", "Id");
		attributeNames.put("OLD_ID", "OldId");
		attributeNames.put("SEQUENCE_NUMBER", "sequenceNumber");
		attributeNames.put("DOB", "dob");
		attributeNames.put("SERVICE_NAME", "serviceName");
		attributeNames.put("CALLING_DATE", "callingDate");
		attributeNames.put("STATUS", "status");
		attributeNames.put("SERVICE_OUTPUT", "serviceOutput");
		attributeNames.put("SERVICE_CALLING_DATE", "serviceCalledDate");
		attributeNames.put("SERVICE_MESSAGE", "serviceErrorMessage");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ID", 1L);

		columnBitmasks.put("OLD_ID", 2L);

		columnBitmasks.put("SEQUENCE_NUMBER", 4L);

		columnBitmasks.put("DOB", 8L);

		columnBitmasks.put("SERVICE_NAME", 16L);

		columnBitmasks.put("CALLING_DATE", 32L);

		columnBitmasks.put("STATUS", 64L);

		columnBitmasks.put("SERVICE_OUTPUT", 128L);

		columnBitmasks.put("SERVICE_CALLING_DATE", 256L);

		columnBitmasks.put("SERVICE_MESSAGE", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private YakeenDataSave _escapedModel;

}