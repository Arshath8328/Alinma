/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.PolicyHDR;
import com.ejada.atmc.acl.db.model.PolicyHDRModel;
import com.ejada.atmc.acl.db.model.PolicyHDRSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PolicyHDR service. Represents a row in the &quot;ODS_POLICY_HDR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PolicyHDRModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyHDRImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PolicyHDRImpl
 * @generated
 */
@JSON(strict = true)
public class PolicyHDRModelImpl
	extends BaseModelImpl<PolicyHDR> implements PolicyHDRModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy hdr model instance should use the <code>PolicyHDR</code> interface instead.
	 */
	public static final String TABLE_NAME = "ODS_POLICY_HDR";

	public static final Object[][] TABLE_COLUMNS = {
		{"ODS_POLICY_NO", Types.VARCHAR}, {"ODS_IQAMA_ID", Types.VARCHAR},
		{"ODS_POLICY_STATUS", Types.VARCHAR}, {"ODS_PRODUCT", Types.VARCHAR},
		{"ODS_INCEPTION_DT", Types.TIMESTAMP},
		{"ODS_EXPIRY_DT", Types.TIMESTAMP}, {"ODS_SUM_INSURED", Types.BIGINT},
		{"ODS_TOTAL_PREMIUM", Types.BIGINT}, {"ODS_POLICY_FEES", Types.BIGINT},
		{"ODS_POLICY_TAXES", Types.VARCHAR}, {"ODS_POLICY_TERM", Types.BIGINT},
		{"ODS_OS_PREMIUM", Types.VARCHAR}, {"ODS_NEXT_DUE_DT", Types.TIMESTAMP},
		{"ODS_COUNT_PREM_MISSED", Types.BIGINT},
		{"ODS_MODEOF_PAYMENT", Types.VARCHAR},
		{"ODS_NEXT_RENEWAL_DT", Types.TIMESTAMP},
		{"ODS_CUST_NAME", Types.VARCHAR}, {"ODS_CUST_DOB", Types.TIMESTAMP},
		{"ODS_INSURED_NAME", Types.VARCHAR},
		{"ODS_INSURED_DOB", Types.TIMESTAMP}, {"ODS_INSURED_ID", Types.VARCHAR},
		{"ODS_INSURED_MOBILE", Types.VARCHAR},
		{"ODS_INSURED_EMAIL", Types.VARCHAR},
		{"ODS_INSURED_ADDR", Types.VARCHAR},
		{"ODS_INSURED_GENDER", Types.VARCHAR},
		{"ODS_OCCUPTATION", Types.VARCHAR},
		{"ODS_EST_EXPIRY_DT", Types.TIMESTAMP},
		{"ODS_NAJM_STATUS", Types.VARCHAR},
		{"ODS_SURRENDER_VALUE", Types.BIGINT}, {"ODS_NOOF_RISK", Types.BIGINT},
		{"ODS_MEMBER_SCHEME", Types.VARCHAR},
		{"ODS_MEMBER_BENEFITS", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ODS_POLICY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_IQAMA_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_POLICY_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_PRODUCT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_INCEPTION_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_EXPIRY_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_SUM_INSURED", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_TOTAL_PREMIUM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_POLICY_FEES", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_POLICY_TAXES", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_POLICY_TERM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_OS_PREMIUM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_NEXT_DUE_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_COUNT_PREM_MISSED", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_MODEOF_PAYMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_NEXT_RENEWAL_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_CUST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_CUST_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_INSURED_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_INSURED_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_INSURED_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_INSURED_MOBILE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_INSURED_EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_INSURED_ADDR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_INSURED_GENDER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_OCCUPTATION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_EST_EXPIRY_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_NAJM_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_SURRENDER_VALUE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_NOOF_RISK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_MEMBER_SCHEME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_MEMBER_BENEFITS", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ODS_POLICY_HDR (ODS_POLICY_NO VARCHAR(75) not null primary key,ODS_IQAMA_ID VARCHAR(75) null,ODS_POLICY_STATUS VARCHAR(75) null,ODS_PRODUCT VARCHAR(75) null,ODS_INCEPTION_DT DATE null,ODS_EXPIRY_DT DATE null,ODS_SUM_INSURED LONG,ODS_TOTAL_PREMIUM LONG,ODS_POLICY_FEES LONG,ODS_POLICY_TAXES VARCHAR(75) null,ODS_POLICY_TERM LONG,ODS_OS_PREMIUM VARCHAR(75) null,ODS_NEXT_DUE_DT DATE null,ODS_COUNT_PREM_MISSED LONG,ODS_MODEOF_PAYMENT VARCHAR(75) null,ODS_NEXT_RENEWAL_DT DATE null,ODS_CUST_NAME VARCHAR(75) null,ODS_CUST_DOB DATE null,ODS_INSURED_NAME VARCHAR(75) null,ODS_INSURED_DOB DATE null,ODS_INSURED_ID VARCHAR(75) null,ODS_INSURED_MOBILE VARCHAR(75) null,ODS_INSURED_EMAIL VARCHAR(75) null,ODS_INSURED_ADDR VARCHAR(75) null,ODS_INSURED_GENDER VARCHAR(75) null,ODS_OCCUPTATION VARCHAR(75) null,ODS_EST_EXPIRY_DT DATE null,ODS_NAJM_STATUS VARCHAR(75) null,ODS_SURRENDER_VALUE LONG,ODS_NOOF_RISK LONG,ODS_MEMBER_SCHEME VARCHAR(75) null,ODS_MEMBER_BENEFITS VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ODS_POLICY_HDR";

	public static final String ORDER_BY_JPQL =
		" ORDER BY policyHDR.expiryDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ODS_POLICY_HDR.ODS_EXPIRY_DT DESC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long INSUREDMOBILE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long IQAMAID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYNO_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYSTATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long EXPIRYDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static PolicyHDR toModel(PolicyHDRSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PolicyHDR model = new PolicyHDRImpl();

		model.setPolicyNo(soapModel.getPolicyNo());
		model.setIqamaId(soapModel.getIqamaId());
		model.setPolicyStatus(soapModel.getPolicyStatus());
		model.setProduct(soapModel.getProduct());
		model.setInceptionDate(soapModel.getInceptionDate());
		model.setExpiryDate(soapModel.getExpiryDate());
		model.setSumInsured(soapModel.getSumInsured());
		model.setTotalPremium(soapModel.getTotalPremium());
		model.setPolicyFees(soapModel.getPolicyFees());
		model.setPolicyTaxes(soapModel.getPolicyTaxes());
		model.setPolicyTerm(soapModel.getPolicyTerm());
		model.setPremium(soapModel.getPremium());
		model.setNextDueDate(soapModel.getNextDueDate());
		model.setCountPremMissed(soapModel.getCountPremMissed());
		model.setModeOfPayment(soapModel.getModeOfPayment());
		model.setNextRenwalDate(soapModel.getNextRenwalDate());
		model.setCustName(soapModel.getCustName());
		model.setCustBirthDate(soapModel.getCustBirthDate());
		model.setInsuredName(soapModel.getInsuredName());
		model.setInsuredBirthDate(soapModel.getInsuredBirthDate());
		model.setInsuredId(soapModel.getInsuredId());
		model.setInsuredMobile(soapModel.getInsuredMobile());
		model.setInsuredEmail(soapModel.getInsuredEmail());
		model.setInsuredAddr(soapModel.getInsuredAddr());
		model.setInsuredGender(soapModel.getInsuredGender());
		model.setOccuptation(soapModel.getOccuptation());
		model.setEstExpiryDate(soapModel.getEstExpiryDate());
		model.setNajmStatus(soapModel.getNajmStatus());
		model.setSurrenderValue(soapModel.getSurrenderValue());
		model.setNoOfRisk(soapModel.getNoOfRisk());
		model.setMemberScheme(soapModel.getMemberScheme());
		model.setMemberBenefits(soapModel.getMemberBenefits());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<PolicyHDR> toModels(PolicyHDRSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PolicyHDR> models = new ArrayList<PolicyHDR>(soapModels.length);

		for (PolicyHDRSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PolicyHDRModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _policyNo;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPolicyNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _policyNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PolicyHDR.class;
	}

	@Override
	public String getModelClassName() {
		return PolicyHDR.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PolicyHDR, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PolicyHDR, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyHDR, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((PolicyHDR)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PolicyHDR, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PolicyHDR, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PolicyHDR)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PolicyHDR, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PolicyHDR, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PolicyHDR>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PolicyHDR.class.getClassLoader(), PolicyHDR.class,
			ModelWrapper.class);

		try {
			Constructor<PolicyHDR> constructor =
				(Constructor<PolicyHDR>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PolicyHDR, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PolicyHDR, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PolicyHDR, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PolicyHDR, Object>>();
		Map<String, BiConsumer<PolicyHDR, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PolicyHDR, ?>>();

		attributeGetterFunctions.put("policyNo", PolicyHDR::getPolicyNo);
		attributeSetterBiConsumers.put(
			"policyNo", (BiConsumer<PolicyHDR, String>)PolicyHDR::setPolicyNo);
		attributeGetterFunctions.put("iqamaId", PolicyHDR::getIqamaId);
		attributeSetterBiConsumers.put(
			"iqamaId", (BiConsumer<PolicyHDR, String>)PolicyHDR::setIqamaId);
		attributeGetterFunctions.put(
			"policyStatus", PolicyHDR::getPolicyStatus);
		attributeSetterBiConsumers.put(
			"policyStatus",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setPolicyStatus);
		attributeGetterFunctions.put("product", PolicyHDR::getProduct);
		attributeSetterBiConsumers.put(
			"product", (BiConsumer<PolicyHDR, String>)PolicyHDR::setProduct);
		attributeGetterFunctions.put(
			"inceptionDate", PolicyHDR::getInceptionDate);
		attributeSetterBiConsumers.put(
			"inceptionDate",
			(BiConsumer<PolicyHDR, Date>)PolicyHDR::setInceptionDate);
		attributeGetterFunctions.put("expiryDate", PolicyHDR::getExpiryDate);
		attributeSetterBiConsumers.put(
			"expiryDate",
			(BiConsumer<PolicyHDR, Date>)PolicyHDR::setExpiryDate);
		attributeGetterFunctions.put("sumInsured", PolicyHDR::getSumInsured);
		attributeSetterBiConsumers.put(
			"sumInsured",
			(BiConsumer<PolicyHDR, Long>)PolicyHDR::setSumInsured);
		attributeGetterFunctions.put(
			"totalPremium", PolicyHDR::getTotalPremium);
		attributeSetterBiConsumers.put(
			"totalPremium",
			(BiConsumer<PolicyHDR, Long>)PolicyHDR::setTotalPremium);
		attributeGetterFunctions.put("policyFees", PolicyHDR::getPolicyFees);
		attributeSetterBiConsumers.put(
			"policyFees",
			(BiConsumer<PolicyHDR, Long>)PolicyHDR::setPolicyFees);
		attributeGetterFunctions.put("policyTaxes", PolicyHDR::getPolicyTaxes);
		attributeSetterBiConsumers.put(
			"policyTaxes",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setPolicyTaxes);
		attributeGetterFunctions.put("policyTerm", PolicyHDR::getPolicyTerm);
		attributeSetterBiConsumers.put(
			"policyTerm",
			(BiConsumer<PolicyHDR, Long>)PolicyHDR::setPolicyTerm);
		attributeGetterFunctions.put("premium", PolicyHDR::getPremium);
		attributeSetterBiConsumers.put(
			"premium", (BiConsumer<PolicyHDR, String>)PolicyHDR::setPremium);
		attributeGetterFunctions.put("nextDueDate", PolicyHDR::getNextDueDate);
		attributeSetterBiConsumers.put(
			"nextDueDate",
			(BiConsumer<PolicyHDR, Date>)PolicyHDR::setNextDueDate);
		attributeGetterFunctions.put(
			"countPremMissed", PolicyHDR::getCountPremMissed);
		attributeSetterBiConsumers.put(
			"countPremMissed",
			(BiConsumer<PolicyHDR, Long>)PolicyHDR::setCountPremMissed);
		attributeGetterFunctions.put(
			"modeOfPayment", PolicyHDR::getModeOfPayment);
		attributeSetterBiConsumers.put(
			"modeOfPayment",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setModeOfPayment);
		attributeGetterFunctions.put(
			"nextRenwalDate", PolicyHDR::getNextRenwalDate);
		attributeSetterBiConsumers.put(
			"nextRenwalDate",
			(BiConsumer<PolicyHDR, Date>)PolicyHDR::setNextRenwalDate);
		attributeGetterFunctions.put("custName", PolicyHDR::getCustName);
		attributeSetterBiConsumers.put(
			"custName", (BiConsumer<PolicyHDR, String>)PolicyHDR::setCustName);
		attributeGetterFunctions.put(
			"custBirthDate", PolicyHDR::getCustBirthDate);
		attributeSetterBiConsumers.put(
			"custBirthDate",
			(BiConsumer<PolicyHDR, Date>)PolicyHDR::setCustBirthDate);
		attributeGetterFunctions.put("insuredName", PolicyHDR::getInsuredName);
		attributeSetterBiConsumers.put(
			"insuredName",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setInsuredName);
		attributeGetterFunctions.put(
			"insuredBirthDate", PolicyHDR::getInsuredBirthDate);
		attributeSetterBiConsumers.put(
			"insuredBirthDate",
			(BiConsumer<PolicyHDR, Date>)PolicyHDR::setInsuredBirthDate);
		attributeGetterFunctions.put("insuredId", PolicyHDR::getInsuredId);
		attributeSetterBiConsumers.put(
			"insuredId",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setInsuredId);
		attributeGetterFunctions.put(
			"insuredMobile", PolicyHDR::getInsuredMobile);
		attributeSetterBiConsumers.put(
			"insuredMobile",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setInsuredMobile);
		attributeGetterFunctions.put(
			"insuredEmail", PolicyHDR::getInsuredEmail);
		attributeSetterBiConsumers.put(
			"insuredEmail",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setInsuredEmail);
		attributeGetterFunctions.put("insuredAddr", PolicyHDR::getInsuredAddr);
		attributeSetterBiConsumers.put(
			"insuredAddr",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setInsuredAddr);
		attributeGetterFunctions.put(
			"insuredGender", PolicyHDR::getInsuredGender);
		attributeSetterBiConsumers.put(
			"insuredGender",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setInsuredGender);
		attributeGetterFunctions.put("occuptation", PolicyHDR::getOccuptation);
		attributeSetterBiConsumers.put(
			"occuptation",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setOccuptation);
		attributeGetterFunctions.put(
			"estExpiryDate", PolicyHDR::getEstExpiryDate);
		attributeSetterBiConsumers.put(
			"estExpiryDate",
			(BiConsumer<PolicyHDR, Date>)PolicyHDR::setEstExpiryDate);
		attributeGetterFunctions.put("najmStatus", PolicyHDR::getNajmStatus);
		attributeSetterBiConsumers.put(
			"najmStatus",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setNajmStatus);
		attributeGetterFunctions.put(
			"surrenderValue", PolicyHDR::getSurrenderValue);
		attributeSetterBiConsumers.put(
			"surrenderValue",
			(BiConsumer<PolicyHDR, Long>)PolicyHDR::setSurrenderValue);
		attributeGetterFunctions.put("noOfRisk", PolicyHDR::getNoOfRisk);
		attributeSetterBiConsumers.put(
			"noOfRisk", (BiConsumer<PolicyHDR, Long>)PolicyHDR::setNoOfRisk);
		attributeGetterFunctions.put(
			"memberScheme", PolicyHDR::getMemberScheme);
		attributeSetterBiConsumers.put(
			"memberScheme",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setMemberScheme);
		attributeGetterFunctions.put(
			"memberBenefits", PolicyHDR::getMemberBenefits);
		attributeSetterBiConsumers.put(
			"memberBenefits",
			(BiConsumer<PolicyHDR, String>)PolicyHDR::setMemberBenefits);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getPolicyNo() {
		if (_policyNo == null) {
			return "";
		}
		else {
			return _policyNo;
		}
	}

	@Override
	public void setPolicyNo(String policyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNo = policyNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPolicyNo() {
		return getColumnOriginalValue("ODS_POLICY_NO");
	}

	@JSON
	@Override
	public String getIqamaId() {
		if (_iqamaId == null) {
			return "";
		}
		else {
			return _iqamaId;
		}
	}

	@Override
	public void setIqamaId(String iqamaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_iqamaId = iqamaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalIqamaId() {
		return getColumnOriginalValue("ODS_IQAMA_ID");
	}

	@JSON
	@Override
	public String getPolicyStatus() {
		if (_policyStatus == null) {
			return "";
		}
		else {
			return _policyStatus;
		}
	}

	@Override
	public void setPolicyStatus(String policyStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyStatus = policyStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPolicyStatus() {
		return getColumnOriginalValue("ODS_POLICY_STATUS");
	}

	@JSON
	@Override
	public String getProduct() {
		if (_product == null) {
			return "";
		}
		else {
			return _product;
		}
	}

	@Override
	public void setProduct(String product) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_product = product;
	}

	@JSON
	@Override
	public Date getInceptionDate() {
		return _inceptionDate;
	}

	@Override
	public void setInceptionDate(Date inceptionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inceptionDate = inceptionDate;
	}

	@JSON
	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expiryDate = expiryDate;
	}

	@JSON
	@Override
	public long getSumInsured() {
		return _sumInsured;
	}

	@Override
	public void setSumInsured(long sumInsured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sumInsured = sumInsured;
	}

	@JSON
	@Override
	public long getTotalPremium() {
		return _totalPremium;
	}

	@Override
	public void setTotalPremium(long totalPremium) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalPremium = totalPremium;
	}

	@JSON
	@Override
	public long getPolicyFees() {
		return _policyFees;
	}

	@Override
	public void setPolicyFees(long policyFees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyFees = policyFees;
	}

	@JSON
	@Override
	public String getPolicyTaxes() {
		if (_policyTaxes == null) {
			return "";
		}
		else {
			return _policyTaxes;
		}
	}

	@Override
	public void setPolicyTaxes(String policyTaxes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyTaxes = policyTaxes;
	}

	@JSON
	@Override
	public long getPolicyTerm() {
		return _policyTerm;
	}

	@Override
	public void setPolicyTerm(long policyTerm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyTerm = policyTerm;
	}

	@JSON
	@Override
	public String getPremium() {
		if (_premium == null) {
			return "";
		}
		else {
			return _premium;
		}
	}

	@Override
	public void setPremium(String premium) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_premium = premium;
	}

	@JSON
	@Override
	public Date getNextDueDate() {
		return _nextDueDate;
	}

	@Override
	public void setNextDueDate(Date nextDueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nextDueDate = nextDueDate;
	}

	@JSON
	@Override
	public long getCountPremMissed() {
		return _countPremMissed;
	}

	@Override
	public void setCountPremMissed(long countPremMissed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countPremMissed = countPremMissed;
	}

	@JSON
	@Override
	public String getModeOfPayment() {
		if (_modeOfPayment == null) {
			return "";
		}
		else {
			return _modeOfPayment;
		}
	}

	@Override
	public void setModeOfPayment(String modeOfPayment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modeOfPayment = modeOfPayment;
	}

	@JSON
	@Override
	public Date getNextRenwalDate() {
		return _nextRenwalDate;
	}

	@Override
	public void setNextRenwalDate(Date nextRenwalDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nextRenwalDate = nextRenwalDate;
	}

	@JSON
	@Override
	public String getCustName() {
		if (_custName == null) {
			return "";
		}
		else {
			return _custName;
		}
	}

	@Override
	public void setCustName(String custName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_custName = custName;
	}

	@JSON
	@Override
	public Date getCustBirthDate() {
		return _custBirthDate;
	}

	@Override
	public void setCustBirthDate(Date custBirthDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_custBirthDate = custBirthDate;
	}

	@JSON
	@Override
	public String getInsuredName() {
		if (_insuredName == null) {
			return "";
		}
		else {
			return _insuredName;
		}
	}

	@Override
	public void setInsuredName(String insuredName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredName = insuredName;
	}

	@JSON
	@Override
	public Date getInsuredBirthDate() {
		return _insuredBirthDate;
	}

	@Override
	public void setInsuredBirthDate(Date insuredBirthDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredBirthDate = insuredBirthDate;
	}

	@JSON
	@Override
	public String getInsuredId() {
		if (_insuredId == null) {
			return "";
		}
		else {
			return _insuredId;
		}
	}

	@Override
	public void setInsuredId(String insuredId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredId = insuredId;
	}

	@JSON
	@Override
	public String getInsuredMobile() {
		if (_insuredMobile == null) {
			return "";
		}
		else {
			return _insuredMobile;
		}
	}

	@Override
	public void setInsuredMobile(String insuredMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredMobile = insuredMobile;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalInsuredMobile() {
		return getColumnOriginalValue("ODS_INSURED_MOBILE");
	}

	@JSON
	@Override
	public String getInsuredEmail() {
		if (_insuredEmail == null) {
			return "";
		}
		else {
			return _insuredEmail;
		}
	}

	@Override
	public void setInsuredEmail(String insuredEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredEmail = insuredEmail;
	}

	@JSON
	@Override
	public String getInsuredAddr() {
		if (_insuredAddr == null) {
			return "";
		}
		else {
			return _insuredAddr;
		}
	}

	@Override
	public void setInsuredAddr(String insuredAddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredAddr = insuredAddr;
	}

	@JSON
	@Override
	public String getInsuredGender() {
		if (_insuredGender == null) {
			return "";
		}
		else {
			return _insuredGender;
		}
	}

	@Override
	public void setInsuredGender(String insuredGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredGender = insuredGender;
	}

	@JSON
	@Override
	public String getOccuptation() {
		if (_occuptation == null) {
			return "";
		}
		else {
			return _occuptation;
		}
	}

	@Override
	public void setOccuptation(String occuptation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occuptation = occuptation;
	}

	@JSON
	@Override
	public Date getEstExpiryDate() {
		return _estExpiryDate;
	}

	@Override
	public void setEstExpiryDate(Date estExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estExpiryDate = estExpiryDate;
	}

	@JSON
	@Override
	public String getNajmStatus() {
		if (_najmStatus == null) {
			return "";
		}
		else {
			return _najmStatus;
		}
	}

	@Override
	public void setNajmStatus(String najmStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_najmStatus = najmStatus;
	}

	@JSON
	@Override
	public long getSurrenderValue() {
		return _surrenderValue;
	}

	@Override
	public void setSurrenderValue(long surrenderValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surrenderValue = surrenderValue;
	}

	@JSON
	@Override
	public long getNoOfRisk() {
		return _noOfRisk;
	}

	@Override
	public void setNoOfRisk(long noOfRisk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noOfRisk = noOfRisk;
	}

	@JSON
	@Override
	public String getMemberScheme() {
		if (_memberScheme == null) {
			return "";
		}
		else {
			return _memberScheme;
		}
	}

	@Override
	public void setMemberScheme(String memberScheme) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_memberScheme = memberScheme;
	}

	@JSON
	@Override
	public String getMemberBenefits() {
		if (_memberBenefits == null) {
			return "";
		}
		else {
			return _memberBenefits;
		}
	}

	@Override
	public void setMemberBenefits(String memberBenefits) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_memberBenefits = memberBenefits;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public PolicyHDR toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PolicyHDR>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyHDRImpl policyHDRImpl = new PolicyHDRImpl();

		policyHDRImpl.setPolicyNo(getPolicyNo());
		policyHDRImpl.setIqamaId(getIqamaId());
		policyHDRImpl.setPolicyStatus(getPolicyStatus());
		policyHDRImpl.setProduct(getProduct());
		policyHDRImpl.setInceptionDate(getInceptionDate());
		policyHDRImpl.setExpiryDate(getExpiryDate());
		policyHDRImpl.setSumInsured(getSumInsured());
		policyHDRImpl.setTotalPremium(getTotalPremium());
		policyHDRImpl.setPolicyFees(getPolicyFees());
		policyHDRImpl.setPolicyTaxes(getPolicyTaxes());
		policyHDRImpl.setPolicyTerm(getPolicyTerm());
		policyHDRImpl.setPremium(getPremium());
		policyHDRImpl.setNextDueDate(getNextDueDate());
		policyHDRImpl.setCountPremMissed(getCountPremMissed());
		policyHDRImpl.setModeOfPayment(getModeOfPayment());
		policyHDRImpl.setNextRenwalDate(getNextRenwalDate());
		policyHDRImpl.setCustName(getCustName());
		policyHDRImpl.setCustBirthDate(getCustBirthDate());
		policyHDRImpl.setInsuredName(getInsuredName());
		policyHDRImpl.setInsuredBirthDate(getInsuredBirthDate());
		policyHDRImpl.setInsuredId(getInsuredId());
		policyHDRImpl.setInsuredMobile(getInsuredMobile());
		policyHDRImpl.setInsuredEmail(getInsuredEmail());
		policyHDRImpl.setInsuredAddr(getInsuredAddr());
		policyHDRImpl.setInsuredGender(getInsuredGender());
		policyHDRImpl.setOccuptation(getOccuptation());
		policyHDRImpl.setEstExpiryDate(getEstExpiryDate());
		policyHDRImpl.setNajmStatus(getNajmStatus());
		policyHDRImpl.setSurrenderValue(getSurrenderValue());
		policyHDRImpl.setNoOfRisk(getNoOfRisk());
		policyHDRImpl.setMemberScheme(getMemberScheme());
		policyHDRImpl.setMemberBenefits(getMemberBenefits());

		policyHDRImpl.resetOriginalValues();

		return policyHDRImpl;
	}

	@Override
	public int compareTo(PolicyHDR policyHDR) {
		int value = 0;

		value = DateUtil.compareTo(getExpiryDate(), policyHDR.getExpiryDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PolicyHDR)) {
			return false;
		}

		PolicyHDR policyHDR = (PolicyHDR)object;

		String primaryKey = policyHDR.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PolicyHDR> toCacheModel() {
		PolicyHDRCacheModel policyHDRCacheModel = new PolicyHDRCacheModel();

		policyHDRCacheModel.policyNo = getPolicyNo();

		String policyNo = policyHDRCacheModel.policyNo;

		if ((policyNo != null) && (policyNo.length() == 0)) {
			policyHDRCacheModel.policyNo = null;
		}

		policyHDRCacheModel.iqamaId = getIqamaId();

		String iqamaId = policyHDRCacheModel.iqamaId;

		if ((iqamaId != null) && (iqamaId.length() == 0)) {
			policyHDRCacheModel.iqamaId = null;
		}

		policyHDRCacheModel.policyStatus = getPolicyStatus();

		String policyStatus = policyHDRCacheModel.policyStatus;

		if ((policyStatus != null) && (policyStatus.length() == 0)) {
			policyHDRCacheModel.policyStatus = null;
		}

		policyHDRCacheModel.product = getProduct();

		String product = policyHDRCacheModel.product;

		if ((product != null) && (product.length() == 0)) {
			policyHDRCacheModel.product = null;
		}

		Date inceptionDate = getInceptionDate();

		if (inceptionDate != null) {
			policyHDRCacheModel.inceptionDate = inceptionDate.getTime();
		}
		else {
			policyHDRCacheModel.inceptionDate = Long.MIN_VALUE;
		}

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			policyHDRCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			policyHDRCacheModel.expiryDate = Long.MIN_VALUE;
		}

		policyHDRCacheModel.sumInsured = getSumInsured();

		policyHDRCacheModel.totalPremium = getTotalPremium();

		policyHDRCacheModel.policyFees = getPolicyFees();

		policyHDRCacheModel.policyTaxes = getPolicyTaxes();

		String policyTaxes = policyHDRCacheModel.policyTaxes;

		if ((policyTaxes != null) && (policyTaxes.length() == 0)) {
			policyHDRCacheModel.policyTaxes = null;
		}

		policyHDRCacheModel.policyTerm = getPolicyTerm();

		policyHDRCacheModel.premium = getPremium();

		String premium = policyHDRCacheModel.premium;

		if ((premium != null) && (premium.length() == 0)) {
			policyHDRCacheModel.premium = null;
		}

		Date nextDueDate = getNextDueDate();

		if (nextDueDate != null) {
			policyHDRCacheModel.nextDueDate = nextDueDate.getTime();
		}
		else {
			policyHDRCacheModel.nextDueDate = Long.MIN_VALUE;
		}

		policyHDRCacheModel.countPremMissed = getCountPremMissed();

		policyHDRCacheModel.modeOfPayment = getModeOfPayment();

		String modeOfPayment = policyHDRCacheModel.modeOfPayment;

		if ((modeOfPayment != null) && (modeOfPayment.length() == 0)) {
			policyHDRCacheModel.modeOfPayment = null;
		}

		Date nextRenwalDate = getNextRenwalDate();

		if (nextRenwalDate != null) {
			policyHDRCacheModel.nextRenwalDate = nextRenwalDate.getTime();
		}
		else {
			policyHDRCacheModel.nextRenwalDate = Long.MIN_VALUE;
		}

		policyHDRCacheModel.custName = getCustName();

		String custName = policyHDRCacheModel.custName;

		if ((custName != null) && (custName.length() == 0)) {
			policyHDRCacheModel.custName = null;
		}

		Date custBirthDate = getCustBirthDate();

		if (custBirthDate != null) {
			policyHDRCacheModel.custBirthDate = custBirthDate.getTime();
		}
		else {
			policyHDRCacheModel.custBirthDate = Long.MIN_VALUE;
		}

		policyHDRCacheModel.insuredName = getInsuredName();

		String insuredName = policyHDRCacheModel.insuredName;

		if ((insuredName != null) && (insuredName.length() == 0)) {
			policyHDRCacheModel.insuredName = null;
		}

		Date insuredBirthDate = getInsuredBirthDate();

		if (insuredBirthDate != null) {
			policyHDRCacheModel.insuredBirthDate = insuredBirthDate.getTime();
		}
		else {
			policyHDRCacheModel.insuredBirthDate = Long.MIN_VALUE;
		}

		policyHDRCacheModel.insuredId = getInsuredId();

		String insuredId = policyHDRCacheModel.insuredId;

		if ((insuredId != null) && (insuredId.length() == 0)) {
			policyHDRCacheModel.insuredId = null;
		}

		policyHDRCacheModel.insuredMobile = getInsuredMobile();

		String insuredMobile = policyHDRCacheModel.insuredMobile;

		if ((insuredMobile != null) && (insuredMobile.length() == 0)) {
			policyHDRCacheModel.insuredMobile = null;
		}

		policyHDRCacheModel.insuredEmail = getInsuredEmail();

		String insuredEmail = policyHDRCacheModel.insuredEmail;

		if ((insuredEmail != null) && (insuredEmail.length() == 0)) {
			policyHDRCacheModel.insuredEmail = null;
		}

		policyHDRCacheModel.insuredAddr = getInsuredAddr();

		String insuredAddr = policyHDRCacheModel.insuredAddr;

		if ((insuredAddr != null) && (insuredAddr.length() == 0)) {
			policyHDRCacheModel.insuredAddr = null;
		}

		policyHDRCacheModel.insuredGender = getInsuredGender();

		String insuredGender = policyHDRCacheModel.insuredGender;

		if ((insuredGender != null) && (insuredGender.length() == 0)) {
			policyHDRCacheModel.insuredGender = null;
		}

		policyHDRCacheModel.occuptation = getOccuptation();

		String occuptation = policyHDRCacheModel.occuptation;

		if ((occuptation != null) && (occuptation.length() == 0)) {
			policyHDRCacheModel.occuptation = null;
		}

		Date estExpiryDate = getEstExpiryDate();

		if (estExpiryDate != null) {
			policyHDRCacheModel.estExpiryDate = estExpiryDate.getTime();
		}
		else {
			policyHDRCacheModel.estExpiryDate = Long.MIN_VALUE;
		}

		policyHDRCacheModel.najmStatus = getNajmStatus();

		String najmStatus = policyHDRCacheModel.najmStatus;

		if ((najmStatus != null) && (najmStatus.length() == 0)) {
			policyHDRCacheModel.najmStatus = null;
		}

		policyHDRCacheModel.surrenderValue = getSurrenderValue();

		policyHDRCacheModel.noOfRisk = getNoOfRisk();

		policyHDRCacheModel.memberScheme = getMemberScheme();

		String memberScheme = policyHDRCacheModel.memberScheme;

		if ((memberScheme != null) && (memberScheme.length() == 0)) {
			policyHDRCacheModel.memberScheme = null;
		}

		policyHDRCacheModel.memberBenefits = getMemberBenefits();

		String memberBenefits = policyHDRCacheModel.memberBenefits;

		if ((memberBenefits != null) && (memberBenefits.length() == 0)) {
			policyHDRCacheModel.memberBenefits = null;
		}

		return policyHDRCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PolicyHDR, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PolicyHDR, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyHDR, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PolicyHDR)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PolicyHDR, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PolicyHDR, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyHDR, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PolicyHDR)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PolicyHDR>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _policyNo;
	private String _iqamaId;
	private String _policyStatus;
	private String _product;
	private Date _inceptionDate;
	private Date _expiryDate;
	private long _sumInsured;
	private long _totalPremium;
	private long _policyFees;
	private String _policyTaxes;
	private long _policyTerm;
	private String _premium;
	private Date _nextDueDate;
	private long _countPremMissed;
	private String _modeOfPayment;
	private Date _nextRenwalDate;
	private String _custName;
	private Date _custBirthDate;
	private String _insuredName;
	private Date _insuredBirthDate;
	private String _insuredId;
	private String _insuredMobile;
	private String _insuredEmail;
	private String _insuredAddr;
	private String _insuredGender;
	private String _occuptation;
	private Date _estExpiryDate;
	private String _najmStatus;
	private long _surrenderValue;
	private long _noOfRisk;
	private String _memberScheme;
	private String _memberBenefits;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PolicyHDR, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PolicyHDR)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ODS_POLICY_NO", _policyNo);
		_columnOriginalValues.put("ODS_IQAMA_ID", _iqamaId);
		_columnOriginalValues.put("ODS_POLICY_STATUS", _policyStatus);
		_columnOriginalValues.put("ODS_PRODUCT", _product);
		_columnOriginalValues.put("ODS_INCEPTION_DT", _inceptionDate);
		_columnOriginalValues.put("ODS_EXPIRY_DT", _expiryDate);
		_columnOriginalValues.put("ODS_SUM_INSURED", _sumInsured);
		_columnOriginalValues.put("ODS_TOTAL_PREMIUM", _totalPremium);
		_columnOriginalValues.put("ODS_POLICY_FEES", _policyFees);
		_columnOriginalValues.put("ODS_POLICY_TAXES", _policyTaxes);
		_columnOriginalValues.put("ODS_POLICY_TERM", _policyTerm);
		_columnOriginalValues.put("ODS_OS_PREMIUM", _premium);
		_columnOriginalValues.put("ODS_NEXT_DUE_DT", _nextDueDate);
		_columnOriginalValues.put("ODS_COUNT_PREM_MISSED", _countPremMissed);
		_columnOriginalValues.put("ODS_MODEOF_PAYMENT", _modeOfPayment);
		_columnOriginalValues.put("ODS_NEXT_RENEWAL_DT", _nextRenwalDate);
		_columnOriginalValues.put("ODS_CUST_NAME", _custName);
		_columnOriginalValues.put("ODS_CUST_DOB", _custBirthDate);
		_columnOriginalValues.put("ODS_INSURED_NAME", _insuredName);
		_columnOriginalValues.put("ODS_INSURED_DOB", _insuredBirthDate);
		_columnOriginalValues.put("ODS_INSURED_ID", _insuredId);
		_columnOriginalValues.put("ODS_INSURED_MOBILE", _insuredMobile);
		_columnOriginalValues.put("ODS_INSURED_EMAIL", _insuredEmail);
		_columnOriginalValues.put("ODS_INSURED_ADDR", _insuredAddr);
		_columnOriginalValues.put("ODS_INSURED_GENDER", _insuredGender);
		_columnOriginalValues.put("ODS_OCCUPTATION", _occuptation);
		_columnOriginalValues.put("ODS_EST_EXPIRY_DT", _estExpiryDate);
		_columnOriginalValues.put("ODS_NAJM_STATUS", _najmStatus);
		_columnOriginalValues.put("ODS_SURRENDER_VALUE", _surrenderValue);
		_columnOriginalValues.put("ODS_NOOF_RISK", _noOfRisk);
		_columnOriginalValues.put("ODS_MEMBER_SCHEME", _memberScheme);
		_columnOriginalValues.put("ODS_MEMBER_BENEFITS", _memberBenefits);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ODS_POLICY_NO", "policyNo");
		attributeNames.put("ODS_IQAMA_ID", "iqamaId");
		attributeNames.put("ODS_POLICY_STATUS", "policyStatus");
		attributeNames.put("ODS_PRODUCT", "product");
		attributeNames.put("ODS_INCEPTION_DT", "inceptionDate");
		attributeNames.put("ODS_EXPIRY_DT", "expiryDate");
		attributeNames.put("ODS_SUM_INSURED", "sumInsured");
		attributeNames.put("ODS_TOTAL_PREMIUM", "totalPremium");
		attributeNames.put("ODS_POLICY_FEES", "policyFees");
		attributeNames.put("ODS_POLICY_TAXES", "policyTaxes");
		attributeNames.put("ODS_POLICY_TERM", "policyTerm");
		attributeNames.put("ODS_OS_PREMIUM", "premium");
		attributeNames.put("ODS_NEXT_DUE_DT", "nextDueDate");
		attributeNames.put("ODS_COUNT_PREM_MISSED", "countPremMissed");
		attributeNames.put("ODS_MODEOF_PAYMENT", "modeOfPayment");
		attributeNames.put("ODS_NEXT_RENEWAL_DT", "nextRenwalDate");
		attributeNames.put("ODS_CUST_NAME", "custName");
		attributeNames.put("ODS_CUST_DOB", "custBirthDate");
		attributeNames.put("ODS_INSURED_NAME", "insuredName");
		attributeNames.put("ODS_INSURED_DOB", "insuredBirthDate");
		attributeNames.put("ODS_INSURED_ID", "insuredId");
		attributeNames.put("ODS_INSURED_MOBILE", "insuredMobile");
		attributeNames.put("ODS_INSURED_EMAIL", "insuredEmail");
		attributeNames.put("ODS_INSURED_ADDR", "insuredAddr");
		attributeNames.put("ODS_INSURED_GENDER", "insuredGender");
		attributeNames.put("ODS_OCCUPTATION", "occuptation");
		attributeNames.put("ODS_EST_EXPIRY_DT", "estExpiryDate");
		attributeNames.put("ODS_NAJM_STATUS", "najmStatus");
		attributeNames.put("ODS_SURRENDER_VALUE", "surrenderValue");
		attributeNames.put("ODS_NOOF_RISK", "noOfRisk");
		attributeNames.put("ODS_MEMBER_SCHEME", "memberScheme");
		attributeNames.put("ODS_MEMBER_BENEFITS", "memberBenefits");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ODS_POLICY_NO", 1L);

		columnBitmasks.put("ODS_IQAMA_ID", 2L);

		columnBitmasks.put("ODS_POLICY_STATUS", 4L);

		columnBitmasks.put("ODS_PRODUCT", 8L);

		columnBitmasks.put("ODS_INCEPTION_DT", 16L);

		columnBitmasks.put("ODS_EXPIRY_DT", 32L);

		columnBitmasks.put("ODS_SUM_INSURED", 64L);

		columnBitmasks.put("ODS_TOTAL_PREMIUM", 128L);

		columnBitmasks.put("ODS_POLICY_FEES", 256L);

		columnBitmasks.put("ODS_POLICY_TAXES", 512L);

		columnBitmasks.put("ODS_POLICY_TERM", 1024L);

		columnBitmasks.put("ODS_OS_PREMIUM", 2048L);

		columnBitmasks.put("ODS_NEXT_DUE_DT", 4096L);

		columnBitmasks.put("ODS_COUNT_PREM_MISSED", 8192L);

		columnBitmasks.put("ODS_MODEOF_PAYMENT", 16384L);

		columnBitmasks.put("ODS_NEXT_RENEWAL_DT", 32768L);

		columnBitmasks.put("ODS_CUST_NAME", 65536L);

		columnBitmasks.put("ODS_CUST_DOB", 131072L);

		columnBitmasks.put("ODS_INSURED_NAME", 262144L);

		columnBitmasks.put("ODS_INSURED_DOB", 524288L);

		columnBitmasks.put("ODS_INSURED_ID", 1048576L);

		columnBitmasks.put("ODS_INSURED_MOBILE", 2097152L);

		columnBitmasks.put("ODS_INSURED_EMAIL", 4194304L);

		columnBitmasks.put("ODS_INSURED_ADDR", 8388608L);

		columnBitmasks.put("ODS_INSURED_GENDER", 16777216L);

		columnBitmasks.put("ODS_OCCUPTATION", 33554432L);

		columnBitmasks.put("ODS_EST_EXPIRY_DT", 67108864L);

		columnBitmasks.put("ODS_NAJM_STATUS", 134217728L);

		columnBitmasks.put("ODS_SURRENDER_VALUE", 268435456L);

		columnBitmasks.put("ODS_NOOF_RISK", 536870912L);

		columnBitmasks.put("ODS_MEMBER_SCHEME", 1073741824L);

		columnBitmasks.put("ODS_MEMBER_BENEFITS", 2147483648L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PolicyHDR _escapedModel;

}