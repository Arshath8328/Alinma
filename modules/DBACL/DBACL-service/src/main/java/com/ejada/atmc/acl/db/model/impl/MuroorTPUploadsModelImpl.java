/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.MuroorTPUploads;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsBankIbanBlobModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsDriverLicenseBlobModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsFrontPhotoBlobModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsLeftSidePhotoBlobModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsOwnerIdBlobModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsRearPhotoBlobModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsRightSidePhotoBlobModel;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsSoap;
import com.ejada.atmc.acl.db.model.MuroorTPUploadsVehRegistBlobModel;
import com.ejada.atmc.acl.db.service.MuroorTPUploadsLocalServiceUtil;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MuroorTPUploads service. Represents a row in the &quot;CLM_MUROOR_TP_UPLOADS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MuroorTPUploadsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MuroorTPUploadsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MuroorTPUploadsImpl
 * @generated
 */
@JSON(strict = true)
public class MuroorTPUploadsModelImpl
	extends BaseModelImpl<MuroorTPUploads> implements MuroorTPUploadsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a muroor tp uploads model instance should use the <code>MuroorTPUploads</code> interface instead.
	 */
	public static final String TABLE_NAME = "CLM_MUROOR_TP_UPLOADS";

	public static final Object[][] TABLE_COLUMNS = {
		{"FILE_ID", Types.INTEGER}, {"CLM_INTM_NO", Types.VARCHAR},
		{"IQAMA_ID", Types.VARCHAR}, {"DRIVER_LICENSE", Types.BLOB},
		{"DRIVER_LICENSE_NAME", Types.VARCHAR},
		{"VEH_REGISTRATION", Types.BLOB},
		{"VEH_REGISTRATION_NAME", Types.VARCHAR}, {"FRONT_PHOTO", Types.BLOB},
		{"FRONT_PHOTO_NAME", Types.VARCHAR}, {"RARE_PHOTO", Types.BLOB},
		{"RARE_PHOTO_NAME", Types.VARCHAR}, {"RIGHT_SIDE_PHOTO", Types.BLOB},
		{"RIGHT_SIDE_PHOTO_NAME", Types.VARCHAR},
		{"LEFT_SIDE_PHOTO", Types.BLOB},
		{"LEFT_SIDE_PHOTO_NAME", Types.VARCHAR}, {"BANK_IBAN_COPY", Types.BLOB},
		{"BANK_IBAN_COPY_NAME", Types.VARCHAR}, {"OWNER_ID", Types.BLOB},
		{"OWNER_ID_NAME", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FILE_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CLM_INTM_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IQAMA_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_LICENSE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("DRIVER_LICENSE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEH_REGISTRATION", Types.BLOB);
		TABLE_COLUMNS_MAP.put("VEH_REGISTRATION_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FRONT_PHOTO", Types.BLOB);
		TABLE_COLUMNS_MAP.put("FRONT_PHOTO_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RARE_PHOTO", Types.BLOB);
		TABLE_COLUMNS_MAP.put("RARE_PHOTO_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RIGHT_SIDE_PHOTO", Types.BLOB);
		TABLE_COLUMNS_MAP.put("RIGHT_SIDE_PHOTO_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LEFT_SIDE_PHOTO", Types.BLOB);
		TABLE_COLUMNS_MAP.put("LEFT_SIDE_PHOTO_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BANK_IBAN_COPY", Types.BLOB);
		TABLE_COLUMNS_MAP.put("BANK_IBAN_COPY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OWNER_ID", Types.BLOB);
		TABLE_COLUMNS_MAP.put("OWNER_ID_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CLM_MUROOR_TP_UPLOADS (FILE_ID INTEGER not null primary key,CLM_INTM_NO VARCHAR(75) null,IQAMA_ID VARCHAR(75) null,DRIVER_LICENSE BLOB,DRIVER_LICENSE_NAME VARCHAR(75) null,VEH_REGISTRATION BLOB,VEH_REGISTRATION_NAME VARCHAR(75) null,FRONT_PHOTO BLOB,FRONT_PHOTO_NAME VARCHAR(75) null,RARE_PHOTO BLOB,RARE_PHOTO_NAME VARCHAR(75) null,RIGHT_SIDE_PHOTO BLOB,RIGHT_SIDE_PHOTO_NAME VARCHAR(75) null,LEFT_SIDE_PHOTO BLOB,LEFT_SIDE_PHOTO_NAME VARCHAR(75) null,BANK_IBAN_COPY BLOB,BANK_IBAN_COPY_NAME VARCHAR(75) null,OWNER_ID BLOB,OWNER_ID_NAME VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table CLM_MUROOR_TP_UPLOADS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY muroorTPUploads.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CLM_MUROOR_TP_UPLOADS.FILE_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CLAIMINTIMATIONNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static MuroorTPUploads toModel(MuroorTPUploadsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MuroorTPUploads model = new MuroorTPUploadsImpl();

		model.setId(soapModel.getId());
		model.setClaimIntimationNo(soapModel.getClaimIntimationNo());
		model.setIqamaId(soapModel.getIqamaId());
		model.setDriverLicense(soapModel.getDriverLicense());
		model.setDriverLicenseName(soapModel.getDriverLicenseName());
		model.setVehRegist(soapModel.getVehRegist());
		model.setVehRegistName(soapModel.getVehRegistName());
		model.setFrontPhoto(soapModel.getFrontPhoto());
		model.setFrontPhotoName(soapModel.getFrontPhotoName());
		model.setRearPhoto(soapModel.getRearPhoto());
		model.setRearPhotoName(soapModel.getRearPhotoName());
		model.setRightSidePhoto(soapModel.getRightSidePhoto());
		model.setRightSidePhotoName(soapModel.getRightSidePhotoName());
		model.setLeftSidePhoto(soapModel.getLeftSidePhoto());
		model.setLeftSidePhotoName(soapModel.getLeftSidePhotoName());
		model.setBankIban(soapModel.getBankIban());
		model.setBankIbanName(soapModel.getBankIbanName());
		model.setOwnerId(soapModel.getOwnerId());
		model.setOwnerIdName(soapModel.getOwnerIdName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<MuroorTPUploads> toModels(
		MuroorTPUploadsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<MuroorTPUploads> models = new ArrayList<MuroorTPUploads>(
			soapModels.length);

		for (MuroorTPUploadsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MuroorTPUploadsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MuroorTPUploads.class;
	}

	@Override
	public String getModelClassName() {
		return MuroorTPUploads.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MuroorTPUploads, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MuroorTPUploads, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MuroorTPUploads, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MuroorTPUploads)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MuroorTPUploads, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MuroorTPUploads, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MuroorTPUploads)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MuroorTPUploads, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MuroorTPUploads, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MuroorTPUploads>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MuroorTPUploads.class.getClassLoader(), MuroorTPUploads.class,
			ModelWrapper.class);

		try {
			Constructor<MuroorTPUploads> constructor =
				(Constructor<MuroorTPUploads>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MuroorTPUploads, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MuroorTPUploads, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MuroorTPUploads, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<MuroorTPUploads, Object>>();
		Map<String, BiConsumer<MuroorTPUploads, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MuroorTPUploads, ?>>();

		attributeGetterFunctions.put("id", MuroorTPUploads::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<MuroorTPUploads, Integer>)MuroorTPUploads::setId);
		attributeGetterFunctions.put(
			"claimIntimationNo", MuroorTPUploads::getClaimIntimationNo);
		attributeSetterBiConsumers.put(
			"claimIntimationNo",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setClaimIntimationNo);
		attributeGetterFunctions.put("iqamaId", MuroorTPUploads::getIqamaId);
		attributeSetterBiConsumers.put(
			"iqamaId",
			(BiConsumer<MuroorTPUploads, String>)MuroorTPUploads::setIqamaId);
		attributeGetterFunctions.put(
			"driverLicense", MuroorTPUploads::getDriverLicense);
		attributeSetterBiConsumers.put(
			"driverLicense",
			(BiConsumer<MuroorTPUploads, Blob>)
				MuroorTPUploads::setDriverLicense);
		attributeGetterFunctions.put(
			"driverLicenseName", MuroorTPUploads::getDriverLicenseName);
		attributeSetterBiConsumers.put(
			"driverLicenseName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setDriverLicenseName);
		attributeGetterFunctions.put(
			"vehRegist", MuroorTPUploads::getVehRegist);
		attributeSetterBiConsumers.put(
			"vehRegist",
			(BiConsumer<MuroorTPUploads, Blob>)MuroorTPUploads::setVehRegist);
		attributeGetterFunctions.put(
			"vehRegistName", MuroorTPUploads::getVehRegistName);
		attributeSetterBiConsumers.put(
			"vehRegistName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setVehRegistName);
		attributeGetterFunctions.put(
			"frontPhoto", MuroorTPUploads::getFrontPhoto);
		attributeSetterBiConsumers.put(
			"frontPhoto",
			(BiConsumer<MuroorTPUploads, Blob>)MuroorTPUploads::setFrontPhoto);
		attributeGetterFunctions.put(
			"frontPhotoName", MuroorTPUploads::getFrontPhotoName);
		attributeSetterBiConsumers.put(
			"frontPhotoName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setFrontPhotoName);
		attributeGetterFunctions.put(
			"rearPhoto", MuroorTPUploads::getRearPhoto);
		attributeSetterBiConsumers.put(
			"rearPhoto",
			(BiConsumer<MuroorTPUploads, Blob>)MuroorTPUploads::setRearPhoto);
		attributeGetterFunctions.put(
			"rearPhotoName", MuroorTPUploads::getRearPhotoName);
		attributeSetterBiConsumers.put(
			"rearPhotoName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setRearPhotoName);
		attributeGetterFunctions.put(
			"rightSidePhoto", MuroorTPUploads::getRightSidePhoto);
		attributeSetterBiConsumers.put(
			"rightSidePhoto",
			(BiConsumer<MuroorTPUploads, Blob>)
				MuroorTPUploads::setRightSidePhoto);
		attributeGetterFunctions.put(
			"rightSidePhotoName", MuroorTPUploads::getRightSidePhotoName);
		attributeSetterBiConsumers.put(
			"rightSidePhotoName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setRightSidePhotoName);
		attributeGetterFunctions.put(
			"leftSidePhoto", MuroorTPUploads::getLeftSidePhoto);
		attributeSetterBiConsumers.put(
			"leftSidePhoto",
			(BiConsumer<MuroorTPUploads, Blob>)
				MuroorTPUploads::setLeftSidePhoto);
		attributeGetterFunctions.put(
			"leftSidePhotoName", MuroorTPUploads::getLeftSidePhotoName);
		attributeSetterBiConsumers.put(
			"leftSidePhotoName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setLeftSidePhotoName);
		attributeGetterFunctions.put("bankIban", MuroorTPUploads::getBankIban);
		attributeSetterBiConsumers.put(
			"bankIban",
			(BiConsumer<MuroorTPUploads, Blob>)MuroorTPUploads::setBankIban);
		attributeGetterFunctions.put(
			"bankIbanName", MuroorTPUploads::getBankIbanName);
		attributeSetterBiConsumers.put(
			"bankIbanName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setBankIbanName);
		attributeGetterFunctions.put("ownerId", MuroorTPUploads::getOwnerId);
		attributeSetterBiConsumers.put(
			"ownerId",
			(BiConsumer<MuroorTPUploads, Blob>)MuroorTPUploads::setOwnerId);
		attributeGetterFunctions.put(
			"ownerIdName", MuroorTPUploads::getOwnerIdName);
		attributeSetterBiConsumers.put(
			"ownerIdName",
			(BiConsumer<MuroorTPUploads, String>)
				MuroorTPUploads::setOwnerIdName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public String getClaimIntimationNo() {
		if (_claimIntimationNo == null) {
			return "";
		}
		else {
			return _claimIntimationNo;
		}
	}

	@Override
	public void setClaimIntimationNo(String claimIntimationNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimIntimationNo = claimIntimationNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalClaimIntimationNo() {
		return getColumnOriginalValue("CLM_INTM_NO");
	}

	@JSON
	@Override
	public String getIqamaId() {
		if (_iqamaId == null) {
			return "";
		}
		else {
			return _iqamaId;
		}
	}

	@Override
	public void setIqamaId(String iqamaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_iqamaId = iqamaId;
	}

	@JSON
	@Override
	public Blob getDriverLicense() {
		if (_driverLicenseBlobModel == null) {
			try {
				_driverLicenseBlobModel =
					MuroorTPUploadsLocalServiceUtil.getDriverLicenseBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_driverLicenseBlobModel != null) {
			blob = _driverLicenseBlobModel.getDriverLicenseBlob();
		}

		return blob;
	}

	@Override
	public void setDriverLicense(Blob driverLicense) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_driverLicenseBlobModel == null) {
			_driverLicenseBlobModel = new MuroorTPUploadsDriverLicenseBlobModel(
				getPrimaryKey(), driverLicense);
		}
		else {
			_driverLicenseBlobModel.setDriverLicenseBlob(driverLicense);
		}
	}

	@JSON
	@Override
	public String getDriverLicenseName() {
		if (_driverLicenseName == null) {
			return "";
		}
		else {
			return _driverLicenseName;
		}
	}

	@Override
	public void setDriverLicenseName(String driverLicenseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverLicenseName = driverLicenseName;
	}

	@JSON
	@Override
	public Blob getVehRegist() {
		if (_vehRegistBlobModel == null) {
			try {
				_vehRegistBlobModel =
					MuroorTPUploadsLocalServiceUtil.getVehRegistBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_vehRegistBlobModel != null) {
			blob = _vehRegistBlobModel.getVehRegistBlob();
		}

		return blob;
	}

	@Override
	public void setVehRegist(Blob vehRegist) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_vehRegistBlobModel == null) {
			_vehRegistBlobModel = new MuroorTPUploadsVehRegistBlobModel(
				getPrimaryKey(), vehRegist);
		}
		else {
			_vehRegistBlobModel.setVehRegistBlob(vehRegist);
		}
	}

	@JSON
	@Override
	public String getVehRegistName() {
		if (_vehRegistName == null) {
			return "";
		}
		else {
			return _vehRegistName;
		}
	}

	@Override
	public void setVehRegistName(String vehRegistName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehRegistName = vehRegistName;
	}

	@JSON
	@Override
	public Blob getFrontPhoto() {
		if (_frontPhotoBlobModel == null) {
			try {
				_frontPhotoBlobModel =
					MuroorTPUploadsLocalServiceUtil.getFrontPhotoBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_frontPhotoBlobModel != null) {
			blob = _frontPhotoBlobModel.getFrontPhotoBlob();
		}

		return blob;
	}

	@Override
	public void setFrontPhoto(Blob frontPhoto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_frontPhotoBlobModel == null) {
			_frontPhotoBlobModel = new MuroorTPUploadsFrontPhotoBlobModel(
				getPrimaryKey(), frontPhoto);
		}
		else {
			_frontPhotoBlobModel.setFrontPhotoBlob(frontPhoto);
		}
	}

	@JSON
	@Override
	public String getFrontPhotoName() {
		if (_frontPhotoName == null) {
			return "";
		}
		else {
			return _frontPhotoName;
		}
	}

	@Override
	public void setFrontPhotoName(String frontPhotoName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_frontPhotoName = frontPhotoName;
	}

	@JSON
	@Override
	public Blob getRearPhoto() {
		if (_rearPhotoBlobModel == null) {
			try {
				_rearPhotoBlobModel =
					MuroorTPUploadsLocalServiceUtil.getRearPhotoBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_rearPhotoBlobModel != null) {
			blob = _rearPhotoBlobModel.getRearPhotoBlob();
		}

		return blob;
	}

	@Override
	public void setRearPhoto(Blob rearPhoto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_rearPhotoBlobModel == null) {
			_rearPhotoBlobModel = new MuroorTPUploadsRearPhotoBlobModel(
				getPrimaryKey(), rearPhoto);
		}
		else {
			_rearPhotoBlobModel.setRearPhotoBlob(rearPhoto);
		}
	}

	@JSON
	@Override
	public String getRearPhotoName() {
		if (_rearPhotoName == null) {
			return "";
		}
		else {
			return _rearPhotoName;
		}
	}

	@Override
	public void setRearPhotoName(String rearPhotoName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rearPhotoName = rearPhotoName;
	}

	@JSON
	@Override
	public Blob getRightSidePhoto() {
		if (_rightSidePhotoBlobModel == null) {
			try {
				_rightSidePhotoBlobModel =
					MuroorTPUploadsLocalServiceUtil.getRightSidePhotoBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_rightSidePhotoBlobModel != null) {
			blob = _rightSidePhotoBlobModel.getRightSidePhotoBlob();
		}

		return blob;
	}

	@Override
	public void setRightSidePhoto(Blob rightSidePhoto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_rightSidePhotoBlobModel == null) {
			_rightSidePhotoBlobModel =
				new MuroorTPUploadsRightSidePhotoBlobModel(
					getPrimaryKey(), rightSidePhoto);
		}
		else {
			_rightSidePhotoBlobModel.setRightSidePhotoBlob(rightSidePhoto);
		}
	}

	@JSON
	@Override
	public String getRightSidePhotoName() {
		if (_rightSidePhotoName == null) {
			return "";
		}
		else {
			return _rightSidePhotoName;
		}
	}

	@Override
	public void setRightSidePhotoName(String rightSidePhotoName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rightSidePhotoName = rightSidePhotoName;
	}

	@JSON
	@Override
	public Blob getLeftSidePhoto() {
		if (_leftSidePhotoBlobModel == null) {
			try {
				_leftSidePhotoBlobModel =
					MuroorTPUploadsLocalServiceUtil.getLeftSidePhotoBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_leftSidePhotoBlobModel != null) {
			blob = _leftSidePhotoBlobModel.getLeftSidePhotoBlob();
		}

		return blob;
	}

	@Override
	public void setLeftSidePhoto(Blob leftSidePhoto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_leftSidePhotoBlobModel == null) {
			_leftSidePhotoBlobModel = new MuroorTPUploadsLeftSidePhotoBlobModel(
				getPrimaryKey(), leftSidePhoto);
		}
		else {
			_leftSidePhotoBlobModel.setLeftSidePhotoBlob(leftSidePhoto);
		}
	}

	@JSON
	@Override
	public String getLeftSidePhotoName() {
		if (_leftSidePhotoName == null) {
			return "";
		}
		else {
			return _leftSidePhotoName;
		}
	}

	@Override
	public void setLeftSidePhotoName(String leftSidePhotoName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leftSidePhotoName = leftSidePhotoName;
	}

	@JSON
	@Override
	public Blob getBankIban() {
		if (_bankIbanBlobModel == null) {
			try {
				_bankIbanBlobModel =
					MuroorTPUploadsLocalServiceUtil.getBankIbanBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_bankIbanBlobModel != null) {
			blob = _bankIbanBlobModel.getBankIbanBlob();
		}

		return blob;
	}

	@Override
	public void setBankIban(Blob bankIban) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_bankIbanBlobModel == null) {
			_bankIbanBlobModel = new MuroorTPUploadsBankIbanBlobModel(
				getPrimaryKey(), bankIban);
		}
		else {
			_bankIbanBlobModel.setBankIbanBlob(bankIban);
		}
	}

	@JSON
	@Override
	public String getBankIbanName() {
		if (_bankIbanName == null) {
			return "";
		}
		else {
			return _bankIbanName;
		}
	}

	@Override
	public void setBankIbanName(String bankIbanName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankIbanName = bankIbanName;
	}

	@JSON
	@Override
	public Blob getOwnerId() {
		if (_ownerIdBlobModel == null) {
			try {
				_ownerIdBlobModel =
					MuroorTPUploadsLocalServiceUtil.getOwnerIdBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_ownerIdBlobModel != null) {
			blob = _ownerIdBlobModel.getOwnerIdBlob();
		}

		return blob;
	}

	@Override
	public void setOwnerId(Blob ownerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_ownerIdBlobModel == null) {
			_ownerIdBlobModel = new MuroorTPUploadsOwnerIdBlobModel(
				getPrimaryKey(), ownerId);
		}
		else {
			_ownerIdBlobModel.setOwnerIdBlob(ownerId);
		}
	}

	@JSON
	@Override
	public String getOwnerIdName() {
		if (_ownerIdName == null) {
			return "";
		}
		else {
			return _ownerIdName;
		}
	}

	@Override
	public void setOwnerIdName(String ownerIdName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerIdName = ownerIdName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public MuroorTPUploads toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MuroorTPUploads>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MuroorTPUploadsImpl muroorTPUploadsImpl = new MuroorTPUploadsImpl();

		muroorTPUploadsImpl.setId(getId());
		muroorTPUploadsImpl.setClaimIntimationNo(getClaimIntimationNo());
		muroorTPUploadsImpl.setIqamaId(getIqamaId());
		muroorTPUploadsImpl.setDriverLicenseName(getDriverLicenseName());
		muroorTPUploadsImpl.setVehRegistName(getVehRegistName());
		muroorTPUploadsImpl.setFrontPhotoName(getFrontPhotoName());
		muroorTPUploadsImpl.setRearPhotoName(getRearPhotoName());
		muroorTPUploadsImpl.setRightSidePhotoName(getRightSidePhotoName());
		muroorTPUploadsImpl.setLeftSidePhotoName(getLeftSidePhotoName());
		muroorTPUploadsImpl.setBankIbanName(getBankIbanName());
		muroorTPUploadsImpl.setOwnerIdName(getOwnerIdName());

		muroorTPUploadsImpl.resetOriginalValues();

		return muroorTPUploadsImpl;
	}

	@Override
	public int compareTo(MuroorTPUploads muroorTPUploads) {
		int primaryKey = muroorTPUploads.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MuroorTPUploads)) {
			return false;
		}

		MuroorTPUploads muroorTPUploads = (MuroorTPUploads)object;

		int primaryKey = muroorTPUploads.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_driverLicenseBlobModel = null;

		_vehRegistBlobModel = null;

		_frontPhotoBlobModel = null;

		_rearPhotoBlobModel = null;

		_rightSidePhotoBlobModel = null;

		_leftSidePhotoBlobModel = null;

		_bankIbanBlobModel = null;

		_ownerIdBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MuroorTPUploads> toCacheModel() {
		MuroorTPUploadsCacheModel muroorTPUploadsCacheModel =
			new MuroorTPUploadsCacheModel();

		muroorTPUploadsCacheModel.id = getId();

		muroorTPUploadsCacheModel.claimIntimationNo = getClaimIntimationNo();

		String claimIntimationNo = muroorTPUploadsCacheModel.claimIntimationNo;

		if ((claimIntimationNo != null) && (claimIntimationNo.length() == 0)) {
			muroorTPUploadsCacheModel.claimIntimationNo = null;
		}

		muroorTPUploadsCacheModel.iqamaId = getIqamaId();

		String iqamaId = muroorTPUploadsCacheModel.iqamaId;

		if ((iqamaId != null) && (iqamaId.length() == 0)) {
			muroorTPUploadsCacheModel.iqamaId = null;
		}

		muroorTPUploadsCacheModel.driverLicenseName = getDriverLicenseName();

		String driverLicenseName = muroorTPUploadsCacheModel.driverLicenseName;

		if ((driverLicenseName != null) && (driverLicenseName.length() == 0)) {
			muroorTPUploadsCacheModel.driverLicenseName = null;
		}

		muroorTPUploadsCacheModel.vehRegistName = getVehRegistName();

		String vehRegistName = muroorTPUploadsCacheModel.vehRegistName;

		if ((vehRegistName != null) && (vehRegistName.length() == 0)) {
			muroorTPUploadsCacheModel.vehRegistName = null;
		}

		muroorTPUploadsCacheModel.frontPhotoName = getFrontPhotoName();

		String frontPhotoName = muroorTPUploadsCacheModel.frontPhotoName;

		if ((frontPhotoName != null) && (frontPhotoName.length() == 0)) {
			muroorTPUploadsCacheModel.frontPhotoName = null;
		}

		muroorTPUploadsCacheModel.rearPhotoName = getRearPhotoName();

		String rearPhotoName = muroorTPUploadsCacheModel.rearPhotoName;

		if ((rearPhotoName != null) && (rearPhotoName.length() == 0)) {
			muroorTPUploadsCacheModel.rearPhotoName = null;
		}

		muroorTPUploadsCacheModel.rightSidePhotoName = getRightSidePhotoName();

		String rightSidePhotoName =
			muroorTPUploadsCacheModel.rightSidePhotoName;

		if ((rightSidePhotoName != null) &&
			(rightSidePhotoName.length() == 0)) {

			muroorTPUploadsCacheModel.rightSidePhotoName = null;
		}

		muroorTPUploadsCacheModel.leftSidePhotoName = getLeftSidePhotoName();

		String leftSidePhotoName = muroorTPUploadsCacheModel.leftSidePhotoName;

		if ((leftSidePhotoName != null) && (leftSidePhotoName.length() == 0)) {
			muroorTPUploadsCacheModel.leftSidePhotoName = null;
		}

		muroorTPUploadsCacheModel.bankIbanName = getBankIbanName();

		String bankIbanName = muroorTPUploadsCacheModel.bankIbanName;

		if ((bankIbanName != null) && (bankIbanName.length() == 0)) {
			muroorTPUploadsCacheModel.bankIbanName = null;
		}

		muroorTPUploadsCacheModel.ownerIdName = getOwnerIdName();

		String ownerIdName = muroorTPUploadsCacheModel.ownerIdName;

		if ((ownerIdName != null) && (ownerIdName.length() == 0)) {
			muroorTPUploadsCacheModel.ownerIdName = null;
		}

		return muroorTPUploadsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", claimIntimationNo=");
		sb.append(getClaimIntimationNo());
		sb.append(", iqamaId=");
		sb.append(getIqamaId());
		sb.append(", driverLicenseName=");
		sb.append(getDriverLicenseName());
		sb.append(", vehRegistName=");
		sb.append(getVehRegistName());
		sb.append(", frontPhotoName=");
		sb.append(getFrontPhotoName());
		sb.append(", rearPhotoName=");
		sb.append(getRearPhotoName());
		sb.append(", rightSidePhotoName=");
		sb.append(getRightSidePhotoName());
		sb.append(", leftSidePhotoName=");
		sb.append(getLeftSidePhotoName());
		sb.append(", bankIbanName=");
		sb.append(getBankIbanName());
		sb.append(", ownerIdName=");
		sb.append(getOwnerIdName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.MuroorTPUploads");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>claimIntimationNo</column-name><column-value><![CDATA[");
		sb.append(getClaimIntimationNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iqamaId</column-name><column-value><![CDATA[");
		sb.append(getIqamaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverLicenseName</column-name><column-value><![CDATA[");
		sb.append(getDriverLicenseName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehRegistName</column-name><column-value><![CDATA[");
		sb.append(getVehRegistName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frontPhotoName</column-name><column-value><![CDATA[");
		sb.append(getFrontPhotoName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rearPhotoName</column-name><column-value><![CDATA[");
		sb.append(getRearPhotoName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rightSidePhotoName</column-name><column-value><![CDATA[");
		sb.append(getRightSidePhotoName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leftSidePhotoName</column-name><column-value><![CDATA[");
		sb.append(getLeftSidePhotoName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bankIbanName</column-name><column-value><![CDATA[");
		sb.append(getBankIbanName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerIdName</column-name><column-value><![CDATA[");
		sb.append(getOwnerIdName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MuroorTPUploads>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private int _id;
	private String _claimIntimationNo;
	private String _iqamaId;
	private MuroorTPUploadsDriverLicenseBlobModel _driverLicenseBlobModel;
	private String _driverLicenseName;
	private MuroorTPUploadsVehRegistBlobModel _vehRegistBlobModel;
	private String _vehRegistName;
	private MuroorTPUploadsFrontPhotoBlobModel _frontPhotoBlobModel;
	private String _frontPhotoName;
	private MuroorTPUploadsRearPhotoBlobModel _rearPhotoBlobModel;
	private String _rearPhotoName;
	private MuroorTPUploadsRightSidePhotoBlobModel _rightSidePhotoBlobModel;
	private String _rightSidePhotoName;
	private MuroorTPUploadsLeftSidePhotoBlobModel _leftSidePhotoBlobModel;
	private String _leftSidePhotoName;
	private MuroorTPUploadsBankIbanBlobModel _bankIbanBlobModel;
	private String _bankIbanName;
	private MuroorTPUploadsOwnerIdBlobModel _ownerIdBlobModel;
	private String _ownerIdName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MuroorTPUploads, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MuroorTPUploads)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("FILE_ID", _id);
		_columnOriginalValues.put("CLM_INTM_NO", _claimIntimationNo);
		_columnOriginalValues.put("IQAMA_ID", _iqamaId);
		_columnOriginalValues.put("DRIVER_LICENSE_NAME", _driverLicenseName);
		_columnOriginalValues.put("VEH_REGISTRATION_NAME", _vehRegistName);
		_columnOriginalValues.put("FRONT_PHOTO_NAME", _frontPhotoName);
		_columnOriginalValues.put("RARE_PHOTO_NAME", _rearPhotoName);
		_columnOriginalValues.put("RIGHT_SIDE_PHOTO_NAME", _rightSidePhotoName);
		_columnOriginalValues.put("LEFT_SIDE_PHOTO_NAME", _leftSidePhotoName);
		_columnOriginalValues.put("BANK_IBAN_COPY_NAME", _bankIbanName);
		_columnOriginalValues.put("OWNER_ID_NAME", _ownerIdName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("FILE_ID", "id");
		attributeNames.put("CLM_INTM_NO", "claimIntimationNo");
		attributeNames.put("IQAMA_ID", "iqamaId");
		attributeNames.put("DRIVER_LICENSE", "driverLicense");
		attributeNames.put("DRIVER_LICENSE_NAME", "driverLicenseName");
		attributeNames.put("VEH_REGISTRATION", "vehRegist");
		attributeNames.put("VEH_REGISTRATION_NAME", "vehRegistName");
		attributeNames.put("FRONT_PHOTO", "frontPhoto");
		attributeNames.put("FRONT_PHOTO_NAME", "frontPhotoName");
		attributeNames.put("RARE_PHOTO", "rearPhoto");
		attributeNames.put("RARE_PHOTO_NAME", "rearPhotoName");
		attributeNames.put("RIGHT_SIDE_PHOTO", "rightSidePhoto");
		attributeNames.put("RIGHT_SIDE_PHOTO_NAME", "rightSidePhotoName");
		attributeNames.put("LEFT_SIDE_PHOTO", "leftSidePhoto");
		attributeNames.put("LEFT_SIDE_PHOTO_NAME", "leftSidePhotoName");
		attributeNames.put("BANK_IBAN_COPY", "bankIban");
		attributeNames.put("BANK_IBAN_COPY_NAME", "bankIbanName");
		attributeNames.put("OWNER_ID", "ownerId");
		attributeNames.put("OWNER_ID_NAME", "ownerIdName");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("FILE_ID", 1L);

		columnBitmasks.put("CLM_INTM_NO", 2L);

		columnBitmasks.put("IQAMA_ID", 4L);

		columnBitmasks.put("DRIVER_LICENSE", 8L);

		columnBitmasks.put("DRIVER_LICENSE_NAME", 16L);

		columnBitmasks.put("VEH_REGISTRATION", 32L);

		columnBitmasks.put("VEH_REGISTRATION_NAME", 64L);

		columnBitmasks.put("FRONT_PHOTO", 128L);

		columnBitmasks.put("FRONT_PHOTO_NAME", 256L);

		columnBitmasks.put("RARE_PHOTO", 512L);

		columnBitmasks.put("RARE_PHOTO_NAME", 1024L);

		columnBitmasks.put("RIGHT_SIDE_PHOTO", 2048L);

		columnBitmasks.put("RIGHT_SIDE_PHOTO_NAME", 4096L);

		columnBitmasks.put("LEFT_SIDE_PHOTO", 8192L);

		columnBitmasks.put("LEFT_SIDE_PHOTO_NAME", 16384L);

		columnBitmasks.put("BANK_IBAN_COPY", 32768L);

		columnBitmasks.put("BANK_IBAN_COPY_NAME", 65536L);

		columnBitmasks.put("OWNER_ID", 131072L);

		columnBitmasks.put("OWNER_ID_NAME", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MuroorTPUploads _escapedModel;

}