/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.PolicyCancelation;
import com.ejada.atmc.acl.db.model.PolicyCancelationIbanImageBlobModel;
import com.ejada.atmc.acl.db.model.PolicyCancelationModel;
import com.ejada.atmc.acl.db.model.PolicyCancelationOtherFileBlobModel;
import com.ejada.atmc.acl.db.model.PolicyCancelationSoap;
import com.ejada.atmc.acl.db.model.PolicyCancelationValidFileBlobModel;
import com.ejada.atmc.acl.db.service.PolicyCancelationLocalServiceUtil;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PolicyCancelation service. Represents a row in the &quot;EJD_POLICY_CANCELLATION &quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PolicyCancelationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyCancelationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PolicyCancelationImpl
 * @generated
 */
@JSON(strict = true)
public class PolicyCancelationModelImpl
	extends BaseModelImpl<PolicyCancelation> implements PolicyCancelationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy cancelation model instance should use the <code>PolicyCancelation</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_POLICY_CANCELLATION ";

	public static final Object[][] TABLE_COLUMNS = {
		{"ID", Types.VARCHAR}, {"POLICYNUMBER", Types.VARCHAR},
		{"POLICYEXPIRYDATE", Types.TIMESTAMP}, {"INSUREDID", Types.VARCHAR},
		{"INSUREDNAME", Types.VARCHAR}, {"VEHICLESEQ", Types.VARCHAR},
		{"CHESSISNUMBER", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"CANCELLATIONREQDATE", Types.TIMESTAMP},
		{"CANCELLATIONREASON", Types.VARCHAR},
		{"SERVICE_MESSAGE", Types.VARCHAR},
		{"CANCELLATIONEFFDATE", Types.TIMESTAMP}, {"IBANFILE", Types.BLOB},
		{"VALIDFILE", Types.BLOB}, {"OTHERFILE", Types.BLOB},
		{"VEHMAKE", Types.VARCHAR}, {"VEHMODEL", Types.VARCHAR},
		{"PLATE_NUMBER", Types.VARCHAR}, {"ANY_ACCIDENT", Types.VARCHAR},
		{"LODGE_CLAIM", Types.VARCHAR}, {"IBAN_FILE_NAME", Types.VARCHAR},
		{"VALID_FILE_NAME", Types.VARCHAR},
		{"POLICY_INCEPTION_DATE", Types.TIMESTAMP},
		{"INSURED_EMAIL", Types.VARCHAR}, {"INSURED_MOBILE", Types.VARCHAR},
		{"REJ_REASON", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICYNUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICYEXPIRYDATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("INSUREDID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSUREDNAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLESEQ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHESSISNUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CANCELLATIONREQDATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CANCELLATIONREASON", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SERVICE_MESSAGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CANCELLATIONEFFDATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("IBANFILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("VALIDFILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("OTHERFILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("VEHMAKE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHMODEL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PLATE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ANY_ACCIDENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LODGE_CLAIM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IBAN_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VALID_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICY_INCEPTION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("INSURED_EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_MOBILE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REJ_REASON", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_POLICY_CANCELLATION  (ID VARCHAR(75) not null primary key,POLICYNUMBER VARCHAR(75) null,POLICYEXPIRYDATE DATE null,INSUREDID VARCHAR(75) null,INSUREDNAME VARCHAR(75) null,VEHICLESEQ VARCHAR(75) null,CHESSISNUMBER VARCHAR(75) null,status VARCHAR(75) null,CANCELLATIONREQDATE DATE null,CANCELLATIONREASON VARCHAR(75) null,SERVICE_MESSAGE VARCHAR(75) null,CANCELLATIONEFFDATE DATE null,IBANFILE BLOB,VALIDFILE BLOB,OTHERFILE BLOB,VEHMAKE VARCHAR(75) null,VEHMODEL VARCHAR(75) null,PLATE_NUMBER VARCHAR(75) null,ANY_ACCIDENT VARCHAR(75) null,LODGE_CLAIM VARCHAR(75) null,IBAN_FILE_NAME VARCHAR(75) null,VALID_FILE_NAME VARCHAR(75) null,POLICY_INCEPTION_DATE DATE null,INSURED_EMAIL VARCHAR(75) null,INSURED_MOBILE VARCHAR(75) null,REJ_REASON VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table EJD_POLICY_CANCELLATION ";

	public static final String ORDER_BY_JPQL =
		" ORDER BY policyCancelation.Id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_POLICY_CANCELLATION .ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long INSUREDID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYNUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static PolicyCancelation toModel(PolicyCancelationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PolicyCancelation model = new PolicyCancelationImpl();

		model.setId(soapModel.getId());
		model.setPolicyNumber(soapModel.getPolicyNumber());
		model.setPolicyExpiryDate(soapModel.getPolicyExpiryDate());
		model.setInsuredId(soapModel.getInsuredId());
		model.setInsuredName(soapModel.getInsuredName());
		model.setVehicleSequence(soapModel.getVehicleSequence());
		model.setVehicleChessisNo(soapModel.getVehicleChessisNo());
		model.setStatus(soapModel.getStatus());
		model.setCancllationReqDate(soapModel.getCancllationReqDate());
		model.setReason(soapModel.getReason());
		model.setServicemessage(soapModel.getServicemessage());
		model.setCancellationEffdate(soapModel.getCancellationEffdate());
		model.setIbanImage(soapModel.getIbanImage());
		model.setValidFile(soapModel.getValidFile());
		model.setOtherFile(soapModel.getOtherFile());
		model.setVehMake(soapModel.getVehMake());
		model.setVehModel(soapModel.getVehModel());
		model.setPlateNumber(soapModel.getPlateNumber());
		model.setAnyAccident(soapModel.getAnyAccident());
		model.setLodgeClaim(soapModel.getLodgeClaim());
		model.setIbanFileName(soapModel.getIbanFileName());
		model.setValidFileName(soapModel.getValidFileName());
		model.setPolicyInceptionDate(soapModel.getPolicyInceptionDate());
		model.setInsuredEmail(soapModel.getInsuredEmail());
		model.setInsuredMobile(soapModel.getInsuredMobile());
		model.setRejReason(soapModel.getRejReason());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<PolicyCancelation> toModels(
		PolicyCancelationSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<PolicyCancelation> models = new ArrayList<PolicyCancelation>(
			soapModels.length);

		for (PolicyCancelationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PolicyCancelationModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PolicyCancelation.class;
	}

	@Override
	public String getModelClassName() {
		return PolicyCancelation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PolicyCancelation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PolicyCancelation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyCancelation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PolicyCancelation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PolicyCancelation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PolicyCancelation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PolicyCancelation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PolicyCancelation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PolicyCancelation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PolicyCancelation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PolicyCancelation.class.getClassLoader(), PolicyCancelation.class,
			ModelWrapper.class);

		try {
			Constructor<PolicyCancelation> constructor =
				(Constructor<PolicyCancelation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PolicyCancelation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PolicyCancelation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PolicyCancelation, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<PolicyCancelation, Object>>();
		Map<String, BiConsumer<PolicyCancelation, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<PolicyCancelation, ?>>();

		attributeGetterFunctions.put("Id", PolicyCancelation::getId);
		attributeSetterBiConsumers.put(
			"Id",
			(BiConsumer<PolicyCancelation, String>)PolicyCancelation::setId);
		attributeGetterFunctions.put(
			"policyNumber", PolicyCancelation::getPolicyNumber);
		attributeSetterBiConsumers.put(
			"policyNumber",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setPolicyNumber);
		attributeGetterFunctions.put(
			"policyExpiryDate", PolicyCancelation::getPolicyExpiryDate);
		attributeSetterBiConsumers.put(
			"policyExpiryDate",
			(BiConsumer<PolicyCancelation, Date>)
				PolicyCancelation::setPolicyExpiryDate);
		attributeGetterFunctions.put(
			"insuredId", PolicyCancelation::getInsuredId);
		attributeSetterBiConsumers.put(
			"insuredId",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setInsuredId);
		attributeGetterFunctions.put(
			"insuredName", PolicyCancelation::getInsuredName);
		attributeSetterBiConsumers.put(
			"insuredName",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setInsuredName);
		attributeGetterFunctions.put(
			"vehicleSequence", PolicyCancelation::getVehicleSequence);
		attributeSetterBiConsumers.put(
			"vehicleSequence",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setVehicleSequence);
		attributeGetterFunctions.put(
			"vehicleChessisNo", PolicyCancelation::getVehicleChessisNo);
		attributeSetterBiConsumers.put(
			"vehicleChessisNo",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setVehicleChessisNo);
		attributeGetterFunctions.put("status", PolicyCancelation::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setStatus);
		attributeGetterFunctions.put(
			"cancllationReqDate", PolicyCancelation::getCancllationReqDate);
		attributeSetterBiConsumers.put(
			"cancllationReqDate",
			(BiConsumer<PolicyCancelation, Date>)
				PolicyCancelation::setCancllationReqDate);
		attributeGetterFunctions.put("reason", PolicyCancelation::getReason);
		attributeSetterBiConsumers.put(
			"reason",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setReason);
		attributeGetterFunctions.put(
			"servicemessage", PolicyCancelation::getServicemessage);
		attributeSetterBiConsumers.put(
			"servicemessage",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setServicemessage);
		attributeGetterFunctions.put(
			"cancellationEffdate", PolicyCancelation::getCancellationEffdate);
		attributeSetterBiConsumers.put(
			"cancellationEffdate",
			(BiConsumer<PolicyCancelation, Date>)
				PolicyCancelation::setCancellationEffdate);
		attributeGetterFunctions.put(
			"ibanImage", PolicyCancelation::getIbanImage);
		attributeSetterBiConsumers.put(
			"ibanImage",
			(BiConsumer<PolicyCancelation, Blob>)
				PolicyCancelation::setIbanImage);
		attributeGetterFunctions.put(
			"validFile", PolicyCancelation::getValidFile);
		attributeSetterBiConsumers.put(
			"validFile",
			(BiConsumer<PolicyCancelation, Blob>)
				PolicyCancelation::setValidFile);
		attributeGetterFunctions.put(
			"otherFile", PolicyCancelation::getOtherFile);
		attributeSetterBiConsumers.put(
			"otherFile",
			(BiConsumer<PolicyCancelation, Blob>)
				PolicyCancelation::setOtherFile);
		attributeGetterFunctions.put("vehMake", PolicyCancelation::getVehMake);
		attributeSetterBiConsumers.put(
			"vehMake",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setVehMake);
		attributeGetterFunctions.put(
			"vehModel", PolicyCancelation::getVehModel);
		attributeSetterBiConsumers.put(
			"vehModel",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setVehModel);
		attributeGetterFunctions.put(
			"plateNumber", PolicyCancelation::getPlateNumber);
		attributeSetterBiConsumers.put(
			"plateNumber",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setPlateNumber);
		attributeGetterFunctions.put(
			"anyAccident", PolicyCancelation::getAnyAccident);
		attributeSetterBiConsumers.put(
			"anyAccident",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setAnyAccident);
		attributeGetterFunctions.put(
			"lodgeClaim", PolicyCancelation::getLodgeClaim);
		attributeSetterBiConsumers.put(
			"lodgeClaim",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setLodgeClaim);
		attributeGetterFunctions.put(
			"ibanFileName", PolicyCancelation::getIbanFileName);
		attributeSetterBiConsumers.put(
			"ibanFileName",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setIbanFileName);
		attributeGetterFunctions.put(
			"validFileName", PolicyCancelation::getValidFileName);
		attributeSetterBiConsumers.put(
			"validFileName",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setValidFileName);
		attributeGetterFunctions.put(
			"policyInceptionDate", PolicyCancelation::getPolicyInceptionDate);
		attributeSetterBiConsumers.put(
			"policyInceptionDate",
			(BiConsumer<PolicyCancelation, Date>)
				PolicyCancelation::setPolicyInceptionDate);
		attributeGetterFunctions.put(
			"insuredEmail", PolicyCancelation::getInsuredEmail);
		attributeSetterBiConsumers.put(
			"insuredEmail",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setInsuredEmail);
		attributeGetterFunctions.put(
			"insuredMobile", PolicyCancelation::getInsuredMobile);
		attributeSetterBiConsumers.put(
			"insuredMobile",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setInsuredMobile);
		attributeGetterFunctions.put(
			"rejReason", PolicyCancelation::getRejReason);
		attributeSetterBiConsumers.put(
			"rejReason",
			(BiConsumer<PolicyCancelation, String>)
				PolicyCancelation::setRejReason);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getId() {
		if (_Id == null) {
			return "";
		}
		else {
			return _Id;
		}
	}

	@Override
	public void setId(String Id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Id = Id;
	}

	@JSON
	@Override
	public String getPolicyNumber() {
		if (_policyNumber == null) {
			return "";
		}
		else {
			return _policyNumber;
		}
	}

	@Override
	public void setPolicyNumber(String policyNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNumber = policyNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPolicyNumber() {
		return getColumnOriginalValue("POLICYNUMBER");
	}

	@JSON
	@Override
	public Date getPolicyExpiryDate() {
		return _policyExpiryDate;
	}

	@Override
	public void setPolicyExpiryDate(Date policyExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyExpiryDate = policyExpiryDate;
	}

	@JSON
	@Override
	public String getInsuredId() {
		if (_insuredId == null) {
			return "";
		}
		else {
			return _insuredId;
		}
	}

	@Override
	public void setInsuredId(String insuredId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredId = insuredId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalInsuredId() {
		return getColumnOriginalValue("INSUREDID");
	}

	@JSON
	@Override
	public String getInsuredName() {
		if (_insuredName == null) {
			return "";
		}
		else {
			return _insuredName;
		}
	}

	@Override
	public void setInsuredName(String insuredName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredName = insuredName;
	}

	@JSON
	@Override
	public String getVehicleSequence() {
		if (_vehicleSequence == null) {
			return "";
		}
		else {
			return _vehicleSequence;
		}
	}

	@Override
	public void setVehicleSequence(String vehicleSequence) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleSequence = vehicleSequence;
	}

	@JSON
	@Override
	public String getVehicleChessisNo() {
		if (_vehicleChessisNo == null) {
			return "";
		}
		else {
			return _vehicleChessisNo;
		}
	}

	@Override
	public void setVehicleChessisNo(String vehicleChessisNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleChessisNo = vehicleChessisNo;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("status");
	}

	@JSON
	@Override
	public Date getCancllationReqDate() {
		return _cancllationReqDate;
	}

	@Override
	public void setCancllationReqDate(Date cancllationReqDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cancllationReqDate = cancllationReqDate;
	}

	@JSON
	@Override
	public String getReason() {
		if (_reason == null) {
			return "";
		}
		else {
			return _reason;
		}
	}

	@Override
	public void setReason(String reason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reason = reason;
	}

	@JSON
	@Override
	public String getServicemessage() {
		if (_servicemessage == null) {
			return "";
		}
		else {
			return _servicemessage;
		}
	}

	@Override
	public void setServicemessage(String servicemessage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_servicemessage = servicemessage;
	}

	@JSON
	@Override
	public Date getCancellationEffdate() {
		return _cancellationEffdate;
	}

	@Override
	public void setCancellationEffdate(Date cancellationEffdate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cancellationEffdate = cancellationEffdate;
	}

	@JSON
	@Override
	public Blob getIbanImage() {
		if (_ibanImageBlobModel == null) {
			try {
				_ibanImageBlobModel =
					PolicyCancelationLocalServiceUtil.getIbanImageBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_ibanImageBlobModel != null) {
			blob = _ibanImageBlobModel.getIbanImageBlob();
		}

		return blob;
	}

	@Override
	public void setIbanImage(Blob ibanImage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_ibanImageBlobModel == null) {
			_ibanImageBlobModel = new PolicyCancelationIbanImageBlobModel(
				getPrimaryKey(), ibanImage);
		}
		else {
			_ibanImageBlobModel.setIbanImageBlob(ibanImage);
		}
	}

	@JSON
	@Override
	public Blob getValidFile() {
		if (_validFileBlobModel == null) {
			try {
				_validFileBlobModel =
					PolicyCancelationLocalServiceUtil.getValidFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_validFileBlobModel != null) {
			blob = _validFileBlobModel.getValidFileBlob();
		}

		return blob;
	}

	@Override
	public void setValidFile(Blob validFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_validFileBlobModel == null) {
			_validFileBlobModel = new PolicyCancelationValidFileBlobModel(
				getPrimaryKey(), validFile);
		}
		else {
			_validFileBlobModel.setValidFileBlob(validFile);
		}
	}

	@JSON
	@Override
	public Blob getOtherFile() {
		if (_otherFileBlobModel == null) {
			try {
				_otherFileBlobModel =
					PolicyCancelationLocalServiceUtil.getOtherFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_otherFileBlobModel != null) {
			blob = _otherFileBlobModel.getOtherFileBlob();
		}

		return blob;
	}

	@Override
	public void setOtherFile(Blob otherFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_otherFileBlobModel == null) {
			_otherFileBlobModel = new PolicyCancelationOtherFileBlobModel(
				getPrimaryKey(), otherFile);
		}
		else {
			_otherFileBlobModel.setOtherFileBlob(otherFile);
		}
	}

	@JSON
	@Override
	public String getVehMake() {
		if (_vehMake == null) {
			return "";
		}
		else {
			return _vehMake;
		}
	}

	@Override
	public void setVehMake(String vehMake) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehMake = vehMake;
	}

	@JSON
	@Override
	public String getVehModel() {
		if (_vehModel == null) {
			return "";
		}
		else {
			return _vehModel;
		}
	}

	@Override
	public void setVehModel(String vehModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehModel = vehModel;
	}

	@JSON
	@Override
	public String getPlateNumber() {
		if (_plateNumber == null) {
			return "";
		}
		else {
			return _plateNumber;
		}
	}

	@Override
	public void setPlateNumber(String plateNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_plateNumber = plateNumber;
	}

	@JSON
	@Override
	public String getAnyAccident() {
		if (_anyAccident == null) {
			return "";
		}
		else {
			return _anyAccident;
		}
	}

	@Override
	public void setAnyAccident(String anyAccident) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_anyAccident = anyAccident;
	}

	@JSON
	@Override
	public String getLodgeClaim() {
		if (_lodgeClaim == null) {
			return "";
		}
		else {
			return _lodgeClaim;
		}
	}

	@Override
	public void setLodgeClaim(String lodgeClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lodgeClaim = lodgeClaim;
	}

	@JSON
	@Override
	public String getIbanFileName() {
		if (_ibanFileName == null) {
			return "";
		}
		else {
			return _ibanFileName;
		}
	}

	@Override
	public void setIbanFileName(String ibanFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ibanFileName = ibanFileName;
	}

	@JSON
	@Override
	public String getValidFileName() {
		if (_validFileName == null) {
			return "";
		}
		else {
			return _validFileName;
		}
	}

	@Override
	public void setValidFileName(String validFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_validFileName = validFileName;
	}

	@JSON
	@Override
	public Date getPolicyInceptionDate() {
		return _policyInceptionDate;
	}

	@Override
	public void setPolicyInceptionDate(Date policyInceptionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyInceptionDate = policyInceptionDate;
	}

	@JSON
	@Override
	public String getInsuredEmail() {
		if (_insuredEmail == null) {
			return "";
		}
		else {
			return _insuredEmail;
		}
	}

	@Override
	public void setInsuredEmail(String insuredEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredEmail = insuredEmail;
	}

	@JSON
	@Override
	public String getInsuredMobile() {
		if (_insuredMobile == null) {
			return "";
		}
		else {
			return _insuredMobile;
		}
	}

	@Override
	public void setInsuredMobile(String insuredMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredMobile = insuredMobile;
	}

	@JSON
	@Override
	public String getRejReason() {
		if (_rejReason == null) {
			return "";
		}
		else {
			return _rejReason;
		}
	}

	@Override
	public void setRejReason(String rejReason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rejReason = rejReason;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public PolicyCancelation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PolicyCancelation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyCancelationImpl policyCancelationImpl =
			new PolicyCancelationImpl();

		policyCancelationImpl.setId(getId());
		policyCancelationImpl.setPolicyNumber(getPolicyNumber());
		policyCancelationImpl.setPolicyExpiryDate(getPolicyExpiryDate());
		policyCancelationImpl.setInsuredId(getInsuredId());
		policyCancelationImpl.setInsuredName(getInsuredName());
		policyCancelationImpl.setVehicleSequence(getVehicleSequence());
		policyCancelationImpl.setVehicleChessisNo(getVehicleChessisNo());
		policyCancelationImpl.setStatus(getStatus());
		policyCancelationImpl.setCancllationReqDate(getCancllationReqDate());
		policyCancelationImpl.setReason(getReason());
		policyCancelationImpl.setServicemessage(getServicemessage());
		policyCancelationImpl.setCancellationEffdate(getCancellationEffdate());
		policyCancelationImpl.setVehMake(getVehMake());
		policyCancelationImpl.setVehModel(getVehModel());
		policyCancelationImpl.setPlateNumber(getPlateNumber());
		policyCancelationImpl.setAnyAccident(getAnyAccident());
		policyCancelationImpl.setLodgeClaim(getLodgeClaim());
		policyCancelationImpl.setIbanFileName(getIbanFileName());
		policyCancelationImpl.setValidFileName(getValidFileName());
		policyCancelationImpl.setPolicyInceptionDate(getPolicyInceptionDate());
		policyCancelationImpl.setInsuredEmail(getInsuredEmail());
		policyCancelationImpl.setInsuredMobile(getInsuredMobile());
		policyCancelationImpl.setRejReason(getRejReason());

		policyCancelationImpl.resetOriginalValues();

		return policyCancelationImpl;
	}

	@Override
	public int compareTo(PolicyCancelation policyCancelation) {
		String primaryKey = policyCancelation.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PolicyCancelation)) {
			return false;
		}

		PolicyCancelation policyCancelation = (PolicyCancelation)object;

		String primaryKey = policyCancelation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_ibanImageBlobModel = null;

		_validFileBlobModel = null;

		_otherFileBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PolicyCancelation> toCacheModel() {
		PolicyCancelationCacheModel policyCancelationCacheModel =
			new PolicyCancelationCacheModel();

		policyCancelationCacheModel.Id = getId();

		String Id = policyCancelationCacheModel.Id;

		if ((Id != null) && (Id.length() == 0)) {
			policyCancelationCacheModel.Id = null;
		}

		policyCancelationCacheModel.policyNumber = getPolicyNumber();

		String policyNumber = policyCancelationCacheModel.policyNumber;

		if ((policyNumber != null) && (policyNumber.length() == 0)) {
			policyCancelationCacheModel.policyNumber = null;
		}

		Date policyExpiryDate = getPolicyExpiryDate();

		if (policyExpiryDate != null) {
			policyCancelationCacheModel.policyExpiryDate =
				policyExpiryDate.getTime();
		}
		else {
			policyCancelationCacheModel.policyExpiryDate = Long.MIN_VALUE;
		}

		policyCancelationCacheModel.insuredId = getInsuredId();

		String insuredId = policyCancelationCacheModel.insuredId;

		if ((insuredId != null) && (insuredId.length() == 0)) {
			policyCancelationCacheModel.insuredId = null;
		}

		policyCancelationCacheModel.insuredName = getInsuredName();

		String insuredName = policyCancelationCacheModel.insuredName;

		if ((insuredName != null) && (insuredName.length() == 0)) {
			policyCancelationCacheModel.insuredName = null;
		}

		policyCancelationCacheModel.vehicleSequence = getVehicleSequence();

		String vehicleSequence = policyCancelationCacheModel.vehicleSequence;

		if ((vehicleSequence != null) && (vehicleSequence.length() == 0)) {
			policyCancelationCacheModel.vehicleSequence = null;
		}

		policyCancelationCacheModel.vehicleChessisNo = getVehicleChessisNo();

		String vehicleChessisNo = policyCancelationCacheModel.vehicleChessisNo;

		if ((vehicleChessisNo != null) && (vehicleChessisNo.length() == 0)) {
			policyCancelationCacheModel.vehicleChessisNo = null;
		}

		policyCancelationCacheModel.status = getStatus();

		String status = policyCancelationCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			policyCancelationCacheModel.status = null;
		}

		Date cancllationReqDate = getCancllationReqDate();

		if (cancllationReqDate != null) {
			policyCancelationCacheModel.cancllationReqDate =
				cancllationReqDate.getTime();
		}
		else {
			policyCancelationCacheModel.cancllationReqDate = Long.MIN_VALUE;
		}

		policyCancelationCacheModel.reason = getReason();

		String reason = policyCancelationCacheModel.reason;

		if ((reason != null) && (reason.length() == 0)) {
			policyCancelationCacheModel.reason = null;
		}

		policyCancelationCacheModel.servicemessage = getServicemessage();

		String servicemessage = policyCancelationCacheModel.servicemessage;

		if ((servicemessage != null) && (servicemessage.length() == 0)) {
			policyCancelationCacheModel.servicemessage = null;
		}

		Date cancellationEffdate = getCancellationEffdate();

		if (cancellationEffdate != null) {
			policyCancelationCacheModel.cancellationEffdate =
				cancellationEffdate.getTime();
		}
		else {
			policyCancelationCacheModel.cancellationEffdate = Long.MIN_VALUE;
		}

		policyCancelationCacheModel.vehMake = getVehMake();

		String vehMake = policyCancelationCacheModel.vehMake;

		if ((vehMake != null) && (vehMake.length() == 0)) {
			policyCancelationCacheModel.vehMake = null;
		}

		policyCancelationCacheModel.vehModel = getVehModel();

		String vehModel = policyCancelationCacheModel.vehModel;

		if ((vehModel != null) && (vehModel.length() == 0)) {
			policyCancelationCacheModel.vehModel = null;
		}

		policyCancelationCacheModel.plateNumber = getPlateNumber();

		String plateNumber = policyCancelationCacheModel.plateNumber;

		if ((plateNumber != null) && (plateNumber.length() == 0)) {
			policyCancelationCacheModel.plateNumber = null;
		}

		policyCancelationCacheModel.anyAccident = getAnyAccident();

		String anyAccident = policyCancelationCacheModel.anyAccident;

		if ((anyAccident != null) && (anyAccident.length() == 0)) {
			policyCancelationCacheModel.anyAccident = null;
		}

		policyCancelationCacheModel.lodgeClaim = getLodgeClaim();

		String lodgeClaim = policyCancelationCacheModel.lodgeClaim;

		if ((lodgeClaim != null) && (lodgeClaim.length() == 0)) {
			policyCancelationCacheModel.lodgeClaim = null;
		}

		policyCancelationCacheModel.ibanFileName = getIbanFileName();

		String ibanFileName = policyCancelationCacheModel.ibanFileName;

		if ((ibanFileName != null) && (ibanFileName.length() == 0)) {
			policyCancelationCacheModel.ibanFileName = null;
		}

		policyCancelationCacheModel.validFileName = getValidFileName();

		String validFileName = policyCancelationCacheModel.validFileName;

		if ((validFileName != null) && (validFileName.length() == 0)) {
			policyCancelationCacheModel.validFileName = null;
		}

		Date policyInceptionDate = getPolicyInceptionDate();

		if (policyInceptionDate != null) {
			policyCancelationCacheModel.policyInceptionDate =
				policyInceptionDate.getTime();
		}
		else {
			policyCancelationCacheModel.policyInceptionDate = Long.MIN_VALUE;
		}

		policyCancelationCacheModel.insuredEmail = getInsuredEmail();

		String insuredEmail = policyCancelationCacheModel.insuredEmail;

		if ((insuredEmail != null) && (insuredEmail.length() == 0)) {
			policyCancelationCacheModel.insuredEmail = null;
		}

		policyCancelationCacheModel.insuredMobile = getInsuredMobile();

		String insuredMobile = policyCancelationCacheModel.insuredMobile;

		if ((insuredMobile != null) && (insuredMobile.length() == 0)) {
			policyCancelationCacheModel.insuredMobile = null;
		}

		policyCancelationCacheModel.rejReason = getRejReason();

		String rejReason = policyCancelationCacheModel.rejReason;

		if ((rejReason != null) && (rejReason.length() == 0)) {
			policyCancelationCacheModel.rejReason = null;
		}

		return policyCancelationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(53);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", policyNumber=");
		sb.append(getPolicyNumber());
		sb.append(", policyExpiryDate=");
		sb.append(getPolicyExpiryDate());
		sb.append(", insuredId=");
		sb.append(getInsuredId());
		sb.append(", insuredName=");
		sb.append(getInsuredName());
		sb.append(", vehicleSequence=");
		sb.append(getVehicleSequence());
		sb.append(", vehicleChessisNo=");
		sb.append(getVehicleChessisNo());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", cancllationReqDate=");
		sb.append(getCancllationReqDate());
		sb.append(", reason=");
		sb.append(getReason());
		sb.append(", servicemessage=");
		sb.append(getServicemessage());
		sb.append(", cancellationEffdate=");
		sb.append(getCancellationEffdate());
		sb.append(", vehMake=");
		sb.append(getVehMake());
		sb.append(", vehModel=");
		sb.append(getVehModel());
		sb.append(", plateNumber=");
		sb.append(getPlateNumber());
		sb.append(", anyAccident=");
		sb.append(getAnyAccident());
		sb.append(", lodgeClaim=");
		sb.append(getLodgeClaim());
		sb.append(", ibanFileName=");
		sb.append(getIbanFileName());
		sb.append(", validFileName=");
		sb.append(getValidFileName());
		sb.append(", policyInceptionDate=");
		sb.append(getPolicyInceptionDate());
		sb.append(", insuredEmail=");
		sb.append(getInsuredEmail());
		sb.append(", insuredMobile=");
		sb.append(getInsuredMobile());
		sb.append(", rejReason=");
		sb.append(getRejReason());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(82);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.PolicyCancelation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>policyNumber</column-name><column-value><![CDATA[");
		sb.append(getPolicyNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>policyExpiryDate</column-name><column-value><![CDATA[");
		sb.append(getPolicyExpiryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredId</column-name><column-value><![CDATA[");
		sb.append(getInsuredId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredName</column-name><column-value><![CDATA[");
		sb.append(getInsuredName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleSequence</column-name><column-value><![CDATA[");
		sb.append(getVehicleSequence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleChessisNo</column-name><column-value><![CDATA[");
		sb.append(getVehicleChessisNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancllationReqDate</column-name><column-value><![CDATA[");
		sb.append(getCancllationReqDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reason</column-name><column-value><![CDATA[");
		sb.append(getReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>servicemessage</column-name><column-value><![CDATA[");
		sb.append(getServicemessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancellationEffdate</column-name><column-value><![CDATA[");
		sb.append(getCancellationEffdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehMake</column-name><column-value><![CDATA[");
		sb.append(getVehMake());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehModel</column-name><column-value><![CDATA[");
		sb.append(getVehModel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>plateNumber</column-name><column-value><![CDATA[");
		sb.append(getPlateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anyAccident</column-name><column-value><![CDATA[");
		sb.append(getAnyAccident());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lodgeClaim</column-name><column-value><![CDATA[");
		sb.append(getLodgeClaim());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ibanFileName</column-name><column-value><![CDATA[");
		sb.append(getIbanFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validFileName</column-name><column-value><![CDATA[");
		sb.append(getValidFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>policyInceptionDate</column-name><column-value><![CDATA[");
		sb.append(getPolicyInceptionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredEmail</column-name><column-value><![CDATA[");
		sb.append(getInsuredEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredMobile</column-name><column-value><![CDATA[");
		sb.append(getInsuredMobile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rejReason</column-name><column-value><![CDATA[");
		sb.append(getRejReason());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PolicyCancelation>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _Id;
	private String _policyNumber;
	private Date _policyExpiryDate;
	private String _insuredId;
	private String _insuredName;
	private String _vehicleSequence;
	private String _vehicleChessisNo;
	private String _status;
	private Date _cancllationReqDate;
	private String _reason;
	private String _servicemessage;
	private Date _cancellationEffdate;
	private PolicyCancelationIbanImageBlobModel _ibanImageBlobModel;
	private PolicyCancelationValidFileBlobModel _validFileBlobModel;
	private PolicyCancelationOtherFileBlobModel _otherFileBlobModel;
	private String _vehMake;
	private String _vehModel;
	private String _plateNumber;
	private String _anyAccident;
	private String _lodgeClaim;
	private String _ibanFileName;
	private String _validFileName;
	private Date _policyInceptionDate;
	private String _insuredEmail;
	private String _insuredMobile;
	private String _rejReason;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PolicyCancelation, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PolicyCancelation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ID", _Id);
		_columnOriginalValues.put("POLICYNUMBER", _policyNumber);
		_columnOriginalValues.put("POLICYEXPIRYDATE", _policyExpiryDate);
		_columnOriginalValues.put("INSUREDID", _insuredId);
		_columnOriginalValues.put("INSUREDNAME", _insuredName);
		_columnOriginalValues.put("VEHICLESEQ", _vehicleSequence);
		_columnOriginalValues.put("CHESSISNUMBER", _vehicleChessisNo);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("CANCELLATIONREQDATE", _cancllationReqDate);
		_columnOriginalValues.put("CANCELLATIONREASON", _reason);
		_columnOriginalValues.put("SERVICE_MESSAGE", _servicemessage);
		_columnOriginalValues.put("CANCELLATIONEFFDATE", _cancellationEffdate);
		_columnOriginalValues.put("VEHMAKE", _vehMake);
		_columnOriginalValues.put("VEHMODEL", _vehModel);
		_columnOriginalValues.put("PLATE_NUMBER", _plateNumber);
		_columnOriginalValues.put("ANY_ACCIDENT", _anyAccident);
		_columnOriginalValues.put("LODGE_CLAIM", _lodgeClaim);
		_columnOriginalValues.put("IBAN_FILE_NAME", _ibanFileName);
		_columnOriginalValues.put("VALID_FILE_NAME", _validFileName);
		_columnOriginalValues.put(
			"POLICY_INCEPTION_DATE", _policyInceptionDate);
		_columnOriginalValues.put("INSURED_EMAIL", _insuredEmail);
		_columnOriginalValues.put("INSURED_MOBILE", _insuredMobile);
		_columnOriginalValues.put("REJ_REASON", _rejReason);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ID", "Id");
		attributeNames.put("POLICYNUMBER", "policyNumber");
		attributeNames.put("POLICYEXPIRYDATE", "policyExpiryDate");
		attributeNames.put("INSUREDID", "insuredId");
		attributeNames.put("INSUREDNAME", "insuredName");
		attributeNames.put("VEHICLESEQ", "vehicleSequence");
		attributeNames.put("CHESSISNUMBER", "vehicleChessisNo");
		attributeNames.put("CANCELLATIONREQDATE", "cancllationReqDate");
		attributeNames.put("CANCELLATIONREASON", "reason");
		attributeNames.put("SERVICE_MESSAGE", "servicemessage");
		attributeNames.put("CANCELLATIONEFFDATE", "cancellationEffdate");
		attributeNames.put("IBANFILE", "ibanImage");
		attributeNames.put("VALIDFILE", "validFile");
		attributeNames.put("OTHERFILE", "otherFile");
		attributeNames.put("VEHMAKE", "vehMake");
		attributeNames.put("VEHMODEL", "vehModel");
		attributeNames.put("PLATE_NUMBER", "plateNumber");
		attributeNames.put("ANY_ACCIDENT", "anyAccident");
		attributeNames.put("LODGE_CLAIM", "lodgeClaim");
		attributeNames.put("IBAN_FILE_NAME", "ibanFileName");
		attributeNames.put("VALID_FILE_NAME", "validFileName");
		attributeNames.put("POLICY_INCEPTION_DATE", "policyInceptionDate");
		attributeNames.put("INSURED_EMAIL", "insuredEmail");
		attributeNames.put("INSURED_MOBILE", "insuredMobile");
		attributeNames.put("REJ_REASON", "rejReason");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ID", 1L);

		columnBitmasks.put("POLICYNUMBER", 2L);

		columnBitmasks.put("POLICYEXPIRYDATE", 4L);

		columnBitmasks.put("INSUREDID", 8L);

		columnBitmasks.put("INSUREDNAME", 16L);

		columnBitmasks.put("VEHICLESEQ", 32L);

		columnBitmasks.put("CHESSISNUMBER", 64L);

		columnBitmasks.put("status", 128L);

		columnBitmasks.put("CANCELLATIONREQDATE", 256L);

		columnBitmasks.put("CANCELLATIONREASON", 512L);

		columnBitmasks.put("SERVICE_MESSAGE", 1024L);

		columnBitmasks.put("CANCELLATIONEFFDATE", 2048L);

		columnBitmasks.put("IBANFILE", 4096L);

		columnBitmasks.put("VALIDFILE", 8192L);

		columnBitmasks.put("OTHERFILE", 16384L);

		columnBitmasks.put("VEHMAKE", 32768L);

		columnBitmasks.put("VEHMODEL", 65536L);

		columnBitmasks.put("PLATE_NUMBER", 131072L);

		columnBitmasks.put("ANY_ACCIDENT", 262144L);

		columnBitmasks.put("LODGE_CLAIM", 524288L);

		columnBitmasks.put("IBAN_FILE_NAME", 1048576L);

		columnBitmasks.put("VALID_FILE_NAME", 2097152L);

		columnBitmasks.put("POLICY_INCEPTION_DATE", 4194304L);

		columnBitmasks.put("INSURED_EMAIL", 8388608L);

		columnBitmasks.put("INSURED_MOBILE", 16777216L);

		columnBitmasks.put("REJ_REASON", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PolicyCancelation _escapedModel;

}