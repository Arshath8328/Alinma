/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.CustomerMap;
import com.ejada.atmc.acl.db.model.CustomerMapModel;
import com.ejada.atmc.acl.db.model.CustomerMapSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CustomerMap service. Represents a row in the &quot;PM_CUSTOMER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomerMapModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerMapImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerMapImpl
 * @generated
 */
@JSON(strict = true)
public class CustomerMapModelImpl
	extends BaseModelImpl<CustomerMap> implements CustomerMapModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer map model instance should use the <code>CustomerMap</code> interface instead.
	 */
	public static final String TABLE_NAME = "PM_CUSTOMER";

	public static final Object[][] TABLE_COLUMNS = {
		{"MDM_CUST_CIVIL_ID", Types.VARCHAR},
		{"MDM_CUST_EFF_FM_DT", Types.TIMESTAMP},
		{"MDM_CUST_CR_DT", Types.TIMESTAMP}, {"MDM_CUST_CR_UID", Types.VARCHAR},
		{"MDM_CUST_UPD_DT", Types.VARCHAR}, {"MDM_CUST_UPD_UID", Types.VARCHAR},
		{"MDM_CUST_NAME", Types.VARCHAR}, {"MDM_CUST_NAME_AR", Types.VARCHAR},
		{"MDM_CUST_TYPE", Types.VARCHAR}, {"MDM_CUST_CATG", Types.VARCHAR},
		{"MDM_CUST_CATG_DESC", Types.VARCHAR},
		{"MDM_CUST_DOB", Types.TIMESTAMP}, {"MDM_MOBILE_NO", Types.VARCHAR},
		{"MDM_PREMIA_CODE", Types.VARCHAR}, {"MDM_MED_CODE", Types.VARCHAR},
		{"MDM_ILAS_CODE", Types.VARCHAR}, {"MDM_GLAS_CODE", Types.VARCHAR},
		{"MDM_NATIONALITY", Types.VARCHAR},
		{"MDM_CUST_NAME_SHORT", Types.VARCHAR},
		{"MDM_CUST_VERSION", Types.VARCHAR}, {"MDM_CUST_VIP", Types.VARCHAR},
		{"MDM_PHONE_NO", Types.VARCHAR}, {"MDM_ADDRESS", Types.VARCHAR},
		{"MDM_EMAIL", Types.VARCHAR}, {"MDM_CUST_REF_CODE", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MDM_CUST_CIVIL_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_EFF_FM_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_CUST_CR_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_CUST_CR_UID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_UPD_DT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_UPD_UID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_NAME_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_CATG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_CATG_DESC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_MOBILE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PREMIA_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_MED_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_ILAS_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_GLAS_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_NATIONALITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_NAME_SHORT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_VERSION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_VIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PHONE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_ADDRESS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_REF_CODE", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PM_CUSTOMER (MDM_CUST_CIVIL_ID VARCHAR(75) null,MDM_CUST_EFF_FM_DT DATE null,MDM_CUST_CR_DT DATE null,MDM_CUST_CR_UID VARCHAR(75) null,MDM_CUST_UPD_DT VARCHAR(75) null,MDM_CUST_UPD_UID VARCHAR(75) null,MDM_CUST_NAME VARCHAR(75) null,MDM_CUST_NAME_AR VARCHAR(75) null,MDM_CUST_TYPE VARCHAR(75) null,MDM_CUST_CATG VARCHAR(75) null,MDM_CUST_CATG_DESC VARCHAR(75) null,MDM_CUST_DOB DATE null,MDM_MOBILE_NO VARCHAR(75) null,MDM_PREMIA_CODE VARCHAR(75) null,MDM_MED_CODE VARCHAR(75) null,MDM_ILAS_CODE VARCHAR(75) null,MDM_GLAS_CODE VARCHAR(75) null,MDM_NATIONALITY VARCHAR(75) null,MDM_CUST_NAME_SHORT VARCHAR(75) null,MDM_CUST_VERSION VARCHAR(75) null,MDM_CUST_VIP VARCHAR(75) null,MDM_PHONE_NO VARCHAR(75) null,MDM_ADDRESS VARCHAR(75) null,MDM_EMAIL VARCHAR(75) null,MDM_CUST_REF_CODE VARCHAR(75) not null primary key)";

	public static final String TABLE_SQL_DROP = "drop table PM_CUSTOMER";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customerMap.refCode ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PM_CUSTOMER.MDM_CUST_REF_CODE ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CUSTCATG_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CUSTTYPE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PREMIACODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REFCODE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static CustomerMap toModel(CustomerMapSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CustomerMap model = new CustomerMapImpl();

		model.setCivilId(soapModel.getCivilId());
		model.setEffFromDate(soapModel.getEffFromDate());
		model.setCrDare(soapModel.getCrDare());
		model.setCrUid(soapModel.getCrUid());
		model.setUpdateDt(soapModel.getUpdateDt());
		model.setUpdUid(soapModel.getUpdUid());
		model.setName(soapModel.getName());
		model.setNameAr(soapModel.getNameAr());
		model.setCustType(soapModel.getCustType());
		model.setCustCatg(soapModel.getCustCatg());
		model.setCustCatgDesc(soapModel.getCustCatgDesc());
		model.setDob(soapModel.getDob());
		model.setMobileNo(soapModel.getMobileNo());
		model.setPremiaCode(soapModel.getPremiaCode());
		model.setMedCode(soapModel.getMedCode());
		model.setIlasCode(soapModel.getIlasCode());
		model.setGlasCode(soapModel.getGlasCode());
		model.setNationality(soapModel.getNationality());
		model.setNameShort(soapModel.getNameShort());
		model.setVersion(soapModel.getVersion());
		model.setVip(soapModel.getVip());
		model.setPhoneNo(soapModel.getPhoneNo());
		model.setAddress(soapModel.getAddress());
		model.setEmail(soapModel.getEmail());
		model.setRefCode(soapModel.getRefCode());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<CustomerMap> toModels(CustomerMapSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CustomerMap> models = new ArrayList<CustomerMap>(
			soapModels.length);

		for (CustomerMapSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CustomerMapModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _refCode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setRefCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _refCode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CustomerMap.class;
	}

	@Override
	public String getModelClassName() {
		return CustomerMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CustomerMap, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CustomerMap, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomerMap, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CustomerMap)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CustomerMap, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CustomerMap, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CustomerMap)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CustomerMap, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CustomerMap, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CustomerMap>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CustomerMap.class.getClassLoader(), CustomerMap.class,
			ModelWrapper.class);

		try {
			Constructor<CustomerMap> constructor =
				(Constructor<CustomerMap>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CustomerMap, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CustomerMap, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CustomerMap, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CustomerMap, Object>>();
		Map<String, BiConsumer<CustomerMap, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CustomerMap, ?>>();

		attributeGetterFunctions.put("civilId", CustomerMap::getCivilId);
		attributeSetterBiConsumers.put(
			"civilId",
			(BiConsumer<CustomerMap, String>)CustomerMap::setCivilId);
		attributeGetterFunctions.put(
			"effFromDate", CustomerMap::getEffFromDate);
		attributeSetterBiConsumers.put(
			"effFromDate",
			(BiConsumer<CustomerMap, Date>)CustomerMap::setEffFromDate);
		attributeGetterFunctions.put("crDare", CustomerMap::getCrDare);
		attributeSetterBiConsumers.put(
			"crDare", (BiConsumer<CustomerMap, Date>)CustomerMap::setCrDare);
		attributeGetterFunctions.put("crUid", CustomerMap::getCrUid);
		attributeSetterBiConsumers.put(
			"crUid", (BiConsumer<CustomerMap, String>)CustomerMap::setCrUid);
		attributeGetterFunctions.put("updateDt", CustomerMap::getUpdateDt);
		attributeSetterBiConsumers.put(
			"updateDt",
			(BiConsumer<CustomerMap, String>)CustomerMap::setUpdateDt);
		attributeGetterFunctions.put("updUid", CustomerMap::getUpdUid);
		attributeSetterBiConsumers.put(
			"updUid", (BiConsumer<CustomerMap, String>)CustomerMap::setUpdUid);
		attributeGetterFunctions.put("name", CustomerMap::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<CustomerMap, String>)CustomerMap::setName);
		attributeGetterFunctions.put("nameAr", CustomerMap::getNameAr);
		attributeSetterBiConsumers.put(
			"nameAr", (BiConsumer<CustomerMap, String>)CustomerMap::setNameAr);
		attributeGetterFunctions.put("custType", CustomerMap::getCustType);
		attributeSetterBiConsumers.put(
			"custType",
			(BiConsumer<CustomerMap, String>)CustomerMap::setCustType);
		attributeGetterFunctions.put("custCatg", CustomerMap::getCustCatg);
		attributeSetterBiConsumers.put(
			"custCatg",
			(BiConsumer<CustomerMap, String>)CustomerMap::setCustCatg);
		attributeGetterFunctions.put(
			"custCatgDesc", CustomerMap::getCustCatgDesc);
		attributeSetterBiConsumers.put(
			"custCatgDesc",
			(BiConsumer<CustomerMap, String>)CustomerMap::setCustCatgDesc);
		attributeGetterFunctions.put("dob", CustomerMap::getDob);
		attributeSetterBiConsumers.put(
			"dob", (BiConsumer<CustomerMap, Date>)CustomerMap::setDob);
		attributeGetterFunctions.put("mobileNo", CustomerMap::getMobileNo);
		attributeSetterBiConsumers.put(
			"mobileNo",
			(BiConsumer<CustomerMap, String>)CustomerMap::setMobileNo);
		attributeGetterFunctions.put("premiaCode", CustomerMap::getPremiaCode);
		attributeSetterBiConsumers.put(
			"premiaCode",
			(BiConsumer<CustomerMap, String>)CustomerMap::setPremiaCode);
		attributeGetterFunctions.put("medCode", CustomerMap::getMedCode);
		attributeSetterBiConsumers.put(
			"medCode",
			(BiConsumer<CustomerMap, String>)CustomerMap::setMedCode);
		attributeGetterFunctions.put("ilasCode", CustomerMap::getIlasCode);
		attributeSetterBiConsumers.put(
			"ilasCode",
			(BiConsumer<CustomerMap, String>)CustomerMap::setIlasCode);
		attributeGetterFunctions.put("glasCode", CustomerMap::getGlasCode);
		attributeSetterBiConsumers.put(
			"glasCode",
			(BiConsumer<CustomerMap, String>)CustomerMap::setGlasCode);
		attributeGetterFunctions.put(
			"nationality", CustomerMap::getNationality);
		attributeSetterBiConsumers.put(
			"nationality",
			(BiConsumer<CustomerMap, String>)CustomerMap::setNationality);
		attributeGetterFunctions.put("nameShort", CustomerMap::getNameShort);
		attributeSetterBiConsumers.put(
			"nameShort",
			(BiConsumer<CustomerMap, String>)CustomerMap::setNameShort);
		attributeGetterFunctions.put("version", CustomerMap::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<CustomerMap, String>)CustomerMap::setVersion);
		attributeGetterFunctions.put("vip", CustomerMap::getVip);
		attributeSetterBiConsumers.put(
			"vip", (BiConsumer<CustomerMap, String>)CustomerMap::setVip);
		attributeGetterFunctions.put("phoneNo", CustomerMap::getPhoneNo);
		attributeSetterBiConsumers.put(
			"phoneNo",
			(BiConsumer<CustomerMap, String>)CustomerMap::setPhoneNo);
		attributeGetterFunctions.put("address", CustomerMap::getAddress);
		attributeSetterBiConsumers.put(
			"address",
			(BiConsumer<CustomerMap, String>)CustomerMap::setAddress);
		attributeGetterFunctions.put("email", CustomerMap::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<CustomerMap, String>)CustomerMap::setEmail);
		attributeGetterFunctions.put("refCode", CustomerMap::getRefCode);
		attributeSetterBiConsumers.put(
			"refCode",
			(BiConsumer<CustomerMap, String>)CustomerMap::setRefCode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getCivilId() {
		if (_civilId == null) {
			return "";
		}
		else {
			return _civilId;
		}
	}

	@Override
	public void setCivilId(String civilId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_civilId = civilId;
	}

	@JSON
	@Override
	public Date getEffFromDate() {
		return _effFromDate;
	}

	@Override
	public void setEffFromDate(Date effFromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_effFromDate = effFromDate;
	}

	@JSON
	@Override
	public Date getCrDare() {
		return _crDare;
	}

	@Override
	public void setCrDare(Date crDare) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crDare = crDare;
	}

	@JSON
	@Override
	public String getCrUid() {
		if (_crUid == null) {
			return "";
		}
		else {
			return _crUid;
		}
	}

	@Override
	public void setCrUid(String crUid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crUid = crUid;
	}

	@JSON
	@Override
	public String getUpdateDt() {
		if (_updateDt == null) {
			return "";
		}
		else {
			return _updateDt;
		}
	}

	@Override
	public void setUpdateDt(String updateDt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updateDt = updateDt;
	}

	@JSON
	@Override
	public String getUpdUid() {
		if (_updUid == null) {
			return "";
		}
		else {
			return _updUid;
		}
	}

	@Override
	public void setUpdUid(String updUid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updUid = updUid;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getNameAr() {
		if (_nameAr == null) {
			return "";
		}
		else {
			return _nameAr;
		}
	}

	@Override
	public void setNameAr(String nameAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameAr = nameAr;
	}

	@JSON
	@Override
	public String getCustType() {
		if (_custType == null) {
			return "";
		}
		else {
			return _custType;
		}
	}

	@Override
	public void setCustType(String custType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_custType = custType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCustType() {
		return getColumnOriginalValue("MDM_CUST_TYPE");
	}

	@JSON
	@Override
	public String getCustCatg() {
		if (_custCatg == null) {
			return "";
		}
		else {
			return _custCatg;
		}
	}

	@Override
	public void setCustCatg(String custCatg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_custCatg = custCatg;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCustCatg() {
		return getColumnOriginalValue("MDM_CUST_CATG");
	}

	@JSON
	@Override
	public String getCustCatgDesc() {
		if (_custCatgDesc == null) {
			return "";
		}
		else {
			return _custCatgDesc;
		}
	}

	@Override
	public void setCustCatgDesc(String custCatgDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_custCatgDesc = custCatgDesc;
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dob = dob;
	}

	@JSON
	@Override
	public String getMobileNo() {
		if (_mobileNo == null) {
			return "";
		}
		else {
			return _mobileNo;
		}
	}

	@Override
	public void setMobileNo(String mobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNo = mobileNo;
	}

	@JSON
	@Override
	public String getPremiaCode() {
		if (_premiaCode == null) {
			return "";
		}
		else {
			return _premiaCode;
		}
	}

	@Override
	public void setPremiaCode(String premiaCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_premiaCode = premiaCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPremiaCode() {
		return getColumnOriginalValue("MDM_PREMIA_CODE");
	}

	@JSON
	@Override
	public String getMedCode() {
		if (_medCode == null) {
			return "";
		}
		else {
			return _medCode;
		}
	}

	@Override
	public void setMedCode(String medCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_medCode = medCode;
	}

	@JSON
	@Override
	public String getIlasCode() {
		if (_ilasCode == null) {
			return "";
		}
		else {
			return _ilasCode;
		}
	}

	@Override
	public void setIlasCode(String ilasCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ilasCode = ilasCode;
	}

	@JSON
	@Override
	public String getGlasCode() {
		if (_glasCode == null) {
			return "";
		}
		else {
			return _glasCode;
		}
	}

	@Override
	public void setGlasCode(String glasCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_glasCode = glasCode;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return "";
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationality = nationality;
	}

	@JSON
	@Override
	public String getNameShort() {
		if (_nameShort == null) {
			return "";
		}
		else {
			return _nameShort;
		}
	}

	@Override
	public void setNameShort(String nameShort) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameShort = nameShort;
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public String getVip() {
		if (_vip == null) {
			return "";
		}
		else {
			return _vip;
		}
	}

	@Override
	public void setVip(String vip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vip = vip;
	}

	@JSON
	@Override
	public String getPhoneNo() {
		if (_phoneNo == null) {
			return "";
		}
		else {
			return _phoneNo;
		}
	}

	@Override
	public void setPhoneNo(String phoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNo = phoneNo;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getRefCode() {
		if (_refCode == null) {
			return "";
		}
		else {
			return _refCode;
		}
	}

	@Override
	public void setRefCode(String refCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_refCode = refCode;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public CustomerMap toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CustomerMap>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerMapImpl customerMapImpl = new CustomerMapImpl();

		customerMapImpl.setCivilId(getCivilId());
		customerMapImpl.setEffFromDate(getEffFromDate());
		customerMapImpl.setCrDare(getCrDare());
		customerMapImpl.setCrUid(getCrUid());
		customerMapImpl.setUpdateDt(getUpdateDt());
		customerMapImpl.setUpdUid(getUpdUid());
		customerMapImpl.setName(getName());
		customerMapImpl.setNameAr(getNameAr());
		customerMapImpl.setCustType(getCustType());
		customerMapImpl.setCustCatg(getCustCatg());
		customerMapImpl.setCustCatgDesc(getCustCatgDesc());
		customerMapImpl.setDob(getDob());
		customerMapImpl.setMobileNo(getMobileNo());
		customerMapImpl.setPremiaCode(getPremiaCode());
		customerMapImpl.setMedCode(getMedCode());
		customerMapImpl.setIlasCode(getIlasCode());
		customerMapImpl.setGlasCode(getGlasCode());
		customerMapImpl.setNationality(getNationality());
		customerMapImpl.setNameShort(getNameShort());
		customerMapImpl.setVersion(getVersion());
		customerMapImpl.setVip(getVip());
		customerMapImpl.setPhoneNo(getPhoneNo());
		customerMapImpl.setAddress(getAddress());
		customerMapImpl.setEmail(getEmail());
		customerMapImpl.setRefCode(getRefCode());

		customerMapImpl.resetOriginalValues();

		return customerMapImpl;
	}

	@Override
	public int compareTo(CustomerMap customerMap) {
		String primaryKey = customerMap.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CustomerMap)) {
			return false;
		}

		CustomerMap customerMap = (CustomerMap)object;

		String primaryKey = customerMap.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CustomerMap> toCacheModel() {
		CustomerMapCacheModel customerMapCacheModel =
			new CustomerMapCacheModel();

		customerMapCacheModel.civilId = getCivilId();

		String civilId = customerMapCacheModel.civilId;

		if ((civilId != null) && (civilId.length() == 0)) {
			customerMapCacheModel.civilId = null;
		}

		Date effFromDate = getEffFromDate();

		if (effFromDate != null) {
			customerMapCacheModel.effFromDate = effFromDate.getTime();
		}
		else {
			customerMapCacheModel.effFromDate = Long.MIN_VALUE;
		}

		Date crDare = getCrDare();

		if (crDare != null) {
			customerMapCacheModel.crDare = crDare.getTime();
		}
		else {
			customerMapCacheModel.crDare = Long.MIN_VALUE;
		}

		customerMapCacheModel.crUid = getCrUid();

		String crUid = customerMapCacheModel.crUid;

		if ((crUid != null) && (crUid.length() == 0)) {
			customerMapCacheModel.crUid = null;
		}

		customerMapCacheModel.updateDt = getUpdateDt();

		String updateDt = customerMapCacheModel.updateDt;

		if ((updateDt != null) && (updateDt.length() == 0)) {
			customerMapCacheModel.updateDt = null;
		}

		customerMapCacheModel.updUid = getUpdUid();

		String updUid = customerMapCacheModel.updUid;

		if ((updUid != null) && (updUid.length() == 0)) {
			customerMapCacheModel.updUid = null;
		}

		customerMapCacheModel.name = getName();

		String name = customerMapCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			customerMapCacheModel.name = null;
		}

		customerMapCacheModel.nameAr = getNameAr();

		String nameAr = customerMapCacheModel.nameAr;

		if ((nameAr != null) && (nameAr.length() == 0)) {
			customerMapCacheModel.nameAr = null;
		}

		customerMapCacheModel.custType = getCustType();

		String custType = customerMapCacheModel.custType;

		if ((custType != null) && (custType.length() == 0)) {
			customerMapCacheModel.custType = null;
		}

		customerMapCacheModel.custCatg = getCustCatg();

		String custCatg = customerMapCacheModel.custCatg;

		if ((custCatg != null) && (custCatg.length() == 0)) {
			customerMapCacheModel.custCatg = null;
		}

		customerMapCacheModel.custCatgDesc = getCustCatgDesc();

		String custCatgDesc = customerMapCacheModel.custCatgDesc;

		if ((custCatgDesc != null) && (custCatgDesc.length() == 0)) {
			customerMapCacheModel.custCatgDesc = null;
		}

		Date dob = getDob();

		if (dob != null) {
			customerMapCacheModel.dob = dob.getTime();
		}
		else {
			customerMapCacheModel.dob = Long.MIN_VALUE;
		}

		customerMapCacheModel.mobileNo = getMobileNo();

		String mobileNo = customerMapCacheModel.mobileNo;

		if ((mobileNo != null) && (mobileNo.length() == 0)) {
			customerMapCacheModel.mobileNo = null;
		}

		customerMapCacheModel.premiaCode = getPremiaCode();

		String premiaCode = customerMapCacheModel.premiaCode;

		if ((premiaCode != null) && (premiaCode.length() == 0)) {
			customerMapCacheModel.premiaCode = null;
		}

		customerMapCacheModel.medCode = getMedCode();

		String medCode = customerMapCacheModel.medCode;

		if ((medCode != null) && (medCode.length() == 0)) {
			customerMapCacheModel.medCode = null;
		}

		customerMapCacheModel.ilasCode = getIlasCode();

		String ilasCode = customerMapCacheModel.ilasCode;

		if ((ilasCode != null) && (ilasCode.length() == 0)) {
			customerMapCacheModel.ilasCode = null;
		}

		customerMapCacheModel.glasCode = getGlasCode();

		String glasCode = customerMapCacheModel.glasCode;

		if ((glasCode != null) && (glasCode.length() == 0)) {
			customerMapCacheModel.glasCode = null;
		}

		customerMapCacheModel.nationality = getNationality();

		String nationality = customerMapCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			customerMapCacheModel.nationality = null;
		}

		customerMapCacheModel.nameShort = getNameShort();

		String nameShort = customerMapCacheModel.nameShort;

		if ((nameShort != null) && (nameShort.length() == 0)) {
			customerMapCacheModel.nameShort = null;
		}

		customerMapCacheModel.version = getVersion();

		String version = customerMapCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			customerMapCacheModel.version = null;
		}

		customerMapCacheModel.vip = getVip();

		String vip = customerMapCacheModel.vip;

		if ((vip != null) && (vip.length() == 0)) {
			customerMapCacheModel.vip = null;
		}

		customerMapCacheModel.phoneNo = getPhoneNo();

		String phoneNo = customerMapCacheModel.phoneNo;

		if ((phoneNo != null) && (phoneNo.length() == 0)) {
			customerMapCacheModel.phoneNo = null;
		}

		customerMapCacheModel.address = getAddress();

		String address = customerMapCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			customerMapCacheModel.address = null;
		}

		customerMapCacheModel.email = getEmail();

		String email = customerMapCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			customerMapCacheModel.email = null;
		}

		customerMapCacheModel.refCode = getRefCode();

		String refCode = customerMapCacheModel.refCode;

		if ((refCode != null) && (refCode.length() == 0)) {
			customerMapCacheModel.refCode = null;
		}

		return customerMapCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CustomerMap, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CustomerMap, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomerMap, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CustomerMap)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CustomerMap, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CustomerMap, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomerMap, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CustomerMap)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CustomerMap>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _civilId;
	private Date _effFromDate;
	private Date _crDare;
	private String _crUid;
	private String _updateDt;
	private String _updUid;
	private String _name;
	private String _nameAr;
	private String _custType;
	private String _custCatg;
	private String _custCatgDesc;
	private Date _dob;
	private String _mobileNo;
	private String _premiaCode;
	private String _medCode;
	private String _ilasCode;
	private String _glasCode;
	private String _nationality;
	private String _nameShort;
	private String _version;
	private String _vip;
	private String _phoneNo;
	private String _address;
	private String _email;
	private String _refCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CustomerMap, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CustomerMap)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("MDM_CUST_CIVIL_ID", _civilId);
		_columnOriginalValues.put("MDM_CUST_EFF_FM_DT", _effFromDate);
		_columnOriginalValues.put("MDM_CUST_CR_DT", _crDare);
		_columnOriginalValues.put("MDM_CUST_CR_UID", _crUid);
		_columnOriginalValues.put("MDM_CUST_UPD_DT", _updateDt);
		_columnOriginalValues.put("MDM_CUST_UPD_UID", _updUid);
		_columnOriginalValues.put("MDM_CUST_NAME", _name);
		_columnOriginalValues.put("MDM_CUST_NAME_AR", _nameAr);
		_columnOriginalValues.put("MDM_CUST_TYPE", _custType);
		_columnOriginalValues.put("MDM_CUST_CATG", _custCatg);
		_columnOriginalValues.put("MDM_CUST_CATG_DESC", _custCatgDesc);
		_columnOriginalValues.put("MDM_CUST_DOB", _dob);
		_columnOriginalValues.put("MDM_MOBILE_NO", _mobileNo);
		_columnOriginalValues.put("MDM_PREMIA_CODE", _premiaCode);
		_columnOriginalValues.put("MDM_MED_CODE", _medCode);
		_columnOriginalValues.put("MDM_ILAS_CODE", _ilasCode);
		_columnOriginalValues.put("MDM_GLAS_CODE", _glasCode);
		_columnOriginalValues.put("MDM_NATIONALITY", _nationality);
		_columnOriginalValues.put("MDM_CUST_NAME_SHORT", _nameShort);
		_columnOriginalValues.put("MDM_CUST_VERSION", _version);
		_columnOriginalValues.put("MDM_CUST_VIP", _vip);
		_columnOriginalValues.put("MDM_PHONE_NO", _phoneNo);
		_columnOriginalValues.put("MDM_ADDRESS", _address);
		_columnOriginalValues.put("MDM_EMAIL", _email);
		_columnOriginalValues.put("MDM_CUST_REF_CODE", _refCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("MDM_CUST_CIVIL_ID", "civilId");
		attributeNames.put("MDM_CUST_EFF_FM_DT", "effFromDate");
		attributeNames.put("MDM_CUST_CR_DT", "crDare");
		attributeNames.put("MDM_CUST_CR_UID", "crUid");
		attributeNames.put("MDM_CUST_UPD_DT", "updateDt");
		attributeNames.put("MDM_CUST_UPD_UID", "updUid");
		attributeNames.put("MDM_CUST_NAME", "name");
		attributeNames.put("MDM_CUST_NAME_AR", "nameAr");
		attributeNames.put("MDM_CUST_TYPE", "custType");
		attributeNames.put("MDM_CUST_CATG", "custCatg");
		attributeNames.put("MDM_CUST_CATG_DESC", "custCatgDesc");
		attributeNames.put("MDM_CUST_DOB", "dob");
		attributeNames.put("MDM_MOBILE_NO", "mobileNo");
		attributeNames.put("MDM_PREMIA_CODE", "premiaCode");
		attributeNames.put("MDM_MED_CODE", "medCode");
		attributeNames.put("MDM_ILAS_CODE", "ilasCode");
		attributeNames.put("MDM_GLAS_CODE", "glasCode");
		attributeNames.put("MDM_NATIONALITY", "nationality");
		attributeNames.put("MDM_CUST_NAME_SHORT", "nameShort");
		attributeNames.put("MDM_CUST_VERSION", "version");
		attributeNames.put("MDM_CUST_VIP", "vip");
		attributeNames.put("MDM_PHONE_NO", "phoneNo");
		attributeNames.put("MDM_ADDRESS", "address");
		attributeNames.put("MDM_EMAIL", "email");
		attributeNames.put("MDM_CUST_REF_CODE", "refCode");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("MDM_CUST_CIVIL_ID", 1L);

		columnBitmasks.put("MDM_CUST_EFF_FM_DT", 2L);

		columnBitmasks.put("MDM_CUST_CR_DT", 4L);

		columnBitmasks.put("MDM_CUST_CR_UID", 8L);

		columnBitmasks.put("MDM_CUST_UPD_DT", 16L);

		columnBitmasks.put("MDM_CUST_UPD_UID", 32L);

		columnBitmasks.put("MDM_CUST_NAME", 64L);

		columnBitmasks.put("MDM_CUST_NAME_AR", 128L);

		columnBitmasks.put("MDM_CUST_TYPE", 256L);

		columnBitmasks.put("MDM_CUST_CATG", 512L);

		columnBitmasks.put("MDM_CUST_CATG_DESC", 1024L);

		columnBitmasks.put("MDM_CUST_DOB", 2048L);

		columnBitmasks.put("MDM_MOBILE_NO", 4096L);

		columnBitmasks.put("MDM_PREMIA_CODE", 8192L);

		columnBitmasks.put("MDM_MED_CODE", 16384L);

		columnBitmasks.put("MDM_ILAS_CODE", 32768L);

		columnBitmasks.put("MDM_GLAS_CODE", 65536L);

		columnBitmasks.put("MDM_NATIONALITY", 131072L);

		columnBitmasks.put("MDM_CUST_NAME_SHORT", 262144L);

		columnBitmasks.put("MDM_CUST_VERSION", 524288L);

		columnBitmasks.put("MDM_CUST_VIP", 1048576L);

		columnBitmasks.put("MDM_PHONE_NO", 2097152L);

		columnBitmasks.put("MDM_ADDRESS", 4194304L);

		columnBitmasks.put("MDM_EMAIL", 8388608L);

		columnBitmasks.put("MDM_CUST_REF_CODE", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CustomerMap _escapedModel;

}