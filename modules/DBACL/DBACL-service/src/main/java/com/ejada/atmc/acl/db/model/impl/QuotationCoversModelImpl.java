/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.QuotationCovers;
import com.ejada.atmc.acl.db.model.QuotationCoversModel;
import com.ejada.atmc.acl.db.model.QuotationCoversSoap;
import com.ejada.atmc.acl.db.service.persistence.QuotationCoversPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuotationCovers service. Represents a row in the &quot;EJD_ADD_COVERS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationCoversModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationCoversImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationCoversImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationCoversModelImpl
	extends BaseModelImpl<QuotationCovers> implements QuotationCoversModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotation covers model instance should use the <code>QuotationCovers</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_ADD_COVERS";

	public static final Object[][] TABLE_COLUMNS = {
		{"ADD_COVER_ID", Types.BIGINT}, {"QUOTATIONS_ID", Types.BIGINT},
		{"COVER_CODE", Types.VARCHAR}, {"SECTION_CODE", Types.BIGINT},
		{"COVER_EFF_FRM_DATE", Types.TIMESTAMP},
		{"COVER_EFF_TO_DATE", Types.TIMESTAMP}, {"COVER_PREM", Types.BIGINT},
		{"COVER_RATE", Types.BIGINT}, {"COVER_SI", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ADD_COVER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTATIONS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("COVER_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SECTION_CODE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("COVER_EFF_FRM_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COVER_EFF_TO_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COVER_PREM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("COVER_RATE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("COVER_SI", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_ADD_COVERS (ADD_COVER_ID LONG not null,QUOTATIONS_ID LONG not null,COVER_CODE VARCHAR(75) null,SECTION_CODE LONG,COVER_EFF_FRM_DATE DATE null,COVER_EFF_TO_DATE DATE null,COVER_PREM LONG,COVER_RATE LONG,COVER_SI LONG,primary key (ADD_COVER_ID, QUOTATIONS_ID))";

	public static final String TABLE_SQL_DROP = "drop table EJD_ADD_COVERS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotationCovers.id.addCoverId ASC, quotationCovers.id.quotationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_ADD_COVERS.ADD_COVER_ID ASC, EJD_ADD_COVERS.QUOTATIONS_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUOTATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ADDCOVERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static QuotationCovers toModel(QuotationCoversSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		QuotationCovers model = new QuotationCoversImpl();

		model.setAddCoverId(soapModel.getAddCoverId());
		model.setQuotationId(soapModel.getQuotationId());
		model.setCoverCode(soapModel.getCoverCode());
		model.setSectionCode(soapModel.getSectionCode());
		model.setCoverEffFromDate(soapModel.getCoverEffFromDate());
		model.setCoverEffToDate(soapModel.getCoverEffToDate());
		model.setCoverPrem(soapModel.getCoverPrem());
		model.setCoverRate(soapModel.getCoverRate());
		model.setCoverSi(soapModel.getCoverSi());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<QuotationCovers> toModels(
		QuotationCoversSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<QuotationCovers> models = new ArrayList<QuotationCovers>(
			soapModels.length);

		for (QuotationCoversSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationCoversModelImpl() {
	}

	@Override
	public QuotationCoversPK getPrimaryKey() {
		return new QuotationCoversPK(_addCoverId, _quotationId);
	}

	@Override
	public void setPrimaryKey(QuotationCoversPK primaryKey) {
		setAddCoverId(primaryKey.addCoverId);
		setQuotationId(primaryKey.quotationId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new QuotationCoversPK(_addCoverId, _quotationId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((QuotationCoversPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return QuotationCovers.class;
	}

	@Override
	public String getModelClassName() {
		return QuotationCovers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuotationCovers, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuotationCovers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationCovers, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuotationCovers)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuotationCovers, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuotationCovers, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuotationCovers)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuotationCovers, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuotationCovers, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QuotationCovers>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QuotationCovers.class.getClassLoader(), QuotationCovers.class,
			ModelWrapper.class);

		try {
			Constructor<QuotationCovers> constructor =
				(Constructor<QuotationCovers>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QuotationCovers, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QuotationCovers, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuotationCovers, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<QuotationCovers, Object>>();
		Map<String, BiConsumer<QuotationCovers, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<QuotationCovers, ?>>();

		attributeGetterFunctions.put(
			"addCoverId", QuotationCovers::getAddCoverId);
		attributeSetterBiConsumers.put(
			"addCoverId",
			(BiConsumer<QuotationCovers, Long>)QuotationCovers::setAddCoverId);
		attributeGetterFunctions.put(
			"quotationId", QuotationCovers::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<QuotationCovers, Long>)QuotationCovers::setQuotationId);
		attributeGetterFunctions.put(
			"coverCode", QuotationCovers::getCoverCode);
		attributeSetterBiConsumers.put(
			"coverCode",
			(BiConsumer<QuotationCovers, String>)QuotationCovers::setCoverCode);
		attributeGetterFunctions.put(
			"sectionCode", QuotationCovers::getSectionCode);
		attributeSetterBiConsumers.put(
			"sectionCode",
			(BiConsumer<QuotationCovers, Long>)QuotationCovers::setSectionCode);
		attributeGetterFunctions.put(
			"coverEffFromDate", QuotationCovers::getCoverEffFromDate);
		attributeSetterBiConsumers.put(
			"coverEffFromDate",
			(BiConsumer<QuotationCovers, Date>)
				QuotationCovers::setCoverEffFromDate);
		attributeGetterFunctions.put(
			"coverEffToDate", QuotationCovers::getCoverEffToDate);
		attributeSetterBiConsumers.put(
			"coverEffToDate",
			(BiConsumer<QuotationCovers, Date>)
				QuotationCovers::setCoverEffToDate);
		attributeGetterFunctions.put(
			"coverPrem", QuotationCovers::getCoverPrem);
		attributeSetterBiConsumers.put(
			"coverPrem",
			(BiConsumer<QuotationCovers, Long>)QuotationCovers::setCoverPrem);
		attributeGetterFunctions.put(
			"coverRate", QuotationCovers::getCoverRate);
		attributeSetterBiConsumers.put(
			"coverRate",
			(BiConsumer<QuotationCovers, Long>)QuotationCovers::setCoverRate);
		attributeGetterFunctions.put("coverSi", QuotationCovers::getCoverSi);
		attributeSetterBiConsumers.put(
			"coverSi",
			(BiConsumer<QuotationCovers, Long>)QuotationCovers::setCoverSi);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAddCoverId() {
		return _addCoverId;
	}

	@Override
	public void setAddCoverId(long addCoverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addCoverId = addCoverId;
	}

	@JSON
	@Override
	public long getQuotationId() {
		return _quotationId;
	}

	@Override
	public void setQuotationId(long quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuotationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("QUOTATIONS_ID"));
	}

	@JSON
	@Override
	public String getCoverCode() {
		if (_coverCode == null) {
			return "";
		}
		else {
			return _coverCode;
		}
	}

	@Override
	public void setCoverCode(String coverCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverCode = coverCode;
	}

	@JSON
	@Override
	public long getSectionCode() {
		return _sectionCode;
	}

	@Override
	public void setSectionCode(long sectionCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sectionCode = sectionCode;
	}

	@JSON
	@Override
	public Date getCoverEffFromDate() {
		return _coverEffFromDate;
	}

	@Override
	public void setCoverEffFromDate(Date coverEffFromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverEffFromDate = coverEffFromDate;
	}

	@JSON
	@Override
	public Date getCoverEffToDate() {
		return _coverEffToDate;
	}

	@Override
	public void setCoverEffToDate(Date coverEffToDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverEffToDate = coverEffToDate;
	}

	@JSON
	@Override
	public long getCoverPrem() {
		return _coverPrem;
	}

	@Override
	public void setCoverPrem(long coverPrem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverPrem = coverPrem;
	}

	@JSON
	@Override
	public long getCoverRate() {
		return _coverRate;
	}

	@Override
	public void setCoverRate(long coverRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverRate = coverRate;
	}

	@JSON
	@Override
	public long getCoverSi() {
		return _coverSi;
	}

	@Override
	public void setCoverSi(long coverSi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverSi = coverSi;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public QuotationCovers toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuotationCovers>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationCoversImpl quotationCoversImpl = new QuotationCoversImpl();

		quotationCoversImpl.setAddCoverId(getAddCoverId());
		quotationCoversImpl.setQuotationId(getQuotationId());
		quotationCoversImpl.setCoverCode(getCoverCode());
		quotationCoversImpl.setSectionCode(getSectionCode());
		quotationCoversImpl.setCoverEffFromDate(getCoverEffFromDate());
		quotationCoversImpl.setCoverEffToDate(getCoverEffToDate());
		quotationCoversImpl.setCoverPrem(getCoverPrem());
		quotationCoversImpl.setCoverRate(getCoverRate());
		quotationCoversImpl.setCoverSi(getCoverSi());

		quotationCoversImpl.resetOriginalValues();

		return quotationCoversImpl;
	}

	@Override
	public int compareTo(QuotationCovers quotationCovers) {
		QuotationCoversPK primaryKey = quotationCovers.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuotationCovers)) {
			return false;
		}

		QuotationCovers quotationCovers = (QuotationCovers)object;

		QuotationCoversPK primaryKey = quotationCovers.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotationCovers> toCacheModel() {
		QuotationCoversCacheModel quotationCoversCacheModel =
			new QuotationCoversCacheModel();

		quotationCoversCacheModel.quotationCoversPK = getPrimaryKey();

		quotationCoversCacheModel.addCoverId = getAddCoverId();

		quotationCoversCacheModel.quotationId = getQuotationId();

		quotationCoversCacheModel.coverCode = getCoverCode();

		String coverCode = quotationCoversCacheModel.coverCode;

		if ((coverCode != null) && (coverCode.length() == 0)) {
			quotationCoversCacheModel.coverCode = null;
		}

		quotationCoversCacheModel.sectionCode = getSectionCode();

		Date coverEffFromDate = getCoverEffFromDate();

		if (coverEffFromDate != null) {
			quotationCoversCacheModel.coverEffFromDate =
				coverEffFromDate.getTime();
		}
		else {
			quotationCoversCacheModel.coverEffFromDate = Long.MIN_VALUE;
		}

		Date coverEffToDate = getCoverEffToDate();

		if (coverEffToDate != null) {
			quotationCoversCacheModel.coverEffToDate = coverEffToDate.getTime();
		}
		else {
			quotationCoversCacheModel.coverEffToDate = Long.MIN_VALUE;
		}

		quotationCoversCacheModel.coverPrem = getCoverPrem();

		quotationCoversCacheModel.coverRate = getCoverRate();

		quotationCoversCacheModel.coverSi = getCoverSi();

		return quotationCoversCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuotationCovers, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuotationCovers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationCovers, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((QuotationCovers)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<QuotationCovers, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<QuotationCovers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationCovers, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((QuotationCovers)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QuotationCovers>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _addCoverId;
	private long _quotationId;
	private String _coverCode;
	private long _sectionCode;
	private Date _coverEffFromDate;
	private Date _coverEffToDate;
	private long _coverPrem;
	private long _coverRate;
	private long _coverSi;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuotationCovers, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuotationCovers)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ADD_COVER_ID", _addCoverId);
		_columnOriginalValues.put("QUOTATIONS_ID", _quotationId);
		_columnOriginalValues.put("COVER_CODE", _coverCode);
		_columnOriginalValues.put("SECTION_CODE", _sectionCode);
		_columnOriginalValues.put("COVER_EFF_FRM_DATE", _coverEffFromDate);
		_columnOriginalValues.put("COVER_EFF_TO_DATE", _coverEffToDate);
		_columnOriginalValues.put("COVER_PREM", _coverPrem);
		_columnOriginalValues.put("COVER_RATE", _coverRate);
		_columnOriginalValues.put("COVER_SI", _coverSi);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ADD_COVER_ID", "addCoverId");
		attributeNames.put("QUOTATIONS_ID", "quotationId");
		attributeNames.put("COVER_CODE", "coverCode");
		attributeNames.put("SECTION_CODE", "sectionCode");
		attributeNames.put("COVER_EFF_FRM_DATE", "coverEffFromDate");
		attributeNames.put("COVER_EFF_TO_DATE", "coverEffToDate");
		attributeNames.put("COVER_PREM", "coverPrem");
		attributeNames.put("COVER_RATE", "coverRate");
		attributeNames.put("COVER_SI", "coverSi");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ADD_COVER_ID", 1L);

		columnBitmasks.put("QUOTATIONS_ID", 2L);

		columnBitmasks.put("COVER_CODE", 4L);

		columnBitmasks.put("SECTION_CODE", 8L);

		columnBitmasks.put("COVER_EFF_FRM_DATE", 16L);

		columnBitmasks.put("COVER_EFF_TO_DATE", 32L);

		columnBitmasks.put("COVER_PREM", 64L);

		columnBitmasks.put("COVER_RATE", 128L);

		columnBitmasks.put("COVER_SI", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuotationCovers _escapedModel;

}