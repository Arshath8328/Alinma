/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.PolicyVehDrv;
import com.ejada.atmc.acl.db.model.PolicyVehDrvModel;
import com.ejada.atmc.acl.db.model.PolicyVehDrvSoap;
import com.ejada.atmc.acl.db.service.persistence.PolicyVehDrvPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PolicyVehDrv service. Represents a row in the &quot;ODS_POLICY_VEH_DRV&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PolicyVehDrvModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyVehDrvImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PolicyVehDrvImpl
 * @generated
 */
@JSON(strict = true)
public class PolicyVehDrvModelImpl
	extends BaseModelImpl<PolicyVehDrv> implements PolicyVehDrvModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy veh drv model instance should use the <code>PolicyVehDrv</code> interface instead.
	 */
	public static final String TABLE_NAME = "ODS_POLICY_VEH_DRV";

	public static final Object[][] TABLE_COLUMNS = {
		{"ODS_POLICY_NO", Types.VARCHAR}, {"ODS_VEH_ID", Types.BIGINT},
		{"ODS_DRIVER_LICENSE_NO", Types.VARCHAR},
		{"ODS_DRIVER_NAME", Types.VARCHAR}, {"ODS_DRIVER_DOB", Types.TIMESTAMP},
		{"ODS_DRIVER_NATIONALITY", Types.VARCHAR},
		{"ODS_DRIVER_GENDER", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ODS_POLICY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_VEH_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ODS_DRIVER_LICENSE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_DRIVER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_DRIVER_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_DRIVER_NATIONALITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_DRIVER_GENDER", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ODS_POLICY_VEH_DRV (ODS_POLICY_NO VARCHAR(75) not null,ODS_VEH_ID LONG not null,ODS_DRIVER_LICENSE_NO VARCHAR(75) not null,ODS_DRIVER_NAME VARCHAR(75) null,ODS_DRIVER_DOB DATE null,ODS_DRIVER_NATIONALITY VARCHAR(75) null,ODS_DRIVER_GENDER VARCHAR(75) null,primary key (ODS_POLICY_NO, ODS_VEH_ID, ODS_DRIVER_LICENSE_NO))";

	public static final String TABLE_SQL_DROP = "drop table ODS_POLICY_VEH_DRV";

	public static final String ORDER_BY_JPQL =
		" ORDER BY policyVehDrv.id.policyNo ASC, policyVehDrv.id.vehId ASC, policyVehDrv.id.driverLicenseNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ODS_POLICY_VEH_DRV.ODS_POLICY_NO ASC, ODS_POLICY_VEH_DRV.ODS_VEH_ID ASC, ODS_POLICY_VEH_DRV.ODS_DRIVER_LICENSE_NO ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long VEHID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DRIVERLICENSENO_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static PolicyVehDrv toModel(PolicyVehDrvSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PolicyVehDrv model = new PolicyVehDrvImpl();

		model.setPolicyNo(soapModel.getPolicyNo());
		model.setVehId(soapModel.getVehId());
		model.setDriverLicenseNo(soapModel.getDriverLicenseNo());
		model.setDriverName(soapModel.getDriverName());
		model.setDriverBirthDate(soapModel.getDriverBirthDate());
		model.setDriverNationality(soapModel.getDriverNationality());
		model.setDriverGender(soapModel.getDriverGender());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<PolicyVehDrv> toModels(PolicyVehDrvSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PolicyVehDrv> models = new ArrayList<PolicyVehDrv>(
			soapModels.length);

		for (PolicyVehDrvSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PolicyVehDrvModelImpl() {
	}

	@Override
	public PolicyVehDrvPK getPrimaryKey() {
		return new PolicyVehDrvPK(_policyNo, _vehId, _driverLicenseNo);
	}

	@Override
	public void setPrimaryKey(PolicyVehDrvPK primaryKey) {
		setPolicyNo(primaryKey.policyNo);
		setVehId(primaryKey.vehId);
		setDriverLicenseNo(primaryKey.driverLicenseNo);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new PolicyVehDrvPK(_policyNo, _vehId, _driverLicenseNo);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((PolicyVehDrvPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PolicyVehDrv.class;
	}

	@Override
	public String getModelClassName() {
		return PolicyVehDrv.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PolicyVehDrv, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PolicyVehDrv, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyVehDrv, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PolicyVehDrv)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PolicyVehDrv, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PolicyVehDrv, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PolicyVehDrv)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PolicyVehDrv, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PolicyVehDrv, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PolicyVehDrv>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PolicyVehDrv.class.getClassLoader(), PolicyVehDrv.class,
			ModelWrapper.class);

		try {
			Constructor<PolicyVehDrv> constructor =
				(Constructor<PolicyVehDrv>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PolicyVehDrv, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PolicyVehDrv, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PolicyVehDrv, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PolicyVehDrv, Object>>();
		Map<String, BiConsumer<PolicyVehDrv, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PolicyVehDrv, ?>>();

		attributeGetterFunctions.put("policyNo", PolicyVehDrv::getPolicyNo);
		attributeSetterBiConsumers.put(
			"policyNo",
			(BiConsumer<PolicyVehDrv, String>)PolicyVehDrv::setPolicyNo);
		attributeGetterFunctions.put("vehId", PolicyVehDrv::getVehId);
		attributeSetterBiConsumers.put(
			"vehId", (BiConsumer<PolicyVehDrv, Long>)PolicyVehDrv::setVehId);
		attributeGetterFunctions.put(
			"driverLicenseNo", PolicyVehDrv::getDriverLicenseNo);
		attributeSetterBiConsumers.put(
			"driverLicenseNo",
			(BiConsumer<PolicyVehDrv, String>)PolicyVehDrv::setDriverLicenseNo);
		attributeGetterFunctions.put("driverName", PolicyVehDrv::getDriverName);
		attributeSetterBiConsumers.put(
			"driverName",
			(BiConsumer<PolicyVehDrv, String>)PolicyVehDrv::setDriverName);
		attributeGetterFunctions.put(
			"driverBirthDate", PolicyVehDrv::getDriverBirthDate);
		attributeSetterBiConsumers.put(
			"driverBirthDate",
			(BiConsumer<PolicyVehDrv, Date>)PolicyVehDrv::setDriverBirthDate);
		attributeGetterFunctions.put(
			"driverNationality", PolicyVehDrv::getDriverNationality);
		attributeSetterBiConsumers.put(
			"driverNationality",
			(BiConsumer<PolicyVehDrv, String>)
				PolicyVehDrv::setDriverNationality);
		attributeGetterFunctions.put(
			"driverGender", PolicyVehDrv::getDriverGender);
		attributeSetterBiConsumers.put(
			"driverGender",
			(BiConsumer<PolicyVehDrv, String>)PolicyVehDrv::setDriverGender);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getPolicyNo() {
		if (_policyNo == null) {
			return "";
		}
		else {
			return _policyNo;
		}
	}

	@Override
	public void setPolicyNo(String policyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNo = policyNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPolicyNo() {
		return getColumnOriginalValue("ODS_POLICY_NO");
	}

	@JSON
	@Override
	public long getVehId() {
		return _vehId;
	}

	@Override
	public void setVehId(long vehId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehId = vehId;
	}

	@JSON
	@Override
	public String getDriverLicenseNo() {
		if (_driverLicenseNo == null) {
			return "";
		}
		else {
			return _driverLicenseNo;
		}
	}

	@Override
	public void setDriverLicenseNo(String driverLicenseNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverLicenseNo = driverLicenseNo;
	}

	@JSON
	@Override
	public String getDriverName() {
		if (_driverName == null) {
			return "";
		}
		else {
			return _driverName;
		}
	}

	@Override
	public void setDriverName(String driverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverName = driverName;
	}

	@JSON
	@Override
	public Date getDriverBirthDate() {
		return _driverBirthDate;
	}

	@Override
	public void setDriverBirthDate(Date driverBirthDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverBirthDate = driverBirthDate;
	}

	@JSON
	@Override
	public String getDriverNationality() {
		if (_driverNationality == null) {
			return "";
		}
		else {
			return _driverNationality;
		}
	}

	@Override
	public void setDriverNationality(String driverNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNationality = driverNationality;
	}

	@JSON
	@Override
	public String getDriverGender() {
		if (_driverGender == null) {
			return "";
		}
		else {
			return _driverGender;
		}
	}

	@Override
	public void setDriverGender(String driverGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverGender = driverGender;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public PolicyVehDrv toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PolicyVehDrv>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyVehDrvImpl policyVehDrvImpl = new PolicyVehDrvImpl();

		policyVehDrvImpl.setPolicyNo(getPolicyNo());
		policyVehDrvImpl.setVehId(getVehId());
		policyVehDrvImpl.setDriverLicenseNo(getDriverLicenseNo());
		policyVehDrvImpl.setDriverName(getDriverName());
		policyVehDrvImpl.setDriverBirthDate(getDriverBirthDate());
		policyVehDrvImpl.setDriverNationality(getDriverNationality());
		policyVehDrvImpl.setDriverGender(getDriverGender());

		policyVehDrvImpl.resetOriginalValues();

		return policyVehDrvImpl;
	}

	@Override
	public int compareTo(PolicyVehDrv policyVehDrv) {
		PolicyVehDrvPK primaryKey = policyVehDrv.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PolicyVehDrv)) {
			return false;
		}

		PolicyVehDrv policyVehDrv = (PolicyVehDrv)object;

		PolicyVehDrvPK primaryKey = policyVehDrv.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PolicyVehDrv> toCacheModel() {
		PolicyVehDrvCacheModel policyVehDrvCacheModel =
			new PolicyVehDrvCacheModel();

		policyVehDrvCacheModel.policyVehDrvPK = getPrimaryKey();

		policyVehDrvCacheModel.policyNo = getPolicyNo();

		String policyNo = policyVehDrvCacheModel.policyNo;

		if ((policyNo != null) && (policyNo.length() == 0)) {
			policyVehDrvCacheModel.policyNo = null;
		}

		policyVehDrvCacheModel.vehId = getVehId();

		policyVehDrvCacheModel.driverLicenseNo = getDriverLicenseNo();

		String driverLicenseNo = policyVehDrvCacheModel.driverLicenseNo;

		if ((driverLicenseNo != null) && (driverLicenseNo.length() == 0)) {
			policyVehDrvCacheModel.driverLicenseNo = null;
		}

		policyVehDrvCacheModel.driverName = getDriverName();

		String driverName = policyVehDrvCacheModel.driverName;

		if ((driverName != null) && (driverName.length() == 0)) {
			policyVehDrvCacheModel.driverName = null;
		}

		Date driverBirthDate = getDriverBirthDate();

		if (driverBirthDate != null) {
			policyVehDrvCacheModel.driverBirthDate = driverBirthDate.getTime();
		}
		else {
			policyVehDrvCacheModel.driverBirthDate = Long.MIN_VALUE;
		}

		policyVehDrvCacheModel.driverNationality = getDriverNationality();

		String driverNationality = policyVehDrvCacheModel.driverNationality;

		if ((driverNationality != null) && (driverNationality.length() == 0)) {
			policyVehDrvCacheModel.driverNationality = null;
		}

		policyVehDrvCacheModel.driverGender = getDriverGender();

		String driverGender = policyVehDrvCacheModel.driverGender;

		if ((driverGender != null) && (driverGender.length() == 0)) {
			policyVehDrvCacheModel.driverGender = null;
		}

		return policyVehDrvCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PolicyVehDrv, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PolicyVehDrv, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyVehDrv, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PolicyVehDrv)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PolicyVehDrv, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PolicyVehDrv, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PolicyVehDrv, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PolicyVehDrv)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PolicyVehDrv>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _policyNo;
	private long _vehId;
	private String _driverLicenseNo;
	private String _driverName;
	private Date _driverBirthDate;
	private String _driverNationality;
	private String _driverGender;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PolicyVehDrv, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PolicyVehDrv)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ODS_POLICY_NO", _policyNo);
		_columnOriginalValues.put("ODS_VEH_ID", _vehId);
		_columnOriginalValues.put("ODS_DRIVER_LICENSE_NO", _driverLicenseNo);
		_columnOriginalValues.put("ODS_DRIVER_NAME", _driverName);
		_columnOriginalValues.put("ODS_DRIVER_DOB", _driverBirthDate);
		_columnOriginalValues.put("ODS_DRIVER_NATIONALITY", _driverNationality);
		_columnOriginalValues.put("ODS_DRIVER_GENDER", _driverGender);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ODS_POLICY_NO", "policyNo");
		attributeNames.put("ODS_VEH_ID", "vehId");
		attributeNames.put("ODS_DRIVER_LICENSE_NO", "driverLicenseNo");
		attributeNames.put("ODS_DRIVER_NAME", "driverName");
		attributeNames.put("ODS_DRIVER_DOB", "driverBirthDate");
		attributeNames.put("ODS_DRIVER_NATIONALITY", "driverNationality");
		attributeNames.put("ODS_DRIVER_GENDER", "driverGender");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ODS_POLICY_NO", 1L);

		columnBitmasks.put("ODS_VEH_ID", 2L);

		columnBitmasks.put("ODS_DRIVER_LICENSE_NO", 4L);

		columnBitmasks.put("ODS_DRIVER_NAME", 8L);

		columnBitmasks.put("ODS_DRIVER_DOB", 16L);

		columnBitmasks.put("ODS_DRIVER_NATIONALITY", 32L);

		columnBitmasks.put("ODS_DRIVER_GENDER", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PolicyVehDrv _escapedModel;

}