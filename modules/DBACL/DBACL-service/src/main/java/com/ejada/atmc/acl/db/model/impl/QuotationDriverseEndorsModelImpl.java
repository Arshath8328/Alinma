/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.QuotationDriverseEndors;
import com.ejada.atmc.acl.db.model.QuotationDriverseEndorsInsuredRelationProofBlobModel;
import com.ejada.atmc.acl.db.model.QuotationDriverseEndorsModel;
import com.ejada.atmc.acl.db.model.QuotationDriverseEndorsSoap;
import com.ejada.atmc.acl.db.service.QuotationDriverseEndorsLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuotationDriverseEndors service. Represents a row in the &quot;EJD_ADD_DRIVERS_ENDORS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationDriverseEndorsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationDriverseEndorsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationDriverseEndorsImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationDriverseEndorsModelImpl
	extends BaseModelImpl<QuotationDriverseEndors>
	implements QuotationDriverseEndorsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotation driverse endors model instance should use the <code>QuotationDriverseEndors</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_ADD_DRIVERS_ENDORS";

	public static final Object[][] TABLE_COLUMNS = {
		{"ADD_DRIVER_ID", Types.BIGINT}, {"QUOTATIONS_ID", Types.BIGINT},
		{"POLICY_NUMBER", Types.VARCHAR}, {"DRIVER_DOB", Types.TIMESTAMP},
		{"DRIVER_DOB_H", Types.VARCHAR}, {"DRIVER_GENDER", Types.VARCHAR},
		{"DRIVER_ID", Types.VARCHAR}, {"DRIVER_ID_TYPE", Types.BIGINT},
		{"DRIVER_NAME", Types.VARCHAR}, {"DRIVER_NATIONALITY", Types.VARCHAR},
		{"DRIVER_OCCUP", Types.VARCHAR}, {"IS_DRIVER_UNDER_21", Types.BOOLEAN},
		{"DRIVER_EDU", Types.VARCHAR}, {"DRIVER_NO_CHILD", Types.VARCHAR},
		{"DRIVER_MARITAL_STATUS", Types.VARCHAR},
		{"DRIVER_NO_FAULT", Types.BIGINT}, {"DRIVER_NO_CLAIM", Types.BIGINT},
		{"DRIVER_CONVICS", Types.VARCHAR}, {"DRIVER_MED_CONDS", Types.VARCHAR},
		{"DRIVER_NCD_YEARS", Types.INTEGER},
		{"INSURED_RELATION", Types.VARCHAR},
		{"INSURED_RELATION_PROOF", Types.BLOB},
		{"RELATION_PROOF_FILE_NAME", Types.VARCHAR}, {"STATUS", Types.VARCHAR},
		{"REQUESTED_DATE", Types.TIMESTAMP}, {"BUILD_NO", Types.VARCHAR},
		{"ZIP_CODE", Types.VARCHAR}, {"ADD_NO", Types.VARCHAR},
		{"ST_NAME_EN", Types.VARCHAR}, {"ST_NAME_AR", Types.VARCHAR},
		{"DISTRICT_EN", Types.VARCHAR}, {"DISTRICT_AR", Types.VARCHAR},
		{"CITY_EN", Types.VARCHAR}, {"CITY_AR", Types.VARCHAR},
		{"IS_NAT_ADDRESS", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ADD_DRIVER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTATIONS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("POLICY_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("DRIVER_DOB_H", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_GENDER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_ID_TYPE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NATIONALITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_OCCUP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_DRIVER_UNDER_21", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("DRIVER_EDU", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NO_CHILD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_MARITAL_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NO_FAULT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_NO_CLAIM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_CONVICS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_MED_CONDS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NCD_YEARS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INSURED_RELATION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_RELATION_PROOF", Types.BLOB);
		TABLE_COLUMNS_MAP.put("RELATION_PROOF_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REQUESTED_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("BUILD_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ZIP_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADD_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ST_NAME_EN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ST_NAME_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DISTRICT_EN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DISTRICT_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CITY_EN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CITY_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_NAT_ADDRESS", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_ADD_DRIVERS_ENDORS (ADD_DRIVER_ID LONG not null primary key,QUOTATIONS_ID LONG,POLICY_NUMBER VARCHAR(75) null,DRIVER_DOB DATE null,DRIVER_DOB_H VARCHAR(75) null,DRIVER_GENDER VARCHAR(75) null,DRIVER_ID VARCHAR(75) null,DRIVER_ID_TYPE LONG,DRIVER_NAME VARCHAR(75) null,DRIVER_NATIONALITY VARCHAR(75) null,DRIVER_OCCUP VARCHAR(75) null,IS_DRIVER_UNDER_21 BOOLEAN,DRIVER_EDU VARCHAR(75) null,DRIVER_NO_CHILD VARCHAR(75) null,DRIVER_MARITAL_STATUS VARCHAR(75) null,DRIVER_NO_FAULT LONG,DRIVER_NO_CLAIM LONG,DRIVER_CONVICS VARCHAR(75) null,DRIVER_MED_CONDS VARCHAR(75) null,DRIVER_NCD_YEARS INTEGER,INSURED_RELATION VARCHAR(75) null,INSURED_RELATION_PROOF BLOB,RELATION_PROOF_FILE_NAME VARCHAR(75) null,STATUS VARCHAR(75) null,REQUESTED_DATE DATE null,BUILD_NO VARCHAR(75) null,ZIP_CODE VARCHAR(75) null,ADD_NO VARCHAR(75) null,ST_NAME_EN VARCHAR(75) null,ST_NAME_AR VARCHAR(75) null,DISTRICT_EN VARCHAR(75) null,DISTRICT_AR VARCHAR(75) null,CITY_EN VARCHAR(75) null,CITY_AR VARCHAR(75) null,IS_NAT_ADDRESS BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table EJD_ADD_DRIVERS_ENDORS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotationDriverseEndors.addDriverId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_ADD_DRIVERS_ENDORS.ADD_DRIVER_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DRIVERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYNUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ADDDRIVERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static QuotationDriverseEndors toModel(
		QuotationDriverseEndorsSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		QuotationDriverseEndors model = new QuotationDriverseEndorsImpl();

		model.setAddDriverId(soapModel.getAddDriverId());
		model.setQuotationId(soapModel.getQuotationId());
		model.setPolicyNumber(soapModel.getPolicyNumber());
		model.setDriverDob(soapModel.getDriverDob());
		model.setDriverDobH(soapModel.getDriverDobH());
		model.setDriverGender(soapModel.getDriverGender());
		model.setDriverId(soapModel.getDriverId());
		model.setDriverIdType(soapModel.getDriverIdType());
		model.setDriverName(soapModel.getDriverName());
		model.setDriverNationality(soapModel.getDriverNationality());
		model.setDriverOccup(soapModel.getDriverOccup());
		model.setIsDriverUnder21(soapModel.isIsDriverUnder21());
		model.setDriverEdu(soapModel.getDriverEdu());
		model.setDriverNoChild(soapModel.getDriverNoChild());
		model.setDriverMaritalStatus(soapModel.getDriverMaritalStatus());
		model.setDriverNOFault(soapModel.getDriverNOFault());
		model.setDriverNOClaim(soapModel.getDriverNOClaim());
		model.setDriverConvictions(soapModel.getDriverConvictions());
		model.setDriverMedConds(soapModel.getDriverMedConds());
		model.setNcdYears(soapModel.getNcdYears());
		model.setInsuredRelation(soapModel.getInsuredRelation());
		model.setInsuredRelationProof(soapModel.getInsuredRelationProof());
		model.setInsuredRelationProofFileName(
			soapModel.getInsuredRelationProofFileName());
		model.setStatus(soapModel.getStatus());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setBuildNo(soapModel.getBuildNo());
		model.setZipCode(soapModel.getZipCode());
		model.setAddNo(soapModel.getAddNo());
		model.setStNameEn(soapModel.getStNameEn());
		model.setStNameAr(soapModel.getStNameAr());
		model.setDistrictEn(soapModel.getDistrictEn());
		model.setDistrictAr(soapModel.getDistrictAr());
		model.setCityEn(soapModel.getCityEn());
		model.setCityAr(soapModel.getCityAr());
		model.setIsNatAddress(soapModel.isIsNatAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<QuotationDriverseEndors> toModels(
		QuotationDriverseEndorsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<QuotationDriverseEndors> models =
			new ArrayList<QuotationDriverseEndors>(soapModels.length);

		for (QuotationDriverseEndorsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationDriverseEndorsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addDriverId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddDriverId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addDriverId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuotationDriverseEndors.class;
	}

	@Override
	public String getModelClassName() {
		return QuotationDriverseEndors.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuotationDriverseEndors, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuotationDriverseEndors, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationDriverseEndors, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuotationDriverseEndors)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuotationDriverseEndors, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuotationDriverseEndors, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuotationDriverseEndors)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuotationDriverseEndors, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuotationDriverseEndors, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QuotationDriverseEndors>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QuotationDriverseEndors.class.getClassLoader(),
			QuotationDriverseEndors.class, ModelWrapper.class);

		try {
			Constructor<QuotationDriverseEndors> constructor =
				(Constructor<QuotationDriverseEndors>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QuotationDriverseEndors, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<QuotationDriverseEndors, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuotationDriverseEndors, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<QuotationDriverseEndors, Object>>();
		Map<String, BiConsumer<QuotationDriverseEndors, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<QuotationDriverseEndors, ?>>();

		attributeGetterFunctions.put(
			"addDriverId", QuotationDriverseEndors::getAddDriverId);
		attributeSetterBiConsumers.put(
			"addDriverId",
			(BiConsumer<QuotationDriverseEndors, Long>)
				QuotationDriverseEndors::setAddDriverId);
		attributeGetterFunctions.put(
			"quotationId", QuotationDriverseEndors::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<QuotationDriverseEndors, Long>)
				QuotationDriverseEndors::setQuotationId);
		attributeGetterFunctions.put(
			"policyNumber", QuotationDriverseEndors::getPolicyNumber);
		attributeSetterBiConsumers.put(
			"policyNumber",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setPolicyNumber);
		attributeGetterFunctions.put(
			"driverDob", QuotationDriverseEndors::getDriverDob);
		attributeSetterBiConsumers.put(
			"driverDob",
			(BiConsumer<QuotationDriverseEndors, Date>)
				QuotationDriverseEndors::setDriverDob);
		attributeGetterFunctions.put(
			"driverDobH", QuotationDriverseEndors::getDriverDobH);
		attributeSetterBiConsumers.put(
			"driverDobH",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverDobH);
		attributeGetterFunctions.put(
			"driverGender", QuotationDriverseEndors::getDriverGender);
		attributeSetterBiConsumers.put(
			"driverGender",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverGender);
		attributeGetterFunctions.put(
			"driverId", QuotationDriverseEndors::getDriverId);
		attributeSetterBiConsumers.put(
			"driverId",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverId);
		attributeGetterFunctions.put(
			"driverIdType", QuotationDriverseEndors::getDriverIdType);
		attributeSetterBiConsumers.put(
			"driverIdType",
			(BiConsumer<QuotationDriverseEndors, Long>)
				QuotationDriverseEndors::setDriverIdType);
		attributeGetterFunctions.put(
			"driverName", QuotationDriverseEndors::getDriverName);
		attributeSetterBiConsumers.put(
			"driverName",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverName);
		attributeGetterFunctions.put(
			"driverNationality", QuotationDriverseEndors::getDriverNationality);
		attributeSetterBiConsumers.put(
			"driverNationality",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverNationality);
		attributeGetterFunctions.put(
			"driverOccup", QuotationDriverseEndors::getDriverOccup);
		attributeSetterBiConsumers.put(
			"driverOccup",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverOccup);
		attributeGetterFunctions.put(
			"isDriverUnder21", QuotationDriverseEndors::getIsDriverUnder21);
		attributeSetterBiConsumers.put(
			"isDriverUnder21",
			(BiConsumer<QuotationDriverseEndors, Boolean>)
				QuotationDriverseEndors::setIsDriverUnder21);
		attributeGetterFunctions.put(
			"driverEdu", QuotationDriverseEndors::getDriverEdu);
		attributeSetterBiConsumers.put(
			"driverEdu",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverEdu);
		attributeGetterFunctions.put(
			"driverNoChild", QuotationDriverseEndors::getDriverNoChild);
		attributeSetterBiConsumers.put(
			"driverNoChild",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverNoChild);
		attributeGetterFunctions.put(
			"driverMaritalStatus",
			QuotationDriverseEndors::getDriverMaritalStatus);
		attributeSetterBiConsumers.put(
			"driverMaritalStatus",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverMaritalStatus);
		attributeGetterFunctions.put(
			"driverNOFault", QuotationDriverseEndors::getDriverNOFault);
		attributeSetterBiConsumers.put(
			"driverNOFault",
			(BiConsumer<QuotationDriverseEndors, Long>)
				QuotationDriverseEndors::setDriverNOFault);
		attributeGetterFunctions.put(
			"driverNOClaim", QuotationDriverseEndors::getDriverNOClaim);
		attributeSetterBiConsumers.put(
			"driverNOClaim",
			(BiConsumer<QuotationDriverseEndors, Long>)
				QuotationDriverseEndors::setDriverNOClaim);
		attributeGetterFunctions.put(
			"driverConvictions", QuotationDriverseEndors::getDriverConvictions);
		attributeSetterBiConsumers.put(
			"driverConvictions",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverConvictions);
		attributeGetterFunctions.put(
			"driverMedConds", QuotationDriverseEndors::getDriverMedConds);
		attributeSetterBiConsumers.put(
			"driverMedConds",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDriverMedConds);
		attributeGetterFunctions.put(
			"ncdYears", QuotationDriverseEndors::getNcdYears);
		attributeSetterBiConsumers.put(
			"ncdYears",
			(BiConsumer<QuotationDriverseEndors, Integer>)
				QuotationDriverseEndors::setNcdYears);
		attributeGetterFunctions.put(
			"insuredRelation", QuotationDriverseEndors::getInsuredRelation);
		attributeSetterBiConsumers.put(
			"insuredRelation",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setInsuredRelation);
		attributeGetterFunctions.put(
			"insuredRelationProof",
			QuotationDriverseEndors::getInsuredRelationProof);
		attributeSetterBiConsumers.put(
			"insuredRelationProof",
			(BiConsumer<QuotationDriverseEndors, Blob>)
				QuotationDriverseEndors::setInsuredRelationProof);
		attributeGetterFunctions.put(
			"insuredRelationProofFileName",
			QuotationDriverseEndors::getInsuredRelationProofFileName);
		attributeSetterBiConsumers.put(
			"insuredRelationProofFileName",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setInsuredRelationProofFileName);
		attributeGetterFunctions.put(
			"status", QuotationDriverseEndors::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setStatus);
		attributeGetterFunctions.put(
			"requestedDate", QuotationDriverseEndors::getRequestedDate);
		attributeSetterBiConsumers.put(
			"requestedDate",
			(BiConsumer<QuotationDriverseEndors, Date>)
				QuotationDriverseEndors::setRequestedDate);
		attributeGetterFunctions.put(
			"buildNo", QuotationDriverseEndors::getBuildNo);
		attributeSetterBiConsumers.put(
			"buildNo",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setBuildNo);
		attributeGetterFunctions.put(
			"zipCode", QuotationDriverseEndors::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setZipCode);
		attributeGetterFunctions.put(
			"addNo", QuotationDriverseEndors::getAddNo);
		attributeSetterBiConsumers.put(
			"addNo",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setAddNo);
		attributeGetterFunctions.put(
			"stNameEn", QuotationDriverseEndors::getStNameEn);
		attributeSetterBiConsumers.put(
			"stNameEn",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setStNameEn);
		attributeGetterFunctions.put(
			"stNameAr", QuotationDriverseEndors::getStNameAr);
		attributeSetterBiConsumers.put(
			"stNameAr",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setStNameAr);
		attributeGetterFunctions.put(
			"districtEn", QuotationDriverseEndors::getDistrictEn);
		attributeSetterBiConsumers.put(
			"districtEn",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDistrictEn);
		attributeGetterFunctions.put(
			"districtAr", QuotationDriverseEndors::getDistrictAr);
		attributeSetterBiConsumers.put(
			"districtAr",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setDistrictAr);
		attributeGetterFunctions.put(
			"cityEn", QuotationDriverseEndors::getCityEn);
		attributeSetterBiConsumers.put(
			"cityEn",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setCityEn);
		attributeGetterFunctions.put(
			"cityAr", QuotationDriverseEndors::getCityAr);
		attributeSetterBiConsumers.put(
			"cityAr",
			(BiConsumer<QuotationDriverseEndors, String>)
				QuotationDriverseEndors::setCityAr);
		attributeGetterFunctions.put(
			"isNatAddress", QuotationDriverseEndors::getIsNatAddress);
		attributeSetterBiConsumers.put(
			"isNatAddress",
			(BiConsumer<QuotationDriverseEndors, Boolean>)
				QuotationDriverseEndors::setIsNatAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAddDriverId() {
		return _addDriverId;
	}

	@Override
	public void setAddDriverId(long addDriverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addDriverId = addDriverId;
	}

	@JSON
	@Override
	public long getQuotationId() {
		return _quotationId;
	}

	@Override
	public void setQuotationId(long quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	@JSON
	@Override
	public String getPolicyNumber() {
		if (_policyNumber == null) {
			return "";
		}
		else {
			return _policyNumber;
		}
	}

	@Override
	public void setPolicyNumber(String policyNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNumber = policyNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPolicyNumber() {
		return getColumnOriginalValue("POLICY_NUMBER");
	}

	@JSON
	@Override
	public Date getDriverDob() {
		return _driverDob;
	}

	@Override
	public void setDriverDob(Date driverDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverDob = driverDob;
	}

	@JSON
	@Override
	public String getDriverDobH() {
		if (_driverDobH == null) {
			return "";
		}
		else {
			return _driverDobH;
		}
	}

	@Override
	public void setDriverDobH(String driverDobH) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverDobH = driverDobH;
	}

	@JSON
	@Override
	public String getDriverGender() {
		if (_driverGender == null) {
			return "";
		}
		else {
			return _driverGender;
		}
	}

	@Override
	public void setDriverGender(String driverGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverGender = driverGender;
	}

	@JSON
	@Override
	public String getDriverId() {
		if (_driverId == null) {
			return "";
		}
		else {
			return _driverId;
		}
	}

	@Override
	public void setDriverId(String driverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverId = driverId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDriverId() {
		return getColumnOriginalValue("DRIVER_ID");
	}

	@JSON
	@Override
	public long getDriverIdType() {
		return _driverIdType;
	}

	@Override
	public void setDriverIdType(long driverIdType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverIdType = driverIdType;
	}

	@JSON
	@Override
	public String getDriverName() {
		if (_driverName == null) {
			return "";
		}
		else {
			return _driverName;
		}
	}

	@Override
	public void setDriverName(String driverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverName = driverName;
	}

	@JSON
	@Override
	public String getDriverNationality() {
		if (_driverNationality == null) {
			return "";
		}
		else {
			return _driverNationality;
		}
	}

	@Override
	public void setDriverNationality(String driverNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNationality = driverNationality;
	}

	@JSON
	@Override
	public String getDriverOccup() {
		if (_driverOccup == null) {
			return "";
		}
		else {
			return _driverOccup;
		}
	}

	@Override
	public void setDriverOccup(String driverOccup) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverOccup = driverOccup;
	}

	@JSON
	@Override
	public boolean getIsDriverUnder21() {
		return _isDriverUnder21;
	}

	@JSON
	@Override
	public boolean isIsDriverUnder21() {
		return _isDriverUnder21;
	}

	@Override
	public void setIsDriverUnder21(boolean isDriverUnder21) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isDriverUnder21 = isDriverUnder21;
	}

	@JSON
	@Override
	public String getDriverEdu() {
		if (_driverEdu == null) {
			return "";
		}
		else {
			return _driverEdu;
		}
	}

	@Override
	public void setDriverEdu(String driverEdu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverEdu = driverEdu;
	}

	@JSON
	@Override
	public String getDriverNoChild() {
		if (_driverNoChild == null) {
			return "";
		}
		else {
			return _driverNoChild;
		}
	}

	@Override
	public void setDriverNoChild(String driverNoChild) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNoChild = driverNoChild;
	}

	@JSON
	@Override
	public String getDriverMaritalStatus() {
		if (_driverMaritalStatus == null) {
			return "";
		}
		else {
			return _driverMaritalStatus;
		}
	}

	@Override
	public void setDriverMaritalStatus(String driverMaritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverMaritalStatus = driverMaritalStatus;
	}

	@JSON
	@Override
	public long getDriverNOFault() {
		return _driverNOFault;
	}

	@Override
	public void setDriverNOFault(long driverNOFault) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNOFault = driverNOFault;
	}

	@JSON
	@Override
	public long getDriverNOClaim() {
		return _driverNOClaim;
	}

	@Override
	public void setDriverNOClaim(long driverNOClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNOClaim = driverNOClaim;
	}

	@JSON
	@Override
	public String getDriverConvictions() {
		if (_driverConvictions == null) {
			return "";
		}
		else {
			return _driverConvictions;
		}
	}

	@Override
	public void setDriverConvictions(String driverConvictions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverConvictions = driverConvictions;
	}

	@JSON
	@Override
	public String getDriverMedConds() {
		if (_driverMedConds == null) {
			return "";
		}
		else {
			return _driverMedConds;
		}
	}

	@Override
	public void setDriverMedConds(String driverMedConds) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverMedConds = driverMedConds;
	}

	@JSON
	@Override
	public int getNcdYears() {
		return _ncdYears;
	}

	@Override
	public void setNcdYears(int ncdYears) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncdYears = ncdYears;
	}

	@JSON
	@Override
	public String getInsuredRelation() {
		if (_insuredRelation == null) {
			return "";
		}
		else {
			return _insuredRelation;
		}
	}

	@Override
	public void setInsuredRelation(String insuredRelation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredRelation = insuredRelation;
	}

	@JSON
	@Override
	public Blob getInsuredRelationProof() {
		if (_insuredRelationProofBlobModel == null) {
			try {
				_insuredRelationProofBlobModel =
					QuotationDriverseEndorsLocalServiceUtil.
						getInsuredRelationProofBlobModel(getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_insuredRelationProofBlobModel != null) {
			blob = _insuredRelationProofBlobModel.getInsuredRelationProofBlob();
		}

		return blob;
	}

	@Override
	public void setInsuredRelationProof(Blob insuredRelationProof) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_insuredRelationProofBlobModel == null) {
			_insuredRelationProofBlobModel =
				new QuotationDriverseEndorsInsuredRelationProofBlobModel(
					getPrimaryKey(), insuredRelationProof);
		}
		else {
			_insuredRelationProofBlobModel.setInsuredRelationProofBlob(
				insuredRelationProof);
		}
	}

	@JSON
	@Override
	public String getInsuredRelationProofFileName() {
		if (_insuredRelationProofFileName == null) {
			return "";
		}
		else {
			return _insuredRelationProofFileName;
		}
	}

	@Override
	public void setInsuredRelationProofFileName(
		String insuredRelationProofFileName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredRelationProofFileName = insuredRelationProofFileName;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("STATUS");
	}

	@JSON
	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestedDate = requestedDate;
	}

	@JSON
	@Override
	public String getBuildNo() {
		if (_buildNo == null) {
			return "";
		}
		else {
			return _buildNo;
		}
	}

	@Override
	public void setBuildNo(String buildNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_buildNo = buildNo;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getAddNo() {
		if (_addNo == null) {
			return "";
		}
		else {
			return _addNo;
		}
	}

	@Override
	public void setAddNo(String addNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addNo = addNo;
	}

	@JSON
	@Override
	public String getStNameEn() {
		if (_stNameEn == null) {
			return "";
		}
		else {
			return _stNameEn;
		}
	}

	@Override
	public void setStNameEn(String stNameEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stNameEn = stNameEn;
	}

	@JSON
	@Override
	public String getStNameAr() {
		if (_stNameAr == null) {
			return "";
		}
		else {
			return _stNameAr;
		}
	}

	@Override
	public void setStNameAr(String stNameAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stNameAr = stNameAr;
	}

	@JSON
	@Override
	public String getDistrictEn() {
		if (_districtEn == null) {
			return "";
		}
		else {
			return _districtEn;
		}
	}

	@Override
	public void setDistrictEn(String districtEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtEn = districtEn;
	}

	@JSON
	@Override
	public String getDistrictAr() {
		if (_districtAr == null) {
			return "";
		}
		else {
			return _districtAr;
		}
	}

	@Override
	public void setDistrictAr(String districtAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtAr = districtAr;
	}

	@JSON
	@Override
	public String getCityEn() {
		if (_cityEn == null) {
			return "";
		}
		else {
			return _cityEn;
		}
	}

	@Override
	public void setCityEn(String cityEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityEn = cityEn;
	}

	@JSON
	@Override
	public String getCityAr() {
		if (_cityAr == null) {
			return "";
		}
		else {
			return _cityAr;
		}
	}

	@Override
	public void setCityAr(String cityAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityAr = cityAr;
	}

	@JSON
	@Override
	public boolean getIsNatAddress() {
		return _isNatAddress;
	}

	@JSON
	@Override
	public boolean isIsNatAddress() {
		return _isNatAddress;
	}

	@Override
	public void setIsNatAddress(boolean isNatAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isNatAddress = isNatAddress;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, QuotationDriverseEndors.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuotationDriverseEndors toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuotationDriverseEndors>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationDriverseEndorsImpl quotationDriverseEndorsImpl =
			new QuotationDriverseEndorsImpl();

		quotationDriverseEndorsImpl.setAddDriverId(getAddDriverId());
		quotationDriverseEndorsImpl.setQuotationId(getQuotationId());
		quotationDriverseEndorsImpl.setPolicyNumber(getPolicyNumber());
		quotationDriverseEndorsImpl.setDriverDob(getDriverDob());
		quotationDriverseEndorsImpl.setDriverDobH(getDriverDobH());
		quotationDriverseEndorsImpl.setDriverGender(getDriverGender());
		quotationDriverseEndorsImpl.setDriverId(getDriverId());
		quotationDriverseEndorsImpl.setDriverIdType(getDriverIdType());
		quotationDriverseEndorsImpl.setDriverName(getDriverName());
		quotationDriverseEndorsImpl.setDriverNationality(
			getDriverNationality());
		quotationDriverseEndorsImpl.setDriverOccup(getDriverOccup());
		quotationDriverseEndorsImpl.setIsDriverUnder21(isIsDriverUnder21());
		quotationDriverseEndorsImpl.setDriverEdu(getDriverEdu());
		quotationDriverseEndorsImpl.setDriverNoChild(getDriverNoChild());
		quotationDriverseEndorsImpl.setDriverMaritalStatus(
			getDriverMaritalStatus());
		quotationDriverseEndorsImpl.setDriverNOFault(getDriverNOFault());
		quotationDriverseEndorsImpl.setDriverNOClaim(getDriverNOClaim());
		quotationDriverseEndorsImpl.setDriverConvictions(
			getDriverConvictions());
		quotationDriverseEndorsImpl.setDriverMedConds(getDriverMedConds());
		quotationDriverseEndorsImpl.setNcdYears(getNcdYears());
		quotationDriverseEndorsImpl.setInsuredRelation(getInsuredRelation());
		quotationDriverseEndorsImpl.setInsuredRelationProofFileName(
			getInsuredRelationProofFileName());
		quotationDriverseEndorsImpl.setStatus(getStatus());
		quotationDriverseEndorsImpl.setRequestedDate(getRequestedDate());
		quotationDriverseEndorsImpl.setBuildNo(getBuildNo());
		quotationDriverseEndorsImpl.setZipCode(getZipCode());
		quotationDriverseEndorsImpl.setAddNo(getAddNo());
		quotationDriverseEndorsImpl.setStNameEn(getStNameEn());
		quotationDriverseEndorsImpl.setStNameAr(getStNameAr());
		quotationDriverseEndorsImpl.setDistrictEn(getDistrictEn());
		quotationDriverseEndorsImpl.setDistrictAr(getDistrictAr());
		quotationDriverseEndorsImpl.setCityEn(getCityEn());
		quotationDriverseEndorsImpl.setCityAr(getCityAr());
		quotationDriverseEndorsImpl.setIsNatAddress(isIsNatAddress());

		quotationDriverseEndorsImpl.resetOriginalValues();

		return quotationDriverseEndorsImpl;
	}

	@Override
	public int compareTo(QuotationDriverseEndors quotationDriverseEndors) {
		long primaryKey = quotationDriverseEndors.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuotationDriverseEndors)) {
			return false;
		}

		QuotationDriverseEndors quotationDriverseEndors =
			(QuotationDriverseEndors)object;

		long primaryKey = quotationDriverseEndors.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_insuredRelationProofBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotationDriverseEndors> toCacheModel() {
		QuotationDriverseEndorsCacheModel quotationDriverseEndorsCacheModel =
			new QuotationDriverseEndorsCacheModel();

		quotationDriverseEndorsCacheModel.addDriverId = getAddDriverId();

		quotationDriverseEndorsCacheModel.quotationId = getQuotationId();

		quotationDriverseEndorsCacheModel.policyNumber = getPolicyNumber();

		String policyNumber = quotationDriverseEndorsCacheModel.policyNumber;

		if ((policyNumber != null) && (policyNumber.length() == 0)) {
			quotationDriverseEndorsCacheModel.policyNumber = null;
		}

		Date driverDob = getDriverDob();

		if (driverDob != null) {
			quotationDriverseEndorsCacheModel.driverDob = driverDob.getTime();
		}
		else {
			quotationDriverseEndorsCacheModel.driverDob = Long.MIN_VALUE;
		}

		quotationDriverseEndorsCacheModel.driverDobH = getDriverDobH();

		String driverDobH = quotationDriverseEndorsCacheModel.driverDobH;

		if ((driverDobH != null) && (driverDobH.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverDobH = null;
		}

		quotationDriverseEndorsCacheModel.driverGender = getDriverGender();

		String driverGender = quotationDriverseEndorsCacheModel.driverGender;

		if ((driverGender != null) && (driverGender.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverGender = null;
		}

		quotationDriverseEndorsCacheModel.driverId = getDriverId();

		String driverId = quotationDriverseEndorsCacheModel.driverId;

		if ((driverId != null) && (driverId.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverId = null;
		}

		quotationDriverseEndorsCacheModel.driverIdType = getDriverIdType();

		quotationDriverseEndorsCacheModel.driverName = getDriverName();

		String driverName = quotationDriverseEndorsCacheModel.driverName;

		if ((driverName != null) && (driverName.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverName = null;
		}

		quotationDriverseEndorsCacheModel.driverNationality =
			getDriverNationality();

		String driverNationality =
			quotationDriverseEndorsCacheModel.driverNationality;

		if ((driverNationality != null) && (driverNationality.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverNationality = null;
		}

		quotationDriverseEndorsCacheModel.driverOccup = getDriverOccup();

		String driverOccup = quotationDriverseEndorsCacheModel.driverOccup;

		if ((driverOccup != null) && (driverOccup.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverOccup = null;
		}

		quotationDriverseEndorsCacheModel.isDriverUnder21 = isIsDriverUnder21();

		quotationDriverseEndorsCacheModel.driverEdu = getDriverEdu();

		String driverEdu = quotationDriverseEndorsCacheModel.driverEdu;

		if ((driverEdu != null) && (driverEdu.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverEdu = null;
		}

		quotationDriverseEndorsCacheModel.driverNoChild = getDriverNoChild();

		String driverNoChild = quotationDriverseEndorsCacheModel.driverNoChild;

		if ((driverNoChild != null) && (driverNoChild.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverNoChild = null;
		}

		quotationDriverseEndorsCacheModel.driverMaritalStatus =
			getDriverMaritalStatus();

		String driverMaritalStatus =
			quotationDriverseEndorsCacheModel.driverMaritalStatus;

		if ((driverMaritalStatus != null) &&
			(driverMaritalStatus.length() == 0)) {

			quotationDriverseEndorsCacheModel.driverMaritalStatus = null;
		}

		quotationDriverseEndorsCacheModel.driverNOFault = getDriverNOFault();

		quotationDriverseEndorsCacheModel.driverNOClaim = getDriverNOClaim();

		quotationDriverseEndorsCacheModel.driverConvictions =
			getDriverConvictions();

		String driverConvictions =
			quotationDriverseEndorsCacheModel.driverConvictions;

		if ((driverConvictions != null) && (driverConvictions.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverConvictions = null;
		}

		quotationDriverseEndorsCacheModel.driverMedConds = getDriverMedConds();

		String driverMedConds =
			quotationDriverseEndorsCacheModel.driverMedConds;

		if ((driverMedConds != null) && (driverMedConds.length() == 0)) {
			quotationDriverseEndorsCacheModel.driverMedConds = null;
		}

		quotationDriverseEndorsCacheModel.ncdYears = getNcdYears();

		quotationDriverseEndorsCacheModel.insuredRelation =
			getInsuredRelation();

		String insuredRelation =
			quotationDriverseEndorsCacheModel.insuredRelation;

		if ((insuredRelation != null) && (insuredRelation.length() == 0)) {
			quotationDriverseEndorsCacheModel.insuredRelation = null;
		}

		quotationDriverseEndorsCacheModel.insuredRelationProofFileName =
			getInsuredRelationProofFileName();

		String insuredRelationProofFileName =
			quotationDriverseEndorsCacheModel.insuredRelationProofFileName;

		if ((insuredRelationProofFileName != null) &&
			(insuredRelationProofFileName.length() == 0)) {

			quotationDriverseEndorsCacheModel.insuredRelationProofFileName =
				null;
		}

		quotationDriverseEndorsCacheModel.status = getStatus();

		String status = quotationDriverseEndorsCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			quotationDriverseEndorsCacheModel.status = null;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			quotationDriverseEndorsCacheModel.requestedDate =
				requestedDate.getTime();
		}
		else {
			quotationDriverseEndorsCacheModel.requestedDate = Long.MIN_VALUE;
		}

		quotationDriverseEndorsCacheModel.buildNo = getBuildNo();

		String buildNo = quotationDriverseEndorsCacheModel.buildNo;

		if ((buildNo != null) && (buildNo.length() == 0)) {
			quotationDriverseEndorsCacheModel.buildNo = null;
		}

		quotationDriverseEndorsCacheModel.zipCode = getZipCode();

		String zipCode = quotationDriverseEndorsCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			quotationDriverseEndorsCacheModel.zipCode = null;
		}

		quotationDriverseEndorsCacheModel.addNo = getAddNo();

		String addNo = quotationDriverseEndorsCacheModel.addNo;

		if ((addNo != null) && (addNo.length() == 0)) {
			quotationDriverseEndorsCacheModel.addNo = null;
		}

		quotationDriverseEndorsCacheModel.stNameEn = getStNameEn();

		String stNameEn = quotationDriverseEndorsCacheModel.stNameEn;

		if ((stNameEn != null) && (stNameEn.length() == 0)) {
			quotationDriverseEndorsCacheModel.stNameEn = null;
		}

		quotationDriverseEndorsCacheModel.stNameAr = getStNameAr();

		String stNameAr = quotationDriverseEndorsCacheModel.stNameAr;

		if ((stNameAr != null) && (stNameAr.length() == 0)) {
			quotationDriverseEndorsCacheModel.stNameAr = null;
		}

		quotationDriverseEndorsCacheModel.districtEn = getDistrictEn();

		String districtEn = quotationDriverseEndorsCacheModel.districtEn;

		if ((districtEn != null) && (districtEn.length() == 0)) {
			quotationDriverseEndorsCacheModel.districtEn = null;
		}

		quotationDriverseEndorsCacheModel.districtAr = getDistrictAr();

		String districtAr = quotationDriverseEndorsCacheModel.districtAr;

		if ((districtAr != null) && (districtAr.length() == 0)) {
			quotationDriverseEndorsCacheModel.districtAr = null;
		}

		quotationDriverseEndorsCacheModel.cityEn = getCityEn();

		String cityEn = quotationDriverseEndorsCacheModel.cityEn;

		if ((cityEn != null) && (cityEn.length() == 0)) {
			quotationDriverseEndorsCacheModel.cityEn = null;
		}

		quotationDriverseEndorsCacheModel.cityAr = getCityAr();

		String cityAr = quotationDriverseEndorsCacheModel.cityAr;

		if ((cityAr != null) && (cityAr.length() == 0)) {
			quotationDriverseEndorsCacheModel.cityAr = null;
		}

		quotationDriverseEndorsCacheModel.isNatAddress = isIsNatAddress();

		return quotationDriverseEndorsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(71);

		sb.append("{addDriverId=");
		sb.append(getAddDriverId());
		sb.append(", quotationId=");
		sb.append(getQuotationId());
		sb.append(", policyNumber=");
		sb.append(getPolicyNumber());
		sb.append(", driverDob=");
		sb.append(getDriverDob());
		sb.append(", driverDobH=");
		sb.append(getDriverDobH());
		sb.append(", driverGender=");
		sb.append(getDriverGender());
		sb.append(", driverId=");
		sb.append(getDriverId());
		sb.append(", driverIdType=");
		sb.append(getDriverIdType());
		sb.append(", driverName=");
		sb.append(getDriverName());
		sb.append(", driverNationality=");
		sb.append(getDriverNationality());
		sb.append(", driverOccup=");
		sb.append(getDriverOccup());
		sb.append(", isDriverUnder21=");
		sb.append(isIsDriverUnder21());
		sb.append(", driverEdu=");
		sb.append(getDriverEdu());
		sb.append(", driverNoChild=");
		sb.append(getDriverNoChild());
		sb.append(", driverMaritalStatus=");
		sb.append(getDriverMaritalStatus());
		sb.append(", driverNOFault=");
		sb.append(getDriverNOFault());
		sb.append(", driverNOClaim=");
		sb.append(getDriverNOClaim());
		sb.append(", driverConvictions=");
		sb.append(getDriverConvictions());
		sb.append(", driverMedConds=");
		sb.append(getDriverMedConds());
		sb.append(", ncdYears=");
		sb.append(getNcdYears());
		sb.append(", insuredRelation=");
		sb.append(getInsuredRelation());
		sb.append(", insuredRelationProofFileName=");
		sb.append(getInsuredRelationProofFileName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", buildNo=");
		sb.append(getBuildNo());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append(", addNo=");
		sb.append(getAddNo());
		sb.append(", stNameEn=");
		sb.append(getStNameEn());
		sb.append(", stNameAr=");
		sb.append(getStNameAr());
		sb.append(", districtEn=");
		sb.append(getDistrictEn());
		sb.append(", districtAr=");
		sb.append(getDistrictAr());
		sb.append(", cityEn=");
		sb.append(getCityEn());
		sb.append(", cityAr=");
		sb.append(getCityAr());
		sb.append(", isNatAddress=");
		sb.append(isIsNatAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(109);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.QuotationDriverseEndors");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>addDriverId</column-name><column-value><![CDATA[");
		sb.append(getAddDriverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotationId</column-name><column-value><![CDATA[");
		sb.append(getQuotationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>policyNumber</column-name><column-value><![CDATA[");
		sb.append(getPolicyNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverDob</column-name><column-value><![CDATA[");
		sb.append(getDriverDob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverDobH</column-name><column-value><![CDATA[");
		sb.append(getDriverDobH());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverGender</column-name><column-value><![CDATA[");
		sb.append(getDriverGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverId</column-name><column-value><![CDATA[");
		sb.append(getDriverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverIdType</column-name><column-value><![CDATA[");
		sb.append(getDriverIdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverName</column-name><column-value><![CDATA[");
		sb.append(getDriverName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNationality</column-name><column-value><![CDATA[");
		sb.append(getDriverNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverOccup</column-name><column-value><![CDATA[");
		sb.append(getDriverOccup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDriverUnder21</column-name><column-value><![CDATA[");
		sb.append(isIsDriverUnder21());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverEdu</column-name><column-value><![CDATA[");
		sb.append(getDriverEdu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNoChild</column-name><column-value><![CDATA[");
		sb.append(getDriverNoChild());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverMaritalStatus</column-name><column-value><![CDATA[");
		sb.append(getDriverMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNOFault</column-name><column-value><![CDATA[");
		sb.append(getDriverNOFault());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNOClaim</column-name><column-value><![CDATA[");
		sb.append(getDriverNOClaim());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverConvictions</column-name><column-value><![CDATA[");
		sb.append(getDriverConvictions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverMedConds</column-name><column-value><![CDATA[");
		sb.append(getDriverMedConds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ncdYears</column-name><column-value><![CDATA[");
		sb.append(getNcdYears());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredRelation</column-name><column-value><![CDATA[");
		sb.append(getInsuredRelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredRelationProofFileName</column-name><column-value><![CDATA[");
		sb.append(getInsuredRelationProofFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildNo</column-name><column-value><![CDATA[");
		sb.append(getBuildNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addNo</column-name><column-value><![CDATA[");
		sb.append(getAddNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stNameEn</column-name><column-value><![CDATA[");
		sb.append(getStNameEn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stNameAr</column-name><column-value><![CDATA[");
		sb.append(getStNameAr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>districtEn</column-name><column-value><![CDATA[");
		sb.append(getDistrictEn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>districtAr</column-name><column-value><![CDATA[");
		sb.append(getDistrictAr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityEn</column-name><column-value><![CDATA[");
		sb.append(getCityEn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityAr</column-name><column-value><![CDATA[");
		sb.append(getCityAr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isNatAddress</column-name><column-value><![CDATA[");
		sb.append(isIsNatAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, QuotationDriverseEndors>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _addDriverId;
	private long _quotationId;
	private String _policyNumber;
	private Date _driverDob;
	private String _driverDobH;
	private String _driverGender;
	private String _driverId;
	private long _driverIdType;
	private String _driverName;
	private String _driverNationality;
	private String _driverOccup;
	private boolean _isDriverUnder21;
	private String _driverEdu;
	private String _driverNoChild;
	private String _driverMaritalStatus;
	private long _driverNOFault;
	private long _driverNOClaim;
	private String _driverConvictions;
	private String _driverMedConds;
	private int _ncdYears;
	private String _insuredRelation;
	private QuotationDriverseEndorsInsuredRelationProofBlobModel
		_insuredRelationProofBlobModel;
	private String _insuredRelationProofFileName;
	private String _status;
	private Date _requestedDate;
	private String _buildNo;
	private String _zipCode;
	private String _addNo;
	private String _stNameEn;
	private String _stNameAr;
	private String _districtEn;
	private String _districtAr;
	private String _cityEn;
	private String _cityAr;
	private boolean _isNatAddress;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuotationDriverseEndors, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuotationDriverseEndors)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ADD_DRIVER_ID", _addDriverId);
		_columnOriginalValues.put("QUOTATIONS_ID", _quotationId);
		_columnOriginalValues.put("POLICY_NUMBER", _policyNumber);
		_columnOriginalValues.put("DRIVER_DOB", _driverDob);
		_columnOriginalValues.put("DRIVER_DOB_H", _driverDobH);
		_columnOriginalValues.put("DRIVER_GENDER", _driverGender);
		_columnOriginalValues.put("DRIVER_ID", _driverId);
		_columnOriginalValues.put("DRIVER_ID_TYPE", _driverIdType);
		_columnOriginalValues.put("DRIVER_NAME", _driverName);
		_columnOriginalValues.put("DRIVER_NATIONALITY", _driverNationality);
		_columnOriginalValues.put("DRIVER_OCCUP", _driverOccup);
		_columnOriginalValues.put("IS_DRIVER_UNDER_21", _isDriverUnder21);
		_columnOriginalValues.put("DRIVER_EDU", _driverEdu);
		_columnOriginalValues.put("DRIVER_NO_CHILD", _driverNoChild);
		_columnOriginalValues.put(
			"DRIVER_MARITAL_STATUS", _driverMaritalStatus);
		_columnOriginalValues.put("DRIVER_NO_FAULT", _driverNOFault);
		_columnOriginalValues.put("DRIVER_NO_CLAIM", _driverNOClaim);
		_columnOriginalValues.put("DRIVER_CONVICS", _driverConvictions);
		_columnOriginalValues.put("DRIVER_MED_CONDS", _driverMedConds);
		_columnOriginalValues.put("DRIVER_NCD_YEARS", _ncdYears);
		_columnOriginalValues.put("INSURED_RELATION", _insuredRelation);
		_columnOriginalValues.put(
			"RELATION_PROOF_FILE_NAME", _insuredRelationProofFileName);
		_columnOriginalValues.put("STATUS", _status);
		_columnOriginalValues.put("REQUESTED_DATE", _requestedDate);
		_columnOriginalValues.put("BUILD_NO", _buildNo);
		_columnOriginalValues.put("ZIP_CODE", _zipCode);
		_columnOriginalValues.put("ADD_NO", _addNo);
		_columnOriginalValues.put("ST_NAME_EN", _stNameEn);
		_columnOriginalValues.put("ST_NAME_AR", _stNameAr);
		_columnOriginalValues.put("DISTRICT_EN", _districtEn);
		_columnOriginalValues.put("DISTRICT_AR", _districtAr);
		_columnOriginalValues.put("CITY_EN", _cityEn);
		_columnOriginalValues.put("CITY_AR", _cityAr);
		_columnOriginalValues.put("IS_NAT_ADDRESS", _isNatAddress);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ADD_DRIVER_ID", "addDriverId");
		attributeNames.put("QUOTATIONS_ID", "quotationId");
		attributeNames.put("POLICY_NUMBER", "policyNumber");
		attributeNames.put("DRIVER_DOB", "driverDob");
		attributeNames.put("DRIVER_DOB_H", "driverDobH");
		attributeNames.put("DRIVER_GENDER", "driverGender");
		attributeNames.put("DRIVER_ID", "driverId");
		attributeNames.put("DRIVER_ID_TYPE", "driverIdType");
		attributeNames.put("DRIVER_NAME", "driverName");
		attributeNames.put("DRIVER_NATIONALITY", "driverNationality");
		attributeNames.put("DRIVER_OCCUP", "driverOccup");
		attributeNames.put("IS_DRIVER_UNDER_21", "isDriverUnder21");
		attributeNames.put("DRIVER_EDU", "driverEdu");
		attributeNames.put("DRIVER_NO_CHILD", "driverNoChild");
		attributeNames.put("DRIVER_MARITAL_STATUS", "driverMaritalStatus");
		attributeNames.put("DRIVER_NO_FAULT", "driverNOFault");
		attributeNames.put("DRIVER_NO_CLAIM", "driverNOClaim");
		attributeNames.put("DRIVER_CONVICS", "driverConvictions");
		attributeNames.put("DRIVER_MED_CONDS", "driverMedConds");
		attributeNames.put("DRIVER_NCD_YEARS", "ncdYears");
		attributeNames.put("INSURED_RELATION", "insuredRelation");
		attributeNames.put("INSURED_RELATION_PROOF", "insuredRelationProof");
		attributeNames.put(
			"RELATION_PROOF_FILE_NAME", "insuredRelationProofFileName");
		attributeNames.put("STATUS", "status");
		attributeNames.put("REQUESTED_DATE", "requestedDate");
		attributeNames.put("BUILD_NO", "buildNo");
		attributeNames.put("ZIP_CODE", "zipCode");
		attributeNames.put("ADD_NO", "addNo");
		attributeNames.put("ST_NAME_EN", "stNameEn");
		attributeNames.put("ST_NAME_AR", "stNameAr");
		attributeNames.put("DISTRICT_EN", "districtEn");
		attributeNames.put("DISTRICT_AR", "districtAr");
		attributeNames.put("CITY_EN", "cityEn");
		attributeNames.put("CITY_AR", "cityAr");
		attributeNames.put("IS_NAT_ADDRESS", "isNatAddress");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ADD_DRIVER_ID", 1L);

		columnBitmasks.put("QUOTATIONS_ID", 2L);

		columnBitmasks.put("POLICY_NUMBER", 4L);

		columnBitmasks.put("DRIVER_DOB", 8L);

		columnBitmasks.put("DRIVER_DOB_H", 16L);

		columnBitmasks.put("DRIVER_GENDER", 32L);

		columnBitmasks.put("DRIVER_ID", 64L);

		columnBitmasks.put("DRIVER_ID_TYPE", 128L);

		columnBitmasks.put("DRIVER_NAME", 256L);

		columnBitmasks.put("DRIVER_NATIONALITY", 512L);

		columnBitmasks.put("DRIVER_OCCUP", 1024L);

		columnBitmasks.put("IS_DRIVER_UNDER_21", 2048L);

		columnBitmasks.put("DRIVER_EDU", 4096L);

		columnBitmasks.put("DRIVER_NO_CHILD", 8192L);

		columnBitmasks.put("DRIVER_MARITAL_STATUS", 16384L);

		columnBitmasks.put("DRIVER_NO_FAULT", 32768L);

		columnBitmasks.put("DRIVER_NO_CLAIM", 65536L);

		columnBitmasks.put("DRIVER_CONVICS", 131072L);

		columnBitmasks.put("DRIVER_MED_CONDS", 262144L);

		columnBitmasks.put("DRIVER_NCD_YEARS", 524288L);

		columnBitmasks.put("INSURED_RELATION", 1048576L);

		columnBitmasks.put("INSURED_RELATION_PROOF", 2097152L);

		columnBitmasks.put("RELATION_PROOF_FILE_NAME", 4194304L);

		columnBitmasks.put("STATUS", 8388608L);

		columnBitmasks.put("REQUESTED_DATE", 16777216L);

		columnBitmasks.put("BUILD_NO", 33554432L);

		columnBitmasks.put("ZIP_CODE", 67108864L);

		columnBitmasks.put("ADD_NO", 134217728L);

		columnBitmasks.put("ST_NAME_EN", 268435456L);

		columnBitmasks.put("ST_NAME_AR", 536870912L);

		columnBitmasks.put("DISTRICT_EN", 1073741824L);

		columnBitmasks.put("DISTRICT_AR", 2147483648L);

		columnBitmasks.put("CITY_EN", 4294967296L);

		columnBitmasks.put("CITY_AR", 8589934592L);

		columnBitmasks.put("IS_NAT_ADDRESS", 17179869184L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuotationDriverseEndors _escapedModel;

}