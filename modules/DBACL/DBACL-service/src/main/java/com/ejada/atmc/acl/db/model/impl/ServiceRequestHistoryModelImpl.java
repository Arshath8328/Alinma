/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.ServiceRequestHistory;
import com.ejada.atmc.acl.db.model.ServiceRequestHistoryModel;
import com.ejada.atmc.acl.db.model.ServiceRequestHistorySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ServiceRequestHistory service. Represents a row in the &quot;SERVICE_REQUEST_ACTION_HISTORY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ServiceRequestHistoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceRequestHistoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServiceRequestHistoryImpl
 * @generated
 */
@JSON(strict = true)
public class ServiceRequestHistoryModelImpl
	extends BaseModelImpl<ServiceRequestHistory>
	implements ServiceRequestHistoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service request history model instance should use the <code>ServiceRequestHistory</code> interface instead.
	 */
	public static final String TABLE_NAME = "SERVICE_REQUEST_ACTION_HISTORY";

	public static final Object[][] TABLE_COLUMNS = {
		{"ACTION_ID", Types.BIGINT}, {"REFERENCE_NO", Types.VARCHAR},
		{"ACTION_TYPE", Types.VARCHAR}, {"ACTION_DETAILS", Types.VARCHAR},
		{"ACTION_REMARKS", Types.VARCHAR}, {"ACTION_DATE", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ACTION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("REFERENCE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTION_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTION_DETAILS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTION_REMARKS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTION_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SERVICE_REQUEST_ACTION_HISTORY (ACTION_ID LONG not null primary key,REFERENCE_NO VARCHAR(75) null,ACTION_TYPE VARCHAR(75) null,ACTION_DETAILS VARCHAR(75) null,ACTION_REMARKS VARCHAR(75) null,ACTION_DATE DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table SERVICE_REQUEST_ACTION_HISTORY";

	public static final String ORDER_BY_JPQL =
		" ORDER BY serviceRequestHistory.ACTION_ID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SERVICE_REQUEST_ACTION_HISTORY.ACTION_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REFERENCE_NO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ACTION_ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ServiceRequestHistory toModel(
		ServiceRequestHistorySoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		ServiceRequestHistory model = new ServiceRequestHistoryImpl();

		model.setACTION_ID(soapModel.getACTION_ID());
		model.setREFERENCE_NO(soapModel.getREFERENCE_NO());
		model.setACTION_TYPE(soapModel.getACTION_TYPE());
		model.setACTION_DETAILS(soapModel.getACTION_DETAILS());
		model.setACTION_REMARKS(soapModel.getACTION_REMARKS());
		model.setACTION_DATE(soapModel.getACTION_DATE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ServiceRequestHistory> toModels(
		ServiceRequestHistorySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ServiceRequestHistory> models =
			new ArrayList<ServiceRequestHistory>(soapModels.length);

		for (ServiceRequestHistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ServiceRequestHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ACTION_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setACTION_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ACTION_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceRequestHistory.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceRequestHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ServiceRequestHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ServiceRequestHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceRequestHistory, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ServiceRequestHistory)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ServiceRequestHistory, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ServiceRequestHistory, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ServiceRequestHistory)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ServiceRequestHistory, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ServiceRequestHistory, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ServiceRequestHistory>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ServiceRequestHistory.class.getClassLoader(),
			ServiceRequestHistory.class, ModelWrapper.class);

		try {
			Constructor<ServiceRequestHistory> constructor =
				(Constructor<ServiceRequestHistory>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ServiceRequestHistory, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ServiceRequestHistory, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ServiceRequestHistory, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ServiceRequestHistory, Object>>();
		Map<String, BiConsumer<ServiceRequestHistory, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ServiceRequestHistory, ?>>();

		attributeGetterFunctions.put(
			"ACTION_ID", ServiceRequestHistory::getACTION_ID);
		attributeSetterBiConsumers.put(
			"ACTION_ID",
			(BiConsumer<ServiceRequestHistory, Long>)
				ServiceRequestHistory::setACTION_ID);
		attributeGetterFunctions.put(
			"REFERENCE_NO", ServiceRequestHistory::getREFERENCE_NO);
		attributeSetterBiConsumers.put(
			"REFERENCE_NO",
			(BiConsumer<ServiceRequestHistory, String>)
				ServiceRequestHistory::setREFERENCE_NO);
		attributeGetterFunctions.put(
			"ACTION_TYPE", ServiceRequestHistory::getACTION_TYPE);
		attributeSetterBiConsumers.put(
			"ACTION_TYPE",
			(BiConsumer<ServiceRequestHistory, String>)
				ServiceRequestHistory::setACTION_TYPE);
		attributeGetterFunctions.put(
			"ACTION_DETAILS", ServiceRequestHistory::getACTION_DETAILS);
		attributeSetterBiConsumers.put(
			"ACTION_DETAILS",
			(BiConsumer<ServiceRequestHistory, String>)
				ServiceRequestHistory::setACTION_DETAILS);
		attributeGetterFunctions.put(
			"ACTION_REMARKS", ServiceRequestHistory::getACTION_REMARKS);
		attributeSetterBiConsumers.put(
			"ACTION_REMARKS",
			(BiConsumer<ServiceRequestHistory, String>)
				ServiceRequestHistory::setACTION_REMARKS);
		attributeGetterFunctions.put(
			"ACTION_DATE", ServiceRequestHistory::getACTION_DATE);
		attributeSetterBiConsumers.put(
			"ACTION_DATE",
			(BiConsumer<ServiceRequestHistory, Date>)
				ServiceRequestHistory::setACTION_DATE);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getACTION_ID() {
		return _ACTION_ID;
	}

	@Override
	public void setACTION_ID(long ACTION_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ACTION_ID = ACTION_ID;
	}

	@JSON
	@Override
	public String getREFERENCE_NO() {
		if (_REFERENCE_NO == null) {
			return "";
		}
		else {
			return _REFERENCE_NO;
		}
	}

	@Override
	public void setREFERENCE_NO(String REFERENCE_NO) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_REFERENCE_NO = REFERENCE_NO;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalREFERENCE_NO() {
		return getColumnOriginalValue("REFERENCE_NO");
	}

	@JSON
	@Override
	public String getACTION_TYPE() {
		if (_ACTION_TYPE == null) {
			return "";
		}
		else {
			return _ACTION_TYPE;
		}
	}

	@Override
	public void setACTION_TYPE(String ACTION_TYPE) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ACTION_TYPE = ACTION_TYPE;
	}

	@JSON
	@Override
	public String getACTION_DETAILS() {
		if (_ACTION_DETAILS == null) {
			return "";
		}
		else {
			return _ACTION_DETAILS;
		}
	}

	@Override
	public void setACTION_DETAILS(String ACTION_DETAILS) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ACTION_DETAILS = ACTION_DETAILS;
	}

	@JSON
	@Override
	public String getACTION_REMARKS() {
		if (_ACTION_REMARKS == null) {
			return "";
		}
		else {
			return _ACTION_REMARKS;
		}
	}

	@Override
	public void setACTION_REMARKS(String ACTION_REMARKS) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ACTION_REMARKS = ACTION_REMARKS;
	}

	@JSON
	@Override
	public Date getACTION_DATE() {
		return _ACTION_DATE;
	}

	@Override
	public void setACTION_DATE(Date ACTION_DATE) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ACTION_DATE = ACTION_DATE;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ServiceRequestHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceRequestHistory toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ServiceRequestHistory>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceRequestHistoryImpl serviceRequestHistoryImpl =
			new ServiceRequestHistoryImpl();

		serviceRequestHistoryImpl.setACTION_ID(getACTION_ID());
		serviceRequestHistoryImpl.setREFERENCE_NO(getREFERENCE_NO());
		serviceRequestHistoryImpl.setACTION_TYPE(getACTION_TYPE());
		serviceRequestHistoryImpl.setACTION_DETAILS(getACTION_DETAILS());
		serviceRequestHistoryImpl.setACTION_REMARKS(getACTION_REMARKS());
		serviceRequestHistoryImpl.setACTION_DATE(getACTION_DATE());

		serviceRequestHistoryImpl.resetOriginalValues();

		return serviceRequestHistoryImpl;
	}

	@Override
	public int compareTo(ServiceRequestHistory serviceRequestHistory) {
		long primaryKey = serviceRequestHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ServiceRequestHistory)) {
			return false;
		}

		ServiceRequestHistory serviceRequestHistory =
			(ServiceRequestHistory)object;

		long primaryKey = serviceRequestHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceRequestHistory> toCacheModel() {
		ServiceRequestHistoryCacheModel serviceRequestHistoryCacheModel =
			new ServiceRequestHistoryCacheModel();

		serviceRequestHistoryCacheModel.ACTION_ID = getACTION_ID();

		serviceRequestHistoryCacheModel.REFERENCE_NO = getREFERENCE_NO();

		String REFERENCE_NO = serviceRequestHistoryCacheModel.REFERENCE_NO;

		if ((REFERENCE_NO != null) && (REFERENCE_NO.length() == 0)) {
			serviceRequestHistoryCacheModel.REFERENCE_NO = null;
		}

		serviceRequestHistoryCacheModel.ACTION_TYPE = getACTION_TYPE();

		String ACTION_TYPE = serviceRequestHistoryCacheModel.ACTION_TYPE;

		if ((ACTION_TYPE != null) && (ACTION_TYPE.length() == 0)) {
			serviceRequestHistoryCacheModel.ACTION_TYPE = null;
		}

		serviceRequestHistoryCacheModel.ACTION_DETAILS = getACTION_DETAILS();

		String ACTION_DETAILS = serviceRequestHistoryCacheModel.ACTION_DETAILS;

		if ((ACTION_DETAILS != null) && (ACTION_DETAILS.length() == 0)) {
			serviceRequestHistoryCacheModel.ACTION_DETAILS = null;
		}

		serviceRequestHistoryCacheModel.ACTION_REMARKS = getACTION_REMARKS();

		String ACTION_REMARKS = serviceRequestHistoryCacheModel.ACTION_REMARKS;

		if ((ACTION_REMARKS != null) && (ACTION_REMARKS.length() == 0)) {
			serviceRequestHistoryCacheModel.ACTION_REMARKS = null;
		}

		Date ACTION_DATE = getACTION_DATE();

		if (ACTION_DATE != null) {
			serviceRequestHistoryCacheModel.ACTION_DATE = ACTION_DATE.getTime();
		}
		else {
			serviceRequestHistoryCacheModel.ACTION_DATE = Long.MIN_VALUE;
		}

		return serviceRequestHistoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ServiceRequestHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ServiceRequestHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceRequestHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((ServiceRequestHistory)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ServiceRequestHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ServiceRequestHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceRequestHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((ServiceRequestHistory)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ServiceRequestHistory>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _ACTION_ID;

	private String _REFERENCE_NO;

	private String _ACTION_TYPE;

	private String _ACTION_DETAILS;

	private String _ACTION_REMARKS;

	private Date _ACTION_DATE;

	public <T> T getColumnValue(String columnName) {
		Function<ServiceRequestHistory, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ServiceRequestHistory)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ACTION_ID", _ACTION_ID);
		_columnOriginalValues.put("REFERENCE_NO", _REFERENCE_NO);
		_columnOriginalValues.put("ACTION_TYPE", _ACTION_TYPE);
		_columnOriginalValues.put("ACTION_DETAILS", _ACTION_DETAILS);
		_columnOriginalValues.put("ACTION_REMARKS", _ACTION_REMARKS);
		_columnOriginalValues.put("ACTION_DATE", _ACTION_DATE);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ACTION_ID", 1L);

		columnBitmasks.put("REFERENCE_NO", 2L);

		columnBitmasks.put("ACTION_TYPE", 4L);

		columnBitmasks.put("ACTION_DETAILS", 8L);

		columnBitmasks.put("ACTION_REMARKS", 16L);

		columnBitmasks.put("ACTION_DATE", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ServiceRequestHistory _escapedModel;

}