/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.QuotationDrivers;
import com.ejada.atmc.acl.db.model.QuotationDriversInsuredRelationProofBlobModel;
import com.ejada.atmc.acl.db.model.QuotationDriversModel;
import com.ejada.atmc.acl.db.model.QuotationDriversSoap;
import com.ejada.atmc.acl.db.service.QuotationDriversLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuotationDrivers service. Represents a row in the &quot;EJD_ADD_DRIVERS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationDriversModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationDriversImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationDriversImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationDriversModelImpl
	extends BaseModelImpl<QuotationDrivers> implements QuotationDriversModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotation drivers model instance should use the <code>QuotationDrivers</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_ADD_DRIVERS";

	public static final Object[][] TABLE_COLUMNS = {
		{"ADD_DRIVER_ID", Types.BIGINT}, {"QUOTATIONS_ID", Types.BIGINT},
		{"DRIVER_DOB", Types.TIMESTAMP}, {"DRIVER_DOB_H", Types.VARCHAR},
		{"DRIVER_GENDER", Types.VARCHAR}, {"DRIVER_ID", Types.BIGINT},
		{"DRIVER_ID_TYPE", Types.BIGINT}, {"DRIVER_NAME", Types.VARCHAR},
		{"DRIVER_NATIONALITY", Types.VARCHAR}, {"DRIVER_OCCUP", Types.VARCHAR},
		{"IS_DRIVER_UNDER_21", Types.BOOLEAN}, {"DRIVER_EDU", Types.VARCHAR},
		{"DRIVER_NO_CHILD", Types.VARCHAR},
		{"DRIVER_MARITAL_STATUS", Types.VARCHAR},
		{"DRIVER_NO_FAULT", Types.BIGINT}, {"DRIVER_NO_CLAIM", Types.BIGINT},
		{"DRIVER_CONVICS", Types.VARCHAR}, {"DRIVER_MED_CONDS", Types.VARCHAR},
		{"DRIVER_NCD_YEARS", Types.INTEGER},
		{"INSURED_RELATION", Types.VARCHAR},
		{"INSURED_RELATION_PROOF", Types.BLOB},
		{"RELATION_PROOF_FILE_NAME", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ADD_DRIVER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTATIONS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("DRIVER_DOB_H", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_GENDER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_ID_TYPE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NATIONALITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_OCCUP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_DRIVER_UNDER_21", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("DRIVER_EDU", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NO_CHILD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_MARITAL_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NO_FAULT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_NO_CLAIM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_CONVICS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_MED_CONDS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_NCD_YEARS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("INSURED_RELATION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_RELATION_PROOF", Types.BLOB);
		TABLE_COLUMNS_MAP.put("RELATION_PROOF_FILE_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_ADD_DRIVERS (ADD_DRIVER_ID LONG not null primary key,QUOTATIONS_ID LONG,DRIVER_DOB DATE null,DRIVER_DOB_H VARCHAR(75) null,DRIVER_GENDER VARCHAR(75) null,DRIVER_ID LONG,DRIVER_ID_TYPE LONG,DRIVER_NAME VARCHAR(75) null,DRIVER_NATIONALITY VARCHAR(75) null,DRIVER_OCCUP VARCHAR(75) null,IS_DRIVER_UNDER_21 BOOLEAN,DRIVER_EDU VARCHAR(75) null,DRIVER_NO_CHILD VARCHAR(75) null,DRIVER_MARITAL_STATUS VARCHAR(75) null,DRIVER_NO_FAULT LONG,DRIVER_NO_CLAIM LONG,DRIVER_CONVICS VARCHAR(75) null,DRIVER_MED_CONDS VARCHAR(75) null,DRIVER_NCD_YEARS INTEGER,INSURED_RELATION VARCHAR(75) null,INSURED_RELATION_PROOF BLOB,RELATION_PROOF_FILE_NAME VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table EJD_ADD_DRIVERS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotationDrivers.addDriverId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_ADD_DRIVERS.ADD_DRIVER_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ADDDRIVERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ISDRIVERUNDER21_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUOTATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static QuotationDrivers toModel(QuotationDriversSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		QuotationDrivers model = new QuotationDriversImpl();

		model.setAddDriverId(soapModel.getAddDriverId());
		model.setQuotationId(soapModel.getQuotationId());
		model.setDriverDob(soapModel.getDriverDob());
		model.setDriverDobH(soapModel.getDriverDobH());
		model.setDriverGender(soapModel.getDriverGender());
		model.setDriverId(soapModel.getDriverId());
		model.setDriverIdType(soapModel.getDriverIdType());
		model.setDriverName(soapModel.getDriverName());
		model.setDriverNationality(soapModel.getDriverNationality());
		model.setDriverOccup(soapModel.getDriverOccup());
		model.setIsDriverUnder21(soapModel.isIsDriverUnder21());
		model.setDriverEdu(soapModel.getDriverEdu());
		model.setDriverNoChild(soapModel.getDriverNoChild());
		model.setDriverMaritalStatus(soapModel.getDriverMaritalStatus());
		model.setDriverNOFault(soapModel.getDriverNOFault());
		model.setDriverNOClaim(soapModel.getDriverNOClaim());
		model.setDriverConvictions(soapModel.getDriverConvictions());
		model.setDriverMedConds(soapModel.getDriverMedConds());
		model.setNcdYears(soapModel.getNcdYears());
		model.setInsuredRelation(soapModel.getInsuredRelation());
		model.setInsuredRelationProof(soapModel.getInsuredRelationProof());
		model.setInsuredRelationProofFileName(
			soapModel.getInsuredRelationProofFileName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<QuotationDrivers> toModels(
		QuotationDriversSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<QuotationDrivers> models = new ArrayList<QuotationDrivers>(
			soapModels.length);

		for (QuotationDriversSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationDriversModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addDriverId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddDriverId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addDriverId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuotationDrivers.class;
	}

	@Override
	public String getModelClassName() {
		return QuotationDrivers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuotationDrivers, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuotationDrivers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationDrivers, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuotationDrivers)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuotationDrivers, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuotationDrivers, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuotationDrivers)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuotationDrivers, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuotationDrivers, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QuotationDrivers>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QuotationDrivers.class.getClassLoader(), QuotationDrivers.class,
			ModelWrapper.class);

		try {
			Constructor<QuotationDrivers> constructor =
				(Constructor<QuotationDrivers>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QuotationDrivers, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QuotationDrivers, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuotationDrivers, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<QuotationDrivers, Object>>();
		Map<String, BiConsumer<QuotationDrivers, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<QuotationDrivers, ?>>();

		attributeGetterFunctions.put(
			"addDriverId", QuotationDrivers::getAddDriverId);
		attributeSetterBiConsumers.put(
			"addDriverId",
			(BiConsumer<QuotationDrivers, Long>)
				QuotationDrivers::setAddDriverId);
		attributeGetterFunctions.put(
			"quotationId", QuotationDrivers::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<QuotationDrivers, Long>)
				QuotationDrivers::setQuotationId);
		attributeGetterFunctions.put(
			"driverDob", QuotationDrivers::getDriverDob);
		attributeSetterBiConsumers.put(
			"driverDob",
			(BiConsumer<QuotationDrivers, Date>)QuotationDrivers::setDriverDob);
		attributeGetterFunctions.put(
			"driverDobH", QuotationDrivers::getDriverDobH);
		attributeSetterBiConsumers.put(
			"driverDobH",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverDobH);
		attributeGetterFunctions.put(
			"driverGender", QuotationDrivers::getDriverGender);
		attributeSetterBiConsumers.put(
			"driverGender",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverGender);
		attributeGetterFunctions.put("driverId", QuotationDrivers::getDriverId);
		attributeSetterBiConsumers.put(
			"driverId",
			(BiConsumer<QuotationDrivers, Long>)QuotationDrivers::setDriverId);
		attributeGetterFunctions.put(
			"driverIdType", QuotationDrivers::getDriverIdType);
		attributeSetterBiConsumers.put(
			"driverIdType",
			(BiConsumer<QuotationDrivers, Long>)
				QuotationDrivers::setDriverIdType);
		attributeGetterFunctions.put(
			"driverName", QuotationDrivers::getDriverName);
		attributeSetterBiConsumers.put(
			"driverName",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverName);
		attributeGetterFunctions.put(
			"driverNationality", QuotationDrivers::getDriverNationality);
		attributeSetterBiConsumers.put(
			"driverNationality",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverNationality);
		attributeGetterFunctions.put(
			"driverOccup", QuotationDrivers::getDriverOccup);
		attributeSetterBiConsumers.put(
			"driverOccup",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverOccup);
		attributeGetterFunctions.put(
			"isDriverUnder21", QuotationDrivers::getIsDriverUnder21);
		attributeSetterBiConsumers.put(
			"isDriverUnder21",
			(BiConsumer<QuotationDrivers, Boolean>)
				QuotationDrivers::setIsDriverUnder21);
		attributeGetterFunctions.put(
			"driverEdu", QuotationDrivers::getDriverEdu);
		attributeSetterBiConsumers.put(
			"driverEdu",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverEdu);
		attributeGetterFunctions.put(
			"driverNoChild", QuotationDrivers::getDriverNoChild);
		attributeSetterBiConsumers.put(
			"driverNoChild",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverNoChild);
		attributeGetterFunctions.put(
			"driverMaritalStatus", QuotationDrivers::getDriverMaritalStatus);
		attributeSetterBiConsumers.put(
			"driverMaritalStatus",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverMaritalStatus);
		attributeGetterFunctions.put(
			"driverNOFault", QuotationDrivers::getDriverNOFault);
		attributeSetterBiConsumers.put(
			"driverNOFault",
			(BiConsumer<QuotationDrivers, Long>)
				QuotationDrivers::setDriverNOFault);
		attributeGetterFunctions.put(
			"driverNOClaim", QuotationDrivers::getDriverNOClaim);
		attributeSetterBiConsumers.put(
			"driverNOClaim",
			(BiConsumer<QuotationDrivers, Long>)
				QuotationDrivers::setDriverNOClaim);
		attributeGetterFunctions.put(
			"driverConvictions", QuotationDrivers::getDriverConvictions);
		attributeSetterBiConsumers.put(
			"driverConvictions",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverConvictions);
		attributeGetterFunctions.put(
			"driverMedConds", QuotationDrivers::getDriverMedConds);
		attributeSetterBiConsumers.put(
			"driverMedConds",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setDriverMedConds);
		attributeGetterFunctions.put("ncdYears", QuotationDrivers::getNcdYears);
		attributeSetterBiConsumers.put(
			"ncdYears",
			(BiConsumer<QuotationDrivers, Integer>)
				QuotationDrivers::setNcdYears);
		attributeGetterFunctions.put(
			"insuredRelation", QuotationDrivers::getInsuredRelation);
		attributeSetterBiConsumers.put(
			"insuredRelation",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setInsuredRelation);
		attributeGetterFunctions.put(
			"insuredRelationProof", QuotationDrivers::getInsuredRelationProof);
		attributeSetterBiConsumers.put(
			"insuredRelationProof",
			(BiConsumer<QuotationDrivers, Blob>)
				QuotationDrivers::setInsuredRelationProof);
		attributeGetterFunctions.put(
			"insuredRelationProofFileName",
			QuotationDrivers::getInsuredRelationProofFileName);
		attributeSetterBiConsumers.put(
			"insuredRelationProofFileName",
			(BiConsumer<QuotationDrivers, String>)
				QuotationDrivers::setInsuredRelationProofFileName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAddDriverId() {
		return _addDriverId;
	}

	@Override
	public void setAddDriverId(long addDriverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addDriverId = addDriverId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAddDriverId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ADD_DRIVER_ID"));
	}

	@JSON
	@Override
	public long getQuotationId() {
		return _quotationId;
	}

	@Override
	public void setQuotationId(long quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuotationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("QUOTATIONS_ID"));
	}

	@JSON
	@Override
	public Date getDriverDob() {
		return _driverDob;
	}

	@Override
	public void setDriverDob(Date driverDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverDob = driverDob;
	}

	@JSON
	@Override
	public String getDriverDobH() {
		if (_driverDobH == null) {
			return "";
		}
		else {
			return _driverDobH;
		}
	}

	@Override
	public void setDriverDobH(String driverDobH) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverDobH = driverDobH;
	}

	@JSON
	@Override
	public String getDriverGender() {
		if (_driverGender == null) {
			return "";
		}
		else {
			return _driverGender;
		}
	}

	@Override
	public void setDriverGender(String driverGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverGender = driverGender;
	}

	@JSON
	@Override
	public long getDriverId() {
		return _driverId;
	}

	@Override
	public void setDriverId(long driverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverId = driverId;
	}

	@JSON
	@Override
	public long getDriverIdType() {
		return _driverIdType;
	}

	@Override
	public void setDriverIdType(long driverIdType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverIdType = driverIdType;
	}

	@JSON
	@Override
	public String getDriverName() {
		if (_driverName == null) {
			return "";
		}
		else {
			return _driverName;
		}
	}

	@Override
	public void setDriverName(String driverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverName = driverName;
	}

	@JSON
	@Override
	public String getDriverNationality() {
		if (_driverNationality == null) {
			return "";
		}
		else {
			return _driverNationality;
		}
	}

	@Override
	public void setDriverNationality(String driverNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNationality = driverNationality;
	}

	@JSON
	@Override
	public String getDriverOccup() {
		if (_driverOccup == null) {
			return "";
		}
		else {
			return _driverOccup;
		}
	}

	@Override
	public void setDriverOccup(String driverOccup) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverOccup = driverOccup;
	}

	@JSON
	@Override
	public boolean getIsDriverUnder21() {
		return _isDriverUnder21;
	}

	@JSON
	@Override
	public boolean isIsDriverUnder21() {
		return _isDriverUnder21;
	}

	@Override
	public void setIsDriverUnder21(boolean isDriverUnder21) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isDriverUnder21 = isDriverUnder21;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsDriverUnder21() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("IS_DRIVER_UNDER_21"));
	}

	@JSON
	@Override
	public String getDriverEdu() {
		if (_driverEdu == null) {
			return "";
		}
		else {
			return _driverEdu;
		}
	}

	@Override
	public void setDriverEdu(String driverEdu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverEdu = driverEdu;
	}

	@JSON
	@Override
	public String getDriverNoChild() {
		if (_driverNoChild == null) {
			return "";
		}
		else {
			return _driverNoChild;
		}
	}

	@Override
	public void setDriverNoChild(String driverNoChild) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNoChild = driverNoChild;
	}

	@JSON
	@Override
	public String getDriverMaritalStatus() {
		if (_driverMaritalStatus == null) {
			return "";
		}
		else {
			return _driverMaritalStatus;
		}
	}

	@Override
	public void setDriverMaritalStatus(String driverMaritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverMaritalStatus = driverMaritalStatus;
	}

	@JSON
	@Override
	public long getDriverNOFault() {
		return _driverNOFault;
	}

	@Override
	public void setDriverNOFault(long driverNOFault) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNOFault = driverNOFault;
	}

	@JSON
	@Override
	public long getDriverNOClaim() {
		return _driverNOClaim;
	}

	@Override
	public void setDriverNOClaim(long driverNOClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverNOClaim = driverNOClaim;
	}

	@JSON
	@Override
	public String getDriverConvictions() {
		if (_driverConvictions == null) {
			return "";
		}
		else {
			return _driverConvictions;
		}
	}

	@Override
	public void setDriverConvictions(String driverConvictions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverConvictions = driverConvictions;
	}

	@JSON
	@Override
	public String getDriverMedConds() {
		if (_driverMedConds == null) {
			return "";
		}
		else {
			return _driverMedConds;
		}
	}

	@Override
	public void setDriverMedConds(String driverMedConds) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverMedConds = driverMedConds;
	}

	@JSON
	@Override
	public int getNcdYears() {
		return _ncdYears;
	}

	@Override
	public void setNcdYears(int ncdYears) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncdYears = ncdYears;
	}

	@JSON
	@Override
	public String getInsuredRelation() {
		if (_insuredRelation == null) {
			return "";
		}
		else {
			return _insuredRelation;
		}
	}

	@Override
	public void setInsuredRelation(String insuredRelation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredRelation = insuredRelation;
	}

	@JSON
	@Override
	public Blob getInsuredRelationProof() {
		if (_insuredRelationProofBlobModel == null) {
			try {
				_insuredRelationProofBlobModel =
					QuotationDriversLocalServiceUtil.
						getInsuredRelationProofBlobModel(getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_insuredRelationProofBlobModel != null) {
			blob = _insuredRelationProofBlobModel.getInsuredRelationProofBlob();
		}

		return blob;
	}

	@Override
	public void setInsuredRelationProof(Blob insuredRelationProof) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_insuredRelationProofBlobModel == null) {
			_insuredRelationProofBlobModel =
				new QuotationDriversInsuredRelationProofBlobModel(
					getPrimaryKey(), insuredRelationProof);
		}
		else {
			_insuredRelationProofBlobModel.setInsuredRelationProofBlob(
				insuredRelationProof);
		}
	}

	@JSON
	@Override
	public String getInsuredRelationProofFileName() {
		if (_insuredRelationProofFileName == null) {
			return "";
		}
		else {
			return _insuredRelationProofFileName;
		}
	}

	@Override
	public void setInsuredRelationProofFileName(
		String insuredRelationProofFileName) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredRelationProofFileName = insuredRelationProofFileName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, QuotationDrivers.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuotationDrivers toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuotationDrivers>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationDriversImpl quotationDriversImpl = new QuotationDriversImpl();

		quotationDriversImpl.setAddDriverId(getAddDriverId());
		quotationDriversImpl.setQuotationId(getQuotationId());
		quotationDriversImpl.setDriverDob(getDriverDob());
		quotationDriversImpl.setDriverDobH(getDriverDobH());
		quotationDriversImpl.setDriverGender(getDriverGender());
		quotationDriversImpl.setDriverId(getDriverId());
		quotationDriversImpl.setDriverIdType(getDriverIdType());
		quotationDriversImpl.setDriverName(getDriverName());
		quotationDriversImpl.setDriverNationality(getDriverNationality());
		quotationDriversImpl.setDriverOccup(getDriverOccup());
		quotationDriversImpl.setIsDriverUnder21(isIsDriverUnder21());
		quotationDriversImpl.setDriverEdu(getDriverEdu());
		quotationDriversImpl.setDriverNoChild(getDriverNoChild());
		quotationDriversImpl.setDriverMaritalStatus(getDriverMaritalStatus());
		quotationDriversImpl.setDriverNOFault(getDriverNOFault());
		quotationDriversImpl.setDriverNOClaim(getDriverNOClaim());
		quotationDriversImpl.setDriverConvictions(getDriverConvictions());
		quotationDriversImpl.setDriverMedConds(getDriverMedConds());
		quotationDriversImpl.setNcdYears(getNcdYears());
		quotationDriversImpl.setInsuredRelation(getInsuredRelation());
		quotationDriversImpl.setInsuredRelationProofFileName(
			getInsuredRelationProofFileName());

		quotationDriversImpl.resetOriginalValues();

		return quotationDriversImpl;
	}

	@Override
	public int compareTo(QuotationDrivers quotationDrivers) {
		long primaryKey = quotationDrivers.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuotationDrivers)) {
			return false;
		}

		QuotationDrivers quotationDrivers = (QuotationDrivers)object;

		long primaryKey = quotationDrivers.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_insuredRelationProofBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotationDrivers> toCacheModel() {
		QuotationDriversCacheModel quotationDriversCacheModel =
			new QuotationDriversCacheModel();

		quotationDriversCacheModel.addDriverId = getAddDriverId();

		quotationDriversCacheModel.quotationId = getQuotationId();

		Date driverDob = getDriverDob();

		if (driverDob != null) {
			quotationDriversCacheModel.driverDob = driverDob.getTime();
		}
		else {
			quotationDriversCacheModel.driverDob = Long.MIN_VALUE;
		}

		quotationDriversCacheModel.driverDobH = getDriverDobH();

		String driverDobH = quotationDriversCacheModel.driverDobH;

		if ((driverDobH != null) && (driverDobH.length() == 0)) {
			quotationDriversCacheModel.driverDobH = null;
		}

		quotationDriversCacheModel.driverGender = getDriverGender();

		String driverGender = quotationDriversCacheModel.driverGender;

		if ((driverGender != null) && (driverGender.length() == 0)) {
			quotationDriversCacheModel.driverGender = null;
		}

		quotationDriversCacheModel.driverId = getDriverId();

		quotationDriversCacheModel.driverIdType = getDriverIdType();

		quotationDriversCacheModel.driverName = getDriverName();

		String driverName = quotationDriversCacheModel.driverName;

		if ((driverName != null) && (driverName.length() == 0)) {
			quotationDriversCacheModel.driverName = null;
		}

		quotationDriversCacheModel.driverNationality = getDriverNationality();

		String driverNationality = quotationDriversCacheModel.driverNationality;

		if ((driverNationality != null) && (driverNationality.length() == 0)) {
			quotationDriversCacheModel.driverNationality = null;
		}

		quotationDriversCacheModel.driverOccup = getDriverOccup();

		String driverOccup = quotationDriversCacheModel.driverOccup;

		if ((driverOccup != null) && (driverOccup.length() == 0)) {
			quotationDriversCacheModel.driverOccup = null;
		}

		quotationDriversCacheModel.isDriverUnder21 = isIsDriverUnder21();

		quotationDriversCacheModel.driverEdu = getDriverEdu();

		String driverEdu = quotationDriversCacheModel.driverEdu;

		if ((driverEdu != null) && (driverEdu.length() == 0)) {
			quotationDriversCacheModel.driverEdu = null;
		}

		quotationDriversCacheModel.driverNoChild = getDriverNoChild();

		String driverNoChild = quotationDriversCacheModel.driverNoChild;

		if ((driverNoChild != null) && (driverNoChild.length() == 0)) {
			quotationDriversCacheModel.driverNoChild = null;
		}

		quotationDriversCacheModel.driverMaritalStatus =
			getDriverMaritalStatus();

		String driverMaritalStatus =
			quotationDriversCacheModel.driverMaritalStatus;

		if ((driverMaritalStatus != null) &&
			(driverMaritalStatus.length() == 0)) {

			quotationDriversCacheModel.driverMaritalStatus = null;
		}

		quotationDriversCacheModel.driverNOFault = getDriverNOFault();

		quotationDriversCacheModel.driverNOClaim = getDriverNOClaim();

		quotationDriversCacheModel.driverConvictions = getDriverConvictions();

		String driverConvictions = quotationDriversCacheModel.driverConvictions;

		if ((driverConvictions != null) && (driverConvictions.length() == 0)) {
			quotationDriversCacheModel.driverConvictions = null;
		}

		quotationDriversCacheModel.driverMedConds = getDriverMedConds();

		String driverMedConds = quotationDriversCacheModel.driverMedConds;

		if ((driverMedConds != null) && (driverMedConds.length() == 0)) {
			quotationDriversCacheModel.driverMedConds = null;
		}

		quotationDriversCacheModel.ncdYears = getNcdYears();

		quotationDriversCacheModel.insuredRelation = getInsuredRelation();

		String insuredRelation = quotationDriversCacheModel.insuredRelation;

		if ((insuredRelation != null) && (insuredRelation.length() == 0)) {
			quotationDriversCacheModel.insuredRelation = null;
		}

		quotationDriversCacheModel.insuredRelationProofFileName =
			getInsuredRelationProofFileName();

		String insuredRelationProofFileName =
			quotationDriversCacheModel.insuredRelationProofFileName;

		if ((insuredRelationProofFileName != null) &&
			(insuredRelationProofFileName.length() == 0)) {

			quotationDriversCacheModel.insuredRelationProofFileName = null;
		}

		return quotationDriversCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{addDriverId=");
		sb.append(getAddDriverId());
		sb.append(", quotationId=");
		sb.append(getQuotationId());
		sb.append(", driverDob=");
		sb.append(getDriverDob());
		sb.append(", driverDobH=");
		sb.append(getDriverDobH());
		sb.append(", driverGender=");
		sb.append(getDriverGender());
		sb.append(", driverId=");
		sb.append(getDriverId());
		sb.append(", driverIdType=");
		sb.append(getDriverIdType());
		sb.append(", driverName=");
		sb.append(getDriverName());
		sb.append(", driverNationality=");
		sb.append(getDriverNationality());
		sb.append(", driverOccup=");
		sb.append(getDriverOccup());
		sb.append(", isDriverUnder21=");
		sb.append(isIsDriverUnder21());
		sb.append(", driverEdu=");
		sb.append(getDriverEdu());
		sb.append(", driverNoChild=");
		sb.append(getDriverNoChild());
		sb.append(", driverMaritalStatus=");
		sb.append(getDriverMaritalStatus());
		sb.append(", driverNOFault=");
		sb.append(getDriverNOFault());
		sb.append(", driverNOClaim=");
		sb.append(getDriverNOClaim());
		sb.append(", driverConvictions=");
		sb.append(getDriverConvictions());
		sb.append(", driverMedConds=");
		sb.append(getDriverMedConds());
		sb.append(", ncdYears=");
		sb.append(getNcdYears());
		sb.append(", insuredRelation=");
		sb.append(getInsuredRelation());
		sb.append(", insuredRelationProofFileName=");
		sb.append(getInsuredRelationProofFileName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.QuotationDrivers");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>addDriverId</column-name><column-value><![CDATA[");
		sb.append(getAddDriverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotationId</column-name><column-value><![CDATA[");
		sb.append(getQuotationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverDob</column-name><column-value><![CDATA[");
		sb.append(getDriverDob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverDobH</column-name><column-value><![CDATA[");
		sb.append(getDriverDobH());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverGender</column-name><column-value><![CDATA[");
		sb.append(getDriverGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverId</column-name><column-value><![CDATA[");
		sb.append(getDriverId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverIdType</column-name><column-value><![CDATA[");
		sb.append(getDriverIdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverName</column-name><column-value><![CDATA[");
		sb.append(getDriverName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNationality</column-name><column-value><![CDATA[");
		sb.append(getDriverNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverOccup</column-name><column-value><![CDATA[");
		sb.append(getDriverOccup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDriverUnder21</column-name><column-value><![CDATA[");
		sb.append(isIsDriverUnder21());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverEdu</column-name><column-value><![CDATA[");
		sb.append(getDriverEdu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNoChild</column-name><column-value><![CDATA[");
		sb.append(getDriverNoChild());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverMaritalStatus</column-name><column-value><![CDATA[");
		sb.append(getDriverMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNOFault</column-name><column-value><![CDATA[");
		sb.append(getDriverNOFault());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverNOClaim</column-name><column-value><![CDATA[");
		sb.append(getDriverNOClaim());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverConvictions</column-name><column-value><![CDATA[");
		sb.append(getDriverConvictions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverMedConds</column-name><column-value><![CDATA[");
		sb.append(getDriverMedConds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ncdYears</column-name><column-value><![CDATA[");
		sb.append(getNcdYears());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredRelation</column-name><column-value><![CDATA[");
		sb.append(getInsuredRelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insuredRelationProofFileName</column-name><column-value><![CDATA[");
		sb.append(getInsuredRelationProofFileName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QuotationDrivers>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _addDriverId;
	private long _quotationId;
	private Date _driverDob;
	private String _driverDobH;
	private String _driverGender;
	private long _driverId;
	private long _driverIdType;
	private String _driverName;
	private String _driverNationality;
	private String _driverOccup;
	private boolean _isDriverUnder21;
	private String _driverEdu;
	private String _driverNoChild;
	private String _driverMaritalStatus;
	private long _driverNOFault;
	private long _driverNOClaim;
	private String _driverConvictions;
	private String _driverMedConds;
	private int _ncdYears;
	private String _insuredRelation;
	private QuotationDriversInsuredRelationProofBlobModel
		_insuredRelationProofBlobModel;
	private String _insuredRelationProofFileName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuotationDrivers, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuotationDrivers)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ADD_DRIVER_ID", _addDriverId);
		_columnOriginalValues.put("QUOTATIONS_ID", _quotationId);
		_columnOriginalValues.put("DRIVER_DOB", _driverDob);
		_columnOriginalValues.put("DRIVER_DOB_H", _driverDobH);
		_columnOriginalValues.put("DRIVER_GENDER", _driverGender);
		_columnOriginalValues.put("DRIVER_ID", _driverId);
		_columnOriginalValues.put("DRIVER_ID_TYPE", _driverIdType);
		_columnOriginalValues.put("DRIVER_NAME", _driverName);
		_columnOriginalValues.put("DRIVER_NATIONALITY", _driverNationality);
		_columnOriginalValues.put("DRIVER_OCCUP", _driverOccup);
		_columnOriginalValues.put("IS_DRIVER_UNDER_21", _isDriverUnder21);
		_columnOriginalValues.put("DRIVER_EDU", _driverEdu);
		_columnOriginalValues.put("DRIVER_NO_CHILD", _driverNoChild);
		_columnOriginalValues.put(
			"DRIVER_MARITAL_STATUS", _driverMaritalStatus);
		_columnOriginalValues.put("DRIVER_NO_FAULT", _driverNOFault);
		_columnOriginalValues.put("DRIVER_NO_CLAIM", _driverNOClaim);
		_columnOriginalValues.put("DRIVER_CONVICS", _driverConvictions);
		_columnOriginalValues.put("DRIVER_MED_CONDS", _driverMedConds);
		_columnOriginalValues.put("DRIVER_NCD_YEARS", _ncdYears);
		_columnOriginalValues.put("INSURED_RELATION", _insuredRelation);
		_columnOriginalValues.put(
			"RELATION_PROOF_FILE_NAME", _insuredRelationProofFileName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ADD_DRIVER_ID", "addDriverId");
		attributeNames.put("QUOTATIONS_ID", "quotationId");
		attributeNames.put("DRIVER_DOB", "driverDob");
		attributeNames.put("DRIVER_DOB_H", "driverDobH");
		attributeNames.put("DRIVER_GENDER", "driverGender");
		attributeNames.put("DRIVER_ID", "driverId");
		attributeNames.put("DRIVER_ID_TYPE", "driverIdType");
		attributeNames.put("DRIVER_NAME", "driverName");
		attributeNames.put("DRIVER_NATIONALITY", "driverNationality");
		attributeNames.put("DRIVER_OCCUP", "driverOccup");
		attributeNames.put("IS_DRIVER_UNDER_21", "isDriverUnder21");
		attributeNames.put("DRIVER_EDU", "driverEdu");
		attributeNames.put("DRIVER_NO_CHILD", "driverNoChild");
		attributeNames.put("DRIVER_MARITAL_STATUS", "driverMaritalStatus");
		attributeNames.put("DRIVER_NO_FAULT", "driverNOFault");
		attributeNames.put("DRIVER_NO_CLAIM", "driverNOClaim");
		attributeNames.put("DRIVER_CONVICS", "driverConvictions");
		attributeNames.put("DRIVER_MED_CONDS", "driverMedConds");
		attributeNames.put("DRIVER_NCD_YEARS", "ncdYears");
		attributeNames.put("INSURED_RELATION", "insuredRelation");
		attributeNames.put("INSURED_RELATION_PROOF", "insuredRelationProof");
		attributeNames.put(
			"RELATION_PROOF_FILE_NAME", "insuredRelationProofFileName");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ADD_DRIVER_ID", 1L);

		columnBitmasks.put("QUOTATIONS_ID", 2L);

		columnBitmasks.put("DRIVER_DOB", 4L);

		columnBitmasks.put("DRIVER_DOB_H", 8L);

		columnBitmasks.put("DRIVER_GENDER", 16L);

		columnBitmasks.put("DRIVER_ID", 32L);

		columnBitmasks.put("DRIVER_ID_TYPE", 64L);

		columnBitmasks.put("DRIVER_NAME", 128L);

		columnBitmasks.put("DRIVER_NATIONALITY", 256L);

		columnBitmasks.put("DRIVER_OCCUP", 512L);

		columnBitmasks.put("IS_DRIVER_UNDER_21", 1024L);

		columnBitmasks.put("DRIVER_EDU", 2048L);

		columnBitmasks.put("DRIVER_NO_CHILD", 4096L);

		columnBitmasks.put("DRIVER_MARITAL_STATUS", 8192L);

		columnBitmasks.put("DRIVER_NO_FAULT", 16384L);

		columnBitmasks.put("DRIVER_NO_CLAIM", 32768L);

		columnBitmasks.put("DRIVER_CONVICS", 65536L);

		columnBitmasks.put("DRIVER_MED_CONDS", 131072L);

		columnBitmasks.put("DRIVER_NCD_YEARS", 262144L);

		columnBitmasks.put("INSURED_RELATION", 524288L);

		columnBitmasks.put("INSURED_RELATION_PROOF", 1048576L);

		columnBitmasks.put("RELATION_PROOF_FILE_NAME", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuotationDrivers _escapedModel;

}