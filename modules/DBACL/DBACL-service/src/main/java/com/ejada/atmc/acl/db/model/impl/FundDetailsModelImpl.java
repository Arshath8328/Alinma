/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.FundDetails;
import com.ejada.atmc.acl.db.model.FundDetailsModel;
import com.ejada.atmc.acl.db.model.FundDetailsSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FundDetails service. Represents a row in the &quot;ODS_FUND_DTL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FundDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FundDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FundDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class FundDetailsModelImpl
	extends BaseModelImpl<FundDetails> implements FundDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fund details model instance should use the <code>FundDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "ODS_FUND_DTL";

	public static final Object[][] TABLE_COLUMNS = {
		{"ODS_POLICY_NO", Types.VARCHAR}, {"ODS_FUND_NAME", Types.VARCHAR},
		{"ODS_FUND_DESC", Types.VARCHAR}, {"ODS_FUND_PCTG", Types.VARCHAR},
		{"ODS_UNITS_SUM", Types.DOUBLE}, {"ODS_UNIT_PRICE", Types.DOUBLE},
		{"ODS_FUNDS_VALUE", Types.DOUBLE}, {"ODS_RISK_CHG", Types.DOUBLE},
		{"ODS_PART_FEES", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ODS_POLICY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_FUND_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_FUND_DESC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_FUND_PCTG", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_UNITS_SUM", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ODS_UNIT_PRICE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ODS_FUNDS_VALUE", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ODS_RISK_CHG", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ODS_PART_FEES", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ODS_FUND_DTL (ODS_POLICY_NO VARCHAR(75) null,ODS_FUND_NAME VARCHAR(75) not null primary key,ODS_FUND_DESC VARCHAR(75) null,ODS_FUND_PCTG VARCHAR(75) null,ODS_UNITS_SUM DOUBLE,ODS_UNIT_PRICE DOUBLE,ODS_FUNDS_VALUE DOUBLE,ODS_RISK_CHG DOUBLE,ODS_PART_FEES DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table ODS_FUND_DTL";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fundDetails.fundName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ODS_FUND_DTL.ODS_FUND_NAME ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FUNDNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static FundDetails toModel(FundDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FundDetails model = new FundDetailsImpl();

		model.setPolicyNo(soapModel.getPolicyNo());
		model.setFundName(soapModel.getFundName());
		model.setFundDesc(soapModel.getFundDesc());
		model.setFundPctg(soapModel.getFundPctg());
		model.setUnitsSum(soapModel.getUnitsSum());
		model.setUnitPrice(soapModel.getUnitPrice());
		model.setFundsValue(soapModel.getFundsValue());
		model.setRiskChg(soapModel.getRiskChg());
		model.setPartFees(soapModel.getPartFees());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<FundDetails> toModels(FundDetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FundDetails> models = new ArrayList<FundDetails>(
			soapModels.length);

		for (FundDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public FundDetailsModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _fundName;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setFundName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fundName;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return FundDetails.class;
	}

	@Override
	public String getModelClassName() {
		return FundDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FundDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FundDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FundDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FundDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FundDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FundDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FundDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FundDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FundDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, FundDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			FundDetails.class.getClassLoader(), FundDetails.class,
			ModelWrapper.class);

		try {
			Constructor<FundDetails> constructor =
				(Constructor<FundDetails>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<FundDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FundDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FundDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FundDetails, Object>>();
		Map<String, BiConsumer<FundDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FundDetails, ?>>();

		attributeGetterFunctions.put("policyNo", FundDetails::getPolicyNo);
		attributeSetterBiConsumers.put(
			"policyNo",
			(BiConsumer<FundDetails, String>)FundDetails::setPolicyNo);
		attributeGetterFunctions.put("fundName", FundDetails::getFundName);
		attributeSetterBiConsumers.put(
			"fundName",
			(BiConsumer<FundDetails, String>)FundDetails::setFundName);
		attributeGetterFunctions.put("fundDesc", FundDetails::getFundDesc);
		attributeSetterBiConsumers.put(
			"fundDesc",
			(BiConsumer<FundDetails, String>)FundDetails::setFundDesc);
		attributeGetterFunctions.put("fundPctg", FundDetails::getFundPctg);
		attributeSetterBiConsumers.put(
			"fundPctg",
			(BiConsumer<FundDetails, String>)FundDetails::setFundPctg);
		attributeGetterFunctions.put("unitsSum", FundDetails::getUnitsSum);
		attributeSetterBiConsumers.put(
			"unitsSum",
			(BiConsumer<FundDetails, Double>)FundDetails::setUnitsSum);
		attributeGetterFunctions.put("unitPrice", FundDetails::getUnitPrice);
		attributeSetterBiConsumers.put(
			"unitPrice",
			(BiConsumer<FundDetails, Double>)FundDetails::setUnitPrice);
		attributeGetterFunctions.put("fundsValue", FundDetails::getFundsValue);
		attributeSetterBiConsumers.put(
			"fundsValue",
			(BiConsumer<FundDetails, Double>)FundDetails::setFundsValue);
		attributeGetterFunctions.put("riskChg", FundDetails::getRiskChg);
		attributeSetterBiConsumers.put(
			"riskChg",
			(BiConsumer<FundDetails, Double>)FundDetails::setRiskChg);
		attributeGetterFunctions.put("partFees", FundDetails::getPartFees);
		attributeSetterBiConsumers.put(
			"partFees",
			(BiConsumer<FundDetails, Double>)FundDetails::setPartFees);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getPolicyNo() {
		if (_policyNo == null) {
			return "";
		}
		else {
			return _policyNo;
		}
	}

	@Override
	public void setPolicyNo(String policyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNo = policyNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPolicyNo() {
		return getColumnOriginalValue("ODS_POLICY_NO");
	}

	@JSON
	@Override
	public String getFundName() {
		if (_fundName == null) {
			return "";
		}
		else {
			return _fundName;
		}
	}

	@Override
	public void setFundName(String fundName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fundName = fundName;
	}

	@JSON
	@Override
	public String getFundDesc() {
		if (_fundDesc == null) {
			return "";
		}
		else {
			return _fundDesc;
		}
	}

	@Override
	public void setFundDesc(String fundDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fundDesc = fundDesc;
	}

	@JSON
	@Override
	public String getFundPctg() {
		if (_fundPctg == null) {
			return "";
		}
		else {
			return _fundPctg;
		}
	}

	@Override
	public void setFundPctg(String fundPctg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fundPctg = fundPctg;
	}

	@JSON
	@Override
	public double getUnitsSum() {
		return _unitsSum;
	}

	@Override
	public void setUnitsSum(double unitsSum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unitsSum = unitsSum;
	}

	@JSON
	@Override
	public double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(double unitPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public double getFundsValue() {
		return _fundsValue;
	}

	@Override
	public void setFundsValue(double fundsValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fundsValue = fundsValue;
	}

	@JSON
	@Override
	public double getRiskChg() {
		return _riskChg;
	}

	@Override
	public void setRiskChg(double riskChg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_riskChg = riskChg;
	}

	@JSON
	@Override
	public double getPartFees() {
		return _partFees;
	}

	@Override
	public void setPartFees(double partFees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_partFees = partFees;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public FundDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FundDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FundDetailsImpl fundDetailsImpl = new FundDetailsImpl();

		fundDetailsImpl.setPolicyNo(getPolicyNo());
		fundDetailsImpl.setFundName(getFundName());
		fundDetailsImpl.setFundDesc(getFundDesc());
		fundDetailsImpl.setFundPctg(getFundPctg());
		fundDetailsImpl.setUnitsSum(getUnitsSum());
		fundDetailsImpl.setUnitPrice(getUnitPrice());
		fundDetailsImpl.setFundsValue(getFundsValue());
		fundDetailsImpl.setRiskChg(getRiskChg());
		fundDetailsImpl.setPartFees(getPartFees());

		fundDetailsImpl.resetOriginalValues();

		return fundDetailsImpl;
	}

	@Override
	public int compareTo(FundDetails fundDetails) {
		String primaryKey = fundDetails.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FundDetails)) {
			return false;
		}

		FundDetails fundDetails = (FundDetails)object;

		String primaryKey = fundDetails.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FundDetails> toCacheModel() {
		FundDetailsCacheModel fundDetailsCacheModel =
			new FundDetailsCacheModel();

		fundDetailsCacheModel.policyNo = getPolicyNo();

		String policyNo = fundDetailsCacheModel.policyNo;

		if ((policyNo != null) && (policyNo.length() == 0)) {
			fundDetailsCacheModel.policyNo = null;
		}

		fundDetailsCacheModel.fundName = getFundName();

		String fundName = fundDetailsCacheModel.fundName;

		if ((fundName != null) && (fundName.length() == 0)) {
			fundDetailsCacheModel.fundName = null;
		}

		fundDetailsCacheModel.fundDesc = getFundDesc();

		String fundDesc = fundDetailsCacheModel.fundDesc;

		if ((fundDesc != null) && (fundDesc.length() == 0)) {
			fundDetailsCacheModel.fundDesc = null;
		}

		fundDetailsCacheModel.fundPctg = getFundPctg();

		String fundPctg = fundDetailsCacheModel.fundPctg;

		if ((fundPctg != null) && (fundPctg.length() == 0)) {
			fundDetailsCacheModel.fundPctg = null;
		}

		fundDetailsCacheModel.unitsSum = getUnitsSum();

		fundDetailsCacheModel.unitPrice = getUnitPrice();

		fundDetailsCacheModel.fundsValue = getFundsValue();

		fundDetailsCacheModel.riskChg = getRiskChg();

		fundDetailsCacheModel.partFees = getPartFees();

		return fundDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FundDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FundDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FundDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((FundDetails)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FundDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FundDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FundDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FundDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FundDetails>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _policyNo;
	private String _fundName;
	private String _fundDesc;
	private String _fundPctg;
	private double _unitsSum;
	private double _unitPrice;
	private double _fundsValue;
	private double _riskChg;
	private double _partFees;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FundDetails, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FundDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ODS_POLICY_NO", _policyNo);
		_columnOriginalValues.put("ODS_FUND_NAME", _fundName);
		_columnOriginalValues.put("ODS_FUND_DESC", _fundDesc);
		_columnOriginalValues.put("ODS_FUND_PCTG", _fundPctg);
		_columnOriginalValues.put("ODS_UNITS_SUM", _unitsSum);
		_columnOriginalValues.put("ODS_UNIT_PRICE", _unitPrice);
		_columnOriginalValues.put("ODS_FUNDS_VALUE", _fundsValue);
		_columnOriginalValues.put("ODS_RISK_CHG", _riskChg);
		_columnOriginalValues.put("ODS_PART_FEES", _partFees);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ODS_POLICY_NO", "policyNo");
		attributeNames.put("ODS_FUND_NAME", "fundName");
		attributeNames.put("ODS_FUND_DESC", "fundDesc");
		attributeNames.put("ODS_FUND_PCTG", "fundPctg");
		attributeNames.put("ODS_UNITS_SUM", "unitsSum");
		attributeNames.put("ODS_UNIT_PRICE", "unitPrice");
		attributeNames.put("ODS_FUNDS_VALUE", "fundsValue");
		attributeNames.put("ODS_RISK_CHG", "riskChg");
		attributeNames.put("ODS_PART_FEES", "partFees");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ODS_POLICY_NO", 1L);

		columnBitmasks.put("ODS_FUND_NAME", 2L);

		columnBitmasks.put("ODS_FUND_DESC", 4L);

		columnBitmasks.put("ODS_FUND_PCTG", 8L);

		columnBitmasks.put("ODS_UNITS_SUM", 16L);

		columnBitmasks.put("ODS_UNIT_PRICE", 32L);

		columnBitmasks.put("ODS_FUNDS_VALUE", 64L);

		columnBitmasks.put("ODS_RISK_CHG", 128L);

		columnBitmasks.put("ODS_PART_FEES", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FundDetails _escapedModel;

}