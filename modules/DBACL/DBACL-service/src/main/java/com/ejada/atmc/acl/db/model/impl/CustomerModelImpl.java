/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.Customer;
import com.ejada.atmc.acl.db.model.CustomerModel;
import com.ejada.atmc.acl.db.model.CustomerSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Customer service. Represents a row in the &quot;MDM_CUSTOMER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerImpl
 * @generated
 */
@JSON(strict = true)
public class CustomerModelImpl
	extends BaseModelImpl<Customer> implements CustomerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer model instance should use the <code>Customer</code> interface instead.
	 */
	public static final String TABLE_NAME = "MDM_CUSTOMER";

	public static final Object[][] TABLE_COLUMNS = {
		{"MDM_CUST_CIVIL_ID", Types.VARCHAR}, {"MDM_CUST_NAME", Types.VARCHAR},
		{"MDM_CUST_NAME_AR", Types.VARCHAR}, {"MDM_PHONE", Types.VARCHAR},
		{"MDM_EMAIL", Types.VARCHAR}, {"MDM_NATIONALITY", Types.VARCHAR},
		{"MDM_CUST_DOB", Types.TIMESTAMP}, {"MDM_GENDER", Types.VARCHAR},
		{"MDM_BLDG_NO", Types.VARCHAR}, {"MDM_UNIT_NO", Types.VARCHAR},
		{"MDM_STREET", Types.VARCHAR}, {"MDM_DISTRICT", Types.VARCHAR},
		{"MDM_ZIPCODE", Types.VARCHAR}, {"MDM_ADDTIONAL_NO", Types.VARCHAR},
		{"MDM_CITY", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MDM_CUST_CIVIL_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_NAME_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PHONE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_NATIONALITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CUST_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_GENDER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_BLDG_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_UNIT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_STREET", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_DISTRICT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_ZIPCODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_ADDTIONAL_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CITY", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MDM_CUSTOMER (MDM_CUST_CIVIL_ID VARCHAR(75) not null primary key,MDM_CUST_NAME VARCHAR(75) null,MDM_CUST_NAME_AR VARCHAR(75) null,MDM_PHONE VARCHAR(75) null,MDM_EMAIL VARCHAR(75) null,MDM_NATIONALITY VARCHAR(75) null,MDM_CUST_DOB DATE null,MDM_GENDER VARCHAR(75) null,MDM_BLDG_NO VARCHAR(75) null,MDM_UNIT_NO VARCHAR(75) null,MDM_STREET VARCHAR(75) null,MDM_DISTRICT VARCHAR(75) null,MDM_ZIPCODE VARCHAR(75) null,MDM_ADDTIONAL_NO VARCHAR(75) null,MDM_CITY VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table MDM_CUSTOMER";

	public static final String ORDER_BY_JPQL = " ORDER BY customer.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MDM_CUSTOMER.MDM_CUST_CIVIL_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Customer toModel(CustomerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Customer model = new CustomerImpl();

		model.setId(soapModel.getId());
		model.setNameEn(soapModel.getNameEn());
		model.setNameAr(soapModel.getNameAr());
		model.setPhone(soapModel.getPhone());
		model.setEmail(soapModel.getEmail());
		model.setNationality(soapModel.getNationality());
		model.setCustomerBirthDay(soapModel.getCustomerBirthDay());
		model.setGender(soapModel.getGender());
		model.setBuildingNo(soapModel.getBuildingNo());
		model.setUnitNo(soapModel.getUnitNo());
		model.setStreet(soapModel.getStreet());
		model.setDistrict(soapModel.getDistrict());
		model.setZipCode(soapModel.getZipCode());
		model.setAdditNo(soapModel.getAdditNo());
		model.setCity(soapModel.getCity());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Customer> toModels(CustomerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Customer> models = new ArrayList<Customer>(soapModels.length);

		for (CustomerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CustomerModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Customer.class;
	}

	@Override
	public String getModelClassName() {
		return Customer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Customer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Customer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Customer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Customer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Customer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Customer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Customer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Customer.class.getClassLoader(), Customer.class,
			ModelWrapper.class);

		try {
			Constructor<Customer> constructor =
				(Constructor<Customer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Customer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Customer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Customer, Object>>();
		Map<String, BiConsumer<Customer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Customer, ?>>();

		attributeGetterFunctions.put("id", Customer::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Customer, String>)Customer::setId);
		attributeGetterFunctions.put("nameEn", Customer::getNameEn);
		attributeSetterBiConsumers.put(
			"nameEn", (BiConsumer<Customer, String>)Customer::setNameEn);
		attributeGetterFunctions.put("nameAr", Customer::getNameAr);
		attributeSetterBiConsumers.put(
			"nameAr", (BiConsumer<Customer, String>)Customer::setNameAr);
		attributeGetterFunctions.put("phone", Customer::getPhone);
		attributeSetterBiConsumers.put(
			"phone", (BiConsumer<Customer, String>)Customer::setPhone);
		attributeGetterFunctions.put("email", Customer::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Customer, String>)Customer::setEmail);
		attributeGetterFunctions.put("nationality", Customer::getNationality);
		attributeSetterBiConsumers.put(
			"nationality",
			(BiConsumer<Customer, String>)Customer::setNationality);
		attributeGetterFunctions.put(
			"customerBirthDay", Customer::getCustomerBirthDay);
		attributeSetterBiConsumers.put(
			"customerBirthDay",
			(BiConsumer<Customer, Date>)Customer::setCustomerBirthDay);
		attributeGetterFunctions.put("gender", Customer::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Customer, String>)Customer::setGender);
		attributeGetterFunctions.put("buildingNo", Customer::getBuildingNo);
		attributeSetterBiConsumers.put(
			"buildingNo",
			(BiConsumer<Customer, String>)Customer::setBuildingNo);
		attributeGetterFunctions.put("unitNo", Customer::getUnitNo);
		attributeSetterBiConsumers.put(
			"unitNo", (BiConsumer<Customer, String>)Customer::setUnitNo);
		attributeGetterFunctions.put("street", Customer::getStreet);
		attributeSetterBiConsumers.put(
			"street", (BiConsumer<Customer, String>)Customer::setStreet);
		attributeGetterFunctions.put("district", Customer::getDistrict);
		attributeSetterBiConsumers.put(
			"district", (BiConsumer<Customer, String>)Customer::setDistrict);
		attributeGetterFunctions.put("zipCode", Customer::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode", (BiConsumer<Customer, String>)Customer::setZipCode);
		attributeGetterFunctions.put("additNo", Customer::getAdditNo);
		attributeSetterBiConsumers.put(
			"additNo", (BiConsumer<Customer, String>)Customer::setAdditNo);
		attributeGetterFunctions.put("city", Customer::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Customer, String>)Customer::setCity);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getId() {
		if (_id == null) {
			return "";
		}
		else {
			return _id;
		}
	}

	@Override
	public void setId(String id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalId() {
		return getColumnOriginalValue("MDM_CUST_CIVIL_ID");
	}

	@JSON
	@Override
	public String getNameEn() {
		if (_nameEn == null) {
			return "";
		}
		else {
			return _nameEn;
		}
	}

	@Override
	public void setNameEn(String nameEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameEn = nameEn;
	}

	@JSON
	@Override
	public String getNameAr() {
		if (_nameAr == null) {
			return "";
		}
		else {
			return _nameAr;
		}
	}

	@Override
	public void setNameAr(String nameAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameAr = nameAr;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return "";
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationality = nationality;
	}

	@JSON
	@Override
	public Date getCustomerBirthDay() {
		return _customerBirthDay;
	}

	@Override
	public void setCustomerBirthDay(Date customerBirthDay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerBirthDay = customerBirthDay;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getBuildingNo() {
		if (_buildingNo == null) {
			return "";
		}
		else {
			return _buildingNo;
		}
	}

	@Override
	public void setBuildingNo(String buildingNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_buildingNo = buildingNo;
	}

	@JSON
	@Override
	public String getUnitNo() {
		if (_unitNo == null) {
			return "";
		}
		else {
			return _unitNo;
		}
	}

	@Override
	public void setUnitNo(String unitNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unitNo = unitNo;
	}

	@JSON
	@Override
	public String getStreet() {
		if (_street == null) {
			return "";
		}
		else {
			return _street;
		}
	}

	@Override
	public void setStreet(String street) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_street = street;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getAdditNo() {
		if (_additNo == null) {
			return "";
		}
		else {
			return _additNo;
		}
	}

	@Override
	public void setAdditNo(String additNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_additNo = additNo;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Customer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Customer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setId(getId());
		customerImpl.setNameEn(getNameEn());
		customerImpl.setNameAr(getNameAr());
		customerImpl.setPhone(getPhone());
		customerImpl.setEmail(getEmail());
		customerImpl.setNationality(getNationality());
		customerImpl.setCustomerBirthDay(getCustomerBirthDay());
		customerImpl.setGender(getGender());
		customerImpl.setBuildingNo(getBuildingNo());
		customerImpl.setUnitNo(getUnitNo());
		customerImpl.setStreet(getStreet());
		customerImpl.setDistrict(getDistrict());
		customerImpl.setZipCode(getZipCode());
		customerImpl.setAdditNo(getAdditNo());
		customerImpl.setCity(getCity());

		customerImpl.resetOriginalValues();

		return customerImpl;
	}

	@Override
	public int compareTo(Customer customer) {
		String primaryKey = customer.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Customer)) {
			return false;
		}

		Customer customer = (Customer)object;

		String primaryKey = customer.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Customer> toCacheModel() {
		CustomerCacheModel customerCacheModel = new CustomerCacheModel();

		customerCacheModel.id = getId();

		String id = customerCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			customerCacheModel.id = null;
		}

		customerCacheModel.nameEn = getNameEn();

		String nameEn = customerCacheModel.nameEn;

		if ((nameEn != null) && (nameEn.length() == 0)) {
			customerCacheModel.nameEn = null;
		}

		customerCacheModel.nameAr = getNameAr();

		String nameAr = customerCacheModel.nameAr;

		if ((nameAr != null) && (nameAr.length() == 0)) {
			customerCacheModel.nameAr = null;
		}

		customerCacheModel.phone = getPhone();

		String phone = customerCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			customerCacheModel.phone = null;
		}

		customerCacheModel.email = getEmail();

		String email = customerCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			customerCacheModel.email = null;
		}

		customerCacheModel.nationality = getNationality();

		String nationality = customerCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			customerCacheModel.nationality = null;
		}

		Date customerBirthDay = getCustomerBirthDay();

		if (customerBirthDay != null) {
			customerCacheModel.customerBirthDay = customerBirthDay.getTime();
		}
		else {
			customerCacheModel.customerBirthDay = Long.MIN_VALUE;
		}

		customerCacheModel.gender = getGender();

		String gender = customerCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			customerCacheModel.gender = null;
		}

		customerCacheModel.buildingNo = getBuildingNo();

		String buildingNo = customerCacheModel.buildingNo;

		if ((buildingNo != null) && (buildingNo.length() == 0)) {
			customerCacheModel.buildingNo = null;
		}

		customerCacheModel.unitNo = getUnitNo();

		String unitNo = customerCacheModel.unitNo;

		if ((unitNo != null) && (unitNo.length() == 0)) {
			customerCacheModel.unitNo = null;
		}

		customerCacheModel.street = getStreet();

		String street = customerCacheModel.street;

		if ((street != null) && (street.length() == 0)) {
			customerCacheModel.street = null;
		}

		customerCacheModel.district = getDistrict();

		String district = customerCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			customerCacheModel.district = null;
		}

		customerCacheModel.zipCode = getZipCode();

		String zipCode = customerCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			customerCacheModel.zipCode = null;
		}

		customerCacheModel.additNo = getAdditNo();

		String additNo = customerCacheModel.additNo;

		if ((additNo != null) && (additNo.length() == 0)) {
			customerCacheModel.additNo = null;
		}

		customerCacheModel.city = getCity();

		String city = customerCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			customerCacheModel.city = null;
		}

		return customerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Customer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Customer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Customer>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _id;
	private String _nameEn;
	private String _nameAr;
	private String _phone;
	private String _email;
	private String _nationality;
	private Date _customerBirthDay;
	private String _gender;
	private String _buildingNo;
	private String _unitNo;
	private String _street;
	private String _district;
	private String _zipCode;
	private String _additNo;
	private String _city;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Customer, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Customer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("MDM_CUST_CIVIL_ID", _id);
		_columnOriginalValues.put("MDM_CUST_NAME", _nameEn);
		_columnOriginalValues.put("MDM_CUST_NAME_AR", _nameAr);
		_columnOriginalValues.put("MDM_PHONE", _phone);
		_columnOriginalValues.put("MDM_EMAIL", _email);
		_columnOriginalValues.put("MDM_NATIONALITY", _nationality);
		_columnOriginalValues.put("MDM_CUST_DOB", _customerBirthDay);
		_columnOriginalValues.put("MDM_GENDER", _gender);
		_columnOriginalValues.put("MDM_BLDG_NO", _buildingNo);
		_columnOriginalValues.put("MDM_UNIT_NO", _unitNo);
		_columnOriginalValues.put("MDM_STREET", _street);
		_columnOriginalValues.put("MDM_DISTRICT", _district);
		_columnOriginalValues.put("MDM_ZIPCODE", _zipCode);
		_columnOriginalValues.put("MDM_ADDTIONAL_NO", _additNo);
		_columnOriginalValues.put("MDM_CITY", _city);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("MDM_CUST_CIVIL_ID", "id");
		attributeNames.put("MDM_CUST_NAME", "nameEn");
		attributeNames.put("MDM_CUST_NAME_AR", "nameAr");
		attributeNames.put("MDM_PHONE", "phone");
		attributeNames.put("MDM_EMAIL", "email");
		attributeNames.put("MDM_NATIONALITY", "nationality");
		attributeNames.put("MDM_CUST_DOB", "customerBirthDay");
		attributeNames.put("MDM_GENDER", "gender");
		attributeNames.put("MDM_BLDG_NO", "buildingNo");
		attributeNames.put("MDM_UNIT_NO", "unitNo");
		attributeNames.put("MDM_STREET", "street");
		attributeNames.put("MDM_DISTRICT", "district");
		attributeNames.put("MDM_ZIPCODE", "zipCode");
		attributeNames.put("MDM_ADDTIONAL_NO", "additNo");
		attributeNames.put("MDM_CITY", "city");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("MDM_CUST_CIVIL_ID", 1L);

		columnBitmasks.put("MDM_CUST_NAME", 2L);

		columnBitmasks.put("MDM_CUST_NAME_AR", 4L);

		columnBitmasks.put("MDM_PHONE", 8L);

		columnBitmasks.put("MDM_EMAIL", 16L);

		columnBitmasks.put("MDM_NATIONALITY", 32L);

		columnBitmasks.put("MDM_CUST_DOB", 64L);

		columnBitmasks.put("MDM_GENDER", 128L);

		columnBitmasks.put("MDM_BLDG_NO", 256L);

		columnBitmasks.put("MDM_UNIT_NO", 512L);

		columnBitmasks.put("MDM_STREET", 1024L);

		columnBitmasks.put("MDM_DISTRICT", 2048L);

		columnBitmasks.put("MDM_ZIPCODE", 4096L);

		columnBitmasks.put("MDM_ADDTIONAL_NO", 8192L);

		columnBitmasks.put("MDM_CITY", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Customer _escapedModel;

}