/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.QuotationStatusHistory;
import com.ejada.atmc.acl.db.model.QuotationStatusHistoryModel;
import com.ejada.atmc.acl.db.model.QuotationStatusHistorySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuotationStatusHistory service. Represents a row in the &quot;EJD_QUOTATION_STATUS_HISTORY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationStatusHistoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationStatusHistoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationStatusHistoryImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationStatusHistoryModelImpl
	extends BaseModelImpl<QuotationStatusHistory>
	implements QuotationStatusHistoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotation status history model instance should use the <code>QuotationStatusHistory</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_QUOTATION_STATUS_HISTORY";

	public static final Object[][] TABLE_COLUMNS = {
		{"HISTORY_ID", Types.BIGINT}, {"QUOTATION_ID", Types.BIGINT},
		{"DATE_TIME", Types.TIMESTAMP}, {"USER_NAME", Types.VARCHAR},
		{"STATUS", Types.VARCHAR}, {"REASON", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("HISTORY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTATION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DATE_TIME", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("USER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REASON", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_QUOTATION_STATUS_HISTORY (HISTORY_ID LONG not null primary key,QUOTATION_ID LONG,DATE_TIME DATE null,USER_NAME VARCHAR(75) null,STATUS VARCHAR(75) null,REASON VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table EJD_QUOTATION_STATUS_HISTORY";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotationStatusHistory.dateTime DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_QUOTATION_STATUS_HISTORY.DATE_TIME DESC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUOTATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DATETIME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static QuotationStatusHistory toModel(
		QuotationStatusHistorySoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		QuotationStatusHistory model = new QuotationStatusHistoryImpl();

		model.setHistoryId(soapModel.getHistoryId());
		model.setQuotationId(soapModel.getQuotationId());
		model.setDateTime(soapModel.getDateTime());
		model.setUserName(soapModel.getUserName());
		model.setStatus(soapModel.getStatus());
		model.setReason(soapModel.getReason());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<QuotationStatusHistory> toModels(
		QuotationStatusHistorySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<QuotationStatusHistory> models =
			new ArrayList<QuotationStatusHistory>(soapModels.length);

		for (QuotationStatusHistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationStatusHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _historyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHistoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _historyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuotationStatusHistory.class;
	}

	@Override
	public String getModelClassName() {
		return QuotationStatusHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuotationStatusHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuotationStatusHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationStatusHistory, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuotationStatusHistory)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuotationStatusHistory, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuotationStatusHistory, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuotationStatusHistory)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuotationStatusHistory, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuotationStatusHistory, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QuotationStatusHistory>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QuotationStatusHistory.class.getClassLoader(),
			QuotationStatusHistory.class, ModelWrapper.class);

		try {
			Constructor<QuotationStatusHistory> constructor =
				(Constructor<QuotationStatusHistory>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QuotationStatusHistory, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QuotationStatusHistory, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuotationStatusHistory, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<QuotationStatusHistory, Object>>();
		Map<String, BiConsumer<QuotationStatusHistory, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<QuotationStatusHistory, ?>>();

		attributeGetterFunctions.put(
			"historyId", QuotationStatusHistory::getHistoryId);
		attributeSetterBiConsumers.put(
			"historyId",
			(BiConsumer<QuotationStatusHistory, Long>)
				QuotationStatusHistory::setHistoryId);
		attributeGetterFunctions.put(
			"quotationId", QuotationStatusHistory::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<QuotationStatusHistory, Long>)
				QuotationStatusHistory::setQuotationId);
		attributeGetterFunctions.put(
			"dateTime", QuotationStatusHistory::getDateTime);
		attributeSetterBiConsumers.put(
			"dateTime",
			(BiConsumer<QuotationStatusHistory, Date>)
				QuotationStatusHistory::setDateTime);
		attributeGetterFunctions.put(
			"userName", QuotationStatusHistory::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<QuotationStatusHistory, String>)
				QuotationStatusHistory::setUserName);
		attributeGetterFunctions.put(
			"status", QuotationStatusHistory::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<QuotationStatusHistory, String>)
				QuotationStatusHistory::setStatus);
		attributeGetterFunctions.put(
			"reason", QuotationStatusHistory::getReason);
		attributeSetterBiConsumers.put(
			"reason",
			(BiConsumer<QuotationStatusHistory, String>)
				QuotationStatusHistory::setReason);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getHistoryId() {
		return _historyId;
	}

	@Override
	public void setHistoryId(long historyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_historyId = historyId;
	}

	@JSON
	@Override
	public long getQuotationId() {
		return _quotationId;
	}

	@Override
	public void setQuotationId(long quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuotationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("QUOTATION_ID"));
	}

	@JSON
	@Override
	public Date getDateTime() {
		return _dateTime;
	}

	@Override
	public void setDateTime(Date dateTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateTime = dateTime;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getReason() {
		if (_reason == null) {
			return "";
		}
		else {
			return _reason;
		}
	}

	@Override
	public void setReason(String reason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reason = reason;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, QuotationStatusHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuotationStatusHistory toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuotationStatusHistory>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationStatusHistoryImpl quotationStatusHistoryImpl =
			new QuotationStatusHistoryImpl();

		quotationStatusHistoryImpl.setHistoryId(getHistoryId());
		quotationStatusHistoryImpl.setQuotationId(getQuotationId());
		quotationStatusHistoryImpl.setDateTime(getDateTime());
		quotationStatusHistoryImpl.setUserName(getUserName());
		quotationStatusHistoryImpl.setStatus(getStatus());
		quotationStatusHistoryImpl.setReason(getReason());

		quotationStatusHistoryImpl.resetOriginalValues();

		return quotationStatusHistoryImpl;
	}

	@Override
	public int compareTo(QuotationStatusHistory quotationStatusHistory) {
		int value = 0;

		value = DateUtil.compareTo(
			getDateTime(), quotationStatusHistory.getDateTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuotationStatusHistory)) {
			return false;
		}

		QuotationStatusHistory quotationStatusHistory =
			(QuotationStatusHistory)object;

		long primaryKey = quotationStatusHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotationStatusHistory> toCacheModel() {
		QuotationStatusHistoryCacheModel quotationStatusHistoryCacheModel =
			new QuotationStatusHistoryCacheModel();

		quotationStatusHistoryCacheModel.historyId = getHistoryId();

		quotationStatusHistoryCacheModel.quotationId = getQuotationId();

		Date dateTime = getDateTime();

		if (dateTime != null) {
			quotationStatusHistoryCacheModel.dateTime = dateTime.getTime();
		}
		else {
			quotationStatusHistoryCacheModel.dateTime = Long.MIN_VALUE;
		}

		quotationStatusHistoryCacheModel.userName = getUserName();

		String userName = quotationStatusHistoryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			quotationStatusHistoryCacheModel.userName = null;
		}

		quotationStatusHistoryCacheModel.status = getStatus();

		String status = quotationStatusHistoryCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			quotationStatusHistoryCacheModel.status = null;
		}

		quotationStatusHistoryCacheModel.reason = getReason();

		String reason = quotationStatusHistoryCacheModel.reason;

		if ((reason != null) && (reason.length() == 0)) {
			quotationStatusHistoryCacheModel.reason = null;
		}

		return quotationStatusHistoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuotationStatusHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuotationStatusHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationStatusHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((QuotationStatusHistory)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<QuotationStatusHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<QuotationStatusHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationStatusHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((QuotationStatusHistory)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QuotationStatusHistory>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _historyId;
	private long _quotationId;
	private Date _dateTime;
	private String _userName;
	private String _status;
	private String _reason;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuotationStatusHistory, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuotationStatusHistory)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("HISTORY_ID", _historyId);
		_columnOriginalValues.put("QUOTATION_ID", _quotationId);
		_columnOriginalValues.put("DATE_TIME", _dateTime);
		_columnOriginalValues.put("USER_NAME", _userName);
		_columnOriginalValues.put("STATUS", _status);
		_columnOriginalValues.put("REASON", _reason);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("HISTORY_ID", "historyId");
		attributeNames.put("QUOTATION_ID", "quotationId");
		attributeNames.put("DATE_TIME", "dateTime");
		attributeNames.put("USER_NAME", "userName");
		attributeNames.put("STATUS", "status");
		attributeNames.put("REASON", "reason");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("HISTORY_ID", 1L);

		columnBitmasks.put("QUOTATION_ID", 2L);

		columnBitmasks.put("DATE_TIME", 4L);

		columnBitmasks.put("USER_NAME", 8L);

		columnBitmasks.put("STATUS", 16L);

		columnBitmasks.put("REASON", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuotationStatusHistory _escapedModel;

}