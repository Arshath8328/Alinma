/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.CodeMaster;
import com.ejada.atmc.acl.db.model.CodeMasterModel;
import com.ejada.atmc.acl.db.model.CodeMasterSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CodeMaster service. Represents a row in the &quot;PM_CODE_MASTER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CodeMasterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CodeMasterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CodeMasterImpl
 * @generated
 */
@JSON(strict = true)
public class CodeMasterModelImpl
	extends BaseModelImpl<CodeMaster> implements CodeMasterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a code master model instance should use the <code>CodeMaster</code> interface instead.
	 */
	public static final String TABLE_NAME = "PM_CODE_MASTER";

	public static final Object[][] TABLE_COLUMNS = {
		{"MDM_CODE_SYS_ID", Types.BIGINT},
		{"MDM_CODE_EFF_FM_DT", Types.TIMESTAMP},
		{"MDM_CODE_EFF_TO_DT", Types.TIMESTAMP},
		{"MDM_CODE_CR_DT", Types.TIMESTAMP}, {"MDM_CODE_CR_UID", Types.VARCHAR},
		{"MDM_CODE_UPD_DT", Types.VARCHAR}, {"MDM_CODE_UPD_UID", Types.BIGINT},
		{"MDM_CODE", Types.VARCHAR}, {"MDM_CODE_SUB", Types.VARCHAR},
		{"MDM_CODE_DESC", Types.VARCHAR}, {"MDM_CODE_DESC_AR", Types.VARCHAR},
		{"MDM_CODE_VALUE_0", Types.VARCHAR},
		{"MDM_CODE_VALUE_1", Types.VARCHAR},
		{"MDM_CODE_VALUE_2", Types.VARCHAR}, {"MDM_CODE_REF", Types.VARCHAR},
		{"MDM_CODE_SUB_REF", Types.VARCHAR},
		{"MDM_CODE_FREEZ_YN", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MDM_CODE_SYS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MDM_CODE_EFF_FM_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_CODE_EFF_TO_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_CODE_CR_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MDM_CODE_CR_UID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_UPD_DT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_UPD_UID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MDM_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_SUB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_DESC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_DESC_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_VALUE_0", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_VALUE_1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_VALUE_2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_REF", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_SUB_REF", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CODE_FREEZ_YN", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PM_CODE_MASTER (MDM_CODE_SYS_ID LONG not null primary key,MDM_CODE_EFF_FM_DT DATE null,MDM_CODE_EFF_TO_DT DATE null,MDM_CODE_CR_DT DATE null,MDM_CODE_CR_UID VARCHAR(75) null,MDM_CODE_UPD_DT VARCHAR(75) null,MDM_CODE_UPD_UID LONG,MDM_CODE VARCHAR(75) null,MDM_CODE_SUB VARCHAR(75) null,MDM_CODE_DESC VARCHAR(75) null,MDM_CODE_DESC_AR VARCHAR(75) null,MDM_CODE_VALUE_0 VARCHAR(75) null,MDM_CODE_VALUE_1 VARCHAR(75) null,MDM_CODE_VALUE_2 VARCHAR(75) null,MDM_CODE_REF VARCHAR(75) null,MDM_CODE_SUB_REF VARCHAR(75) null,MDM_CODE_FREEZ_YN VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table PM_CODE_MASTER";

	public static final String ORDER_BY_JPQL =
		" ORDER BY codeMaster.systemId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PM_CODE_MASTER.MDM_CODE_SYS_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CODEFREEZYN_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CODESUB_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CODESUBREF_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SYSTEMID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static CodeMaster toModel(CodeMasterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CodeMaster model = new CodeMasterImpl();

		model.setSystemId(soapModel.getSystemId());
		model.setEffFromDate(soapModel.getEffFromDate());
		model.setEffToDate(soapModel.getEffToDate());
		model.setCreationDate(soapModel.getCreationDate());
		model.setCrUid(soapModel.getCrUid());
		model.setUpdateDate(soapModel.getUpdateDate());
		model.setUpdateUid(soapModel.getUpdateUid());
		model.setCode(soapModel.getCode());
		model.setCodeSub(soapModel.getCodeSub());
		model.setCodeDesc(soapModel.getCodeDesc());
		model.setCodeDescAr(soapModel.getCodeDescAr());
		model.setCodeValue0(soapModel.getCodeValue0());
		model.setCodeValue1(soapModel.getCodeValue1());
		model.setCodeValue2(soapModel.getCodeValue2());
		model.setCodeRef(soapModel.getCodeRef());
		model.setCodeSubRef(soapModel.getCodeSubRef());
		model.setCodeFreezYN(soapModel.getCodeFreezYN());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<CodeMaster> toModels(CodeMasterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CodeMaster> models = new ArrayList<CodeMaster>(soapModels.length);

		for (CodeMasterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CodeMasterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _systemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSystemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _systemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CodeMaster.class;
	}

	@Override
	public String getModelClassName() {
		return CodeMaster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CodeMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CodeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CodeMaster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CodeMaster)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CodeMaster, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CodeMaster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CodeMaster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CodeMaster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CodeMaster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CodeMaster>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CodeMaster.class.getClassLoader(), CodeMaster.class,
			ModelWrapper.class);

		try {
			Constructor<CodeMaster> constructor =
				(Constructor<CodeMaster>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CodeMaster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CodeMaster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CodeMaster, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CodeMaster, Object>>();
		Map<String, BiConsumer<CodeMaster, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CodeMaster, ?>>();

		attributeGetterFunctions.put("systemId", CodeMaster::getSystemId);
		attributeSetterBiConsumers.put(
			"systemId", (BiConsumer<CodeMaster, Long>)CodeMaster::setSystemId);
		attributeGetterFunctions.put("effFromDate", CodeMaster::getEffFromDate);
		attributeSetterBiConsumers.put(
			"effFromDate",
			(BiConsumer<CodeMaster, Date>)CodeMaster::setEffFromDate);
		attributeGetterFunctions.put("effToDate", CodeMaster::getEffToDate);
		attributeSetterBiConsumers.put(
			"effToDate",
			(BiConsumer<CodeMaster, Date>)CodeMaster::setEffToDate);
		attributeGetterFunctions.put(
			"creationDate", CodeMaster::getCreationDate);
		attributeSetterBiConsumers.put(
			"creationDate",
			(BiConsumer<CodeMaster, Date>)CodeMaster::setCreationDate);
		attributeGetterFunctions.put("crUid", CodeMaster::getCrUid);
		attributeSetterBiConsumers.put(
			"crUid", (BiConsumer<CodeMaster, String>)CodeMaster::setCrUid);
		attributeGetterFunctions.put("updateDate", CodeMaster::getUpdateDate);
		attributeSetterBiConsumers.put(
			"updateDate",
			(BiConsumer<CodeMaster, String>)CodeMaster::setUpdateDate);
		attributeGetterFunctions.put("updateUid", CodeMaster::getUpdateUid);
		attributeSetterBiConsumers.put(
			"updateUid",
			(BiConsumer<CodeMaster, Long>)CodeMaster::setUpdateUid);
		attributeGetterFunctions.put("code", CodeMaster::getCode);
		attributeSetterBiConsumers.put(
			"code", (BiConsumer<CodeMaster, String>)CodeMaster::setCode);
		attributeGetterFunctions.put("codeSub", CodeMaster::getCodeSub);
		attributeSetterBiConsumers.put(
			"codeSub", (BiConsumer<CodeMaster, String>)CodeMaster::setCodeSub);
		attributeGetterFunctions.put("codeDesc", CodeMaster::getCodeDesc);
		attributeSetterBiConsumers.put(
			"codeDesc",
			(BiConsumer<CodeMaster, String>)CodeMaster::setCodeDesc);
		attributeGetterFunctions.put("codeDescAr", CodeMaster::getCodeDescAr);
		attributeSetterBiConsumers.put(
			"codeDescAr",
			(BiConsumer<CodeMaster, String>)CodeMaster::setCodeDescAr);
		attributeGetterFunctions.put("codeValue0", CodeMaster::getCodeValue0);
		attributeSetterBiConsumers.put(
			"codeValue0",
			(BiConsumer<CodeMaster, String>)CodeMaster::setCodeValue0);
		attributeGetterFunctions.put("codeValue1", CodeMaster::getCodeValue1);
		attributeSetterBiConsumers.put(
			"codeValue1",
			(BiConsumer<CodeMaster, String>)CodeMaster::setCodeValue1);
		attributeGetterFunctions.put("codeValue2", CodeMaster::getCodeValue2);
		attributeSetterBiConsumers.put(
			"codeValue2",
			(BiConsumer<CodeMaster, String>)CodeMaster::setCodeValue2);
		attributeGetterFunctions.put("codeRef", CodeMaster::getCodeRef);
		attributeSetterBiConsumers.put(
			"codeRef", (BiConsumer<CodeMaster, String>)CodeMaster::setCodeRef);
		attributeGetterFunctions.put("codeSubRef", CodeMaster::getCodeSubRef);
		attributeSetterBiConsumers.put(
			"codeSubRef",
			(BiConsumer<CodeMaster, String>)CodeMaster::setCodeSubRef);
		attributeGetterFunctions.put("codeFreezYN", CodeMaster::getCodeFreezYN);
		attributeSetterBiConsumers.put(
			"codeFreezYN",
			(BiConsumer<CodeMaster, String>)CodeMaster::setCodeFreezYN);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSystemId() {
		return _systemId;
	}

	@Override
	public void setSystemId(long systemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_systemId = systemId;
	}

	@JSON
	@Override
	public Date getEffFromDate() {
		return _effFromDate;
	}

	@Override
	public void setEffFromDate(Date effFromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_effFromDate = effFromDate;
	}

	@JSON
	@Override
	public Date getEffToDate() {
		return _effToDate;
	}

	@Override
	public void setEffToDate(Date effToDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_effToDate = effToDate;
	}

	@JSON
	@Override
	public Date getCreationDate() {
		return _creationDate;
	}

	@Override
	public void setCreationDate(Date creationDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creationDate = creationDate;
	}

	@JSON
	@Override
	public String getCrUid() {
		if (_crUid == null) {
			return "";
		}
		else {
			return _crUid;
		}
	}

	@Override
	public void setCrUid(String crUid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_crUid = crUid;
	}

	@JSON
	@Override
	public String getUpdateDate() {
		if (_updateDate == null) {
			return "";
		}
		else {
			return _updateDate;
		}
	}

	@Override
	public void setUpdateDate(String updateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updateDate = updateDate;
	}

	@JSON
	@Override
	public long getUpdateUid() {
		return _updateUid;
	}

	@Override
	public void setUpdateUid(long updateUid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updateUid = updateUid;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_code = code;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCode() {
		return getColumnOriginalValue("MDM_CODE");
	}

	@JSON
	@Override
	public String getCodeSub() {
		if (_codeSub == null) {
			return "";
		}
		else {
			return _codeSub;
		}
	}

	@Override
	public void setCodeSub(String codeSub) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeSub = codeSub;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodeSub() {
		return getColumnOriginalValue("MDM_CODE_SUB");
	}

	@JSON
	@Override
	public String getCodeDesc() {
		if (_codeDesc == null) {
			return "";
		}
		else {
			return _codeDesc;
		}
	}

	@Override
	public void setCodeDesc(String codeDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeDesc = codeDesc;
	}

	@JSON
	@Override
	public String getCodeDescAr() {
		if (_codeDescAr == null) {
			return "";
		}
		else {
			return _codeDescAr;
		}
	}

	@Override
	public void setCodeDescAr(String codeDescAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeDescAr = codeDescAr;
	}

	@JSON
	@Override
	public String getCodeValue0() {
		if (_codeValue0 == null) {
			return "";
		}
		else {
			return _codeValue0;
		}
	}

	@Override
	public void setCodeValue0(String codeValue0) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeValue0 = codeValue0;
	}

	@JSON
	@Override
	public String getCodeValue1() {
		if (_codeValue1 == null) {
			return "";
		}
		else {
			return _codeValue1;
		}
	}

	@Override
	public void setCodeValue1(String codeValue1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeValue1 = codeValue1;
	}

	@JSON
	@Override
	public String getCodeValue2() {
		if (_codeValue2 == null) {
			return "";
		}
		else {
			return _codeValue2;
		}
	}

	@Override
	public void setCodeValue2(String codeValue2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeValue2 = codeValue2;
	}

	@JSON
	@Override
	public String getCodeRef() {
		if (_codeRef == null) {
			return "";
		}
		else {
			return _codeRef;
		}
	}

	@Override
	public void setCodeRef(String codeRef) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeRef = codeRef;
	}

	@JSON
	@Override
	public String getCodeSubRef() {
		if (_codeSubRef == null) {
			return "";
		}
		else {
			return _codeSubRef;
		}
	}

	@Override
	public void setCodeSubRef(String codeSubRef) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeSubRef = codeSubRef;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodeSubRef() {
		return getColumnOriginalValue("MDM_CODE_SUB_REF");
	}

	@JSON
	@Override
	public String getCodeFreezYN() {
		if (_codeFreezYN == null) {
			return "";
		}
		else {
			return _codeFreezYN;
		}
	}

	@Override
	public void setCodeFreezYN(String codeFreezYN) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeFreezYN = codeFreezYN;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCodeFreezYN() {
		return getColumnOriginalValue("MDM_CODE_FREEZ_YN");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CodeMaster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CodeMaster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CodeMaster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CodeMasterImpl codeMasterImpl = new CodeMasterImpl();

		codeMasterImpl.setSystemId(getSystemId());
		codeMasterImpl.setEffFromDate(getEffFromDate());
		codeMasterImpl.setEffToDate(getEffToDate());
		codeMasterImpl.setCreationDate(getCreationDate());
		codeMasterImpl.setCrUid(getCrUid());
		codeMasterImpl.setUpdateDate(getUpdateDate());
		codeMasterImpl.setUpdateUid(getUpdateUid());
		codeMasterImpl.setCode(getCode());
		codeMasterImpl.setCodeSub(getCodeSub());
		codeMasterImpl.setCodeDesc(getCodeDesc());
		codeMasterImpl.setCodeDescAr(getCodeDescAr());
		codeMasterImpl.setCodeValue0(getCodeValue0());
		codeMasterImpl.setCodeValue1(getCodeValue1());
		codeMasterImpl.setCodeValue2(getCodeValue2());
		codeMasterImpl.setCodeRef(getCodeRef());
		codeMasterImpl.setCodeSubRef(getCodeSubRef());
		codeMasterImpl.setCodeFreezYN(getCodeFreezYN());

		codeMasterImpl.resetOriginalValues();

		return codeMasterImpl;
	}

	@Override
	public int compareTo(CodeMaster codeMaster) {
		long primaryKey = codeMaster.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CodeMaster)) {
			return false;
		}

		CodeMaster codeMaster = (CodeMaster)object;

		long primaryKey = codeMaster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CodeMaster> toCacheModel() {
		CodeMasterCacheModel codeMasterCacheModel = new CodeMasterCacheModel();

		codeMasterCacheModel.systemId = getSystemId();

		Date effFromDate = getEffFromDate();

		if (effFromDate != null) {
			codeMasterCacheModel.effFromDate = effFromDate.getTime();
		}
		else {
			codeMasterCacheModel.effFromDate = Long.MIN_VALUE;
		}

		Date effToDate = getEffToDate();

		if (effToDate != null) {
			codeMasterCacheModel.effToDate = effToDate.getTime();
		}
		else {
			codeMasterCacheModel.effToDate = Long.MIN_VALUE;
		}

		Date creationDate = getCreationDate();

		if (creationDate != null) {
			codeMasterCacheModel.creationDate = creationDate.getTime();
		}
		else {
			codeMasterCacheModel.creationDate = Long.MIN_VALUE;
		}

		codeMasterCacheModel.crUid = getCrUid();

		String crUid = codeMasterCacheModel.crUid;

		if ((crUid != null) && (crUid.length() == 0)) {
			codeMasterCacheModel.crUid = null;
		}

		codeMasterCacheModel.updateDate = getUpdateDate();

		String updateDate = codeMasterCacheModel.updateDate;

		if ((updateDate != null) && (updateDate.length() == 0)) {
			codeMasterCacheModel.updateDate = null;
		}

		codeMasterCacheModel.updateUid = getUpdateUid();

		codeMasterCacheModel.code = getCode();

		String code = codeMasterCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			codeMasterCacheModel.code = null;
		}

		codeMasterCacheModel.codeSub = getCodeSub();

		String codeSub = codeMasterCacheModel.codeSub;

		if ((codeSub != null) && (codeSub.length() == 0)) {
			codeMasterCacheModel.codeSub = null;
		}

		codeMasterCacheModel.codeDesc = getCodeDesc();

		String codeDesc = codeMasterCacheModel.codeDesc;

		if ((codeDesc != null) && (codeDesc.length() == 0)) {
			codeMasterCacheModel.codeDesc = null;
		}

		codeMasterCacheModel.codeDescAr = getCodeDescAr();

		String codeDescAr = codeMasterCacheModel.codeDescAr;

		if ((codeDescAr != null) && (codeDescAr.length() == 0)) {
			codeMasterCacheModel.codeDescAr = null;
		}

		codeMasterCacheModel.codeValue0 = getCodeValue0();

		String codeValue0 = codeMasterCacheModel.codeValue0;

		if ((codeValue0 != null) && (codeValue0.length() == 0)) {
			codeMasterCacheModel.codeValue0 = null;
		}

		codeMasterCacheModel.codeValue1 = getCodeValue1();

		String codeValue1 = codeMasterCacheModel.codeValue1;

		if ((codeValue1 != null) && (codeValue1.length() == 0)) {
			codeMasterCacheModel.codeValue1 = null;
		}

		codeMasterCacheModel.codeValue2 = getCodeValue2();

		String codeValue2 = codeMasterCacheModel.codeValue2;

		if ((codeValue2 != null) && (codeValue2.length() == 0)) {
			codeMasterCacheModel.codeValue2 = null;
		}

		codeMasterCacheModel.codeRef = getCodeRef();

		String codeRef = codeMasterCacheModel.codeRef;

		if ((codeRef != null) && (codeRef.length() == 0)) {
			codeMasterCacheModel.codeRef = null;
		}

		codeMasterCacheModel.codeSubRef = getCodeSubRef();

		String codeSubRef = codeMasterCacheModel.codeSubRef;

		if ((codeSubRef != null) && (codeSubRef.length() == 0)) {
			codeMasterCacheModel.codeSubRef = null;
		}

		codeMasterCacheModel.codeFreezYN = getCodeFreezYN();

		String codeFreezYN = codeMasterCacheModel.codeFreezYN;

		if ((codeFreezYN != null) && (codeFreezYN.length() == 0)) {
			codeMasterCacheModel.codeFreezYN = null;
		}

		return codeMasterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CodeMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CodeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CodeMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CodeMaster)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CodeMaster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CodeMaster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CodeMaster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CodeMaster)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CodeMaster>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _systemId;
	private Date _effFromDate;
	private Date _effToDate;
	private Date _creationDate;
	private String _crUid;
	private String _updateDate;
	private long _updateUid;
	private String _code;
	private String _codeSub;
	private String _codeDesc;
	private String _codeDescAr;
	private String _codeValue0;
	private String _codeValue1;
	private String _codeValue2;
	private String _codeRef;
	private String _codeSubRef;
	private String _codeFreezYN;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CodeMaster, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CodeMaster)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("MDM_CODE_SYS_ID", _systemId);
		_columnOriginalValues.put("MDM_CODE_EFF_FM_DT", _effFromDate);
		_columnOriginalValues.put("MDM_CODE_EFF_TO_DT", _effToDate);
		_columnOriginalValues.put("MDM_CODE_CR_DT", _creationDate);
		_columnOriginalValues.put("MDM_CODE_CR_UID", _crUid);
		_columnOriginalValues.put("MDM_CODE_UPD_DT", _updateDate);
		_columnOriginalValues.put("MDM_CODE_UPD_UID", _updateUid);
		_columnOriginalValues.put("MDM_CODE", _code);
		_columnOriginalValues.put("MDM_CODE_SUB", _codeSub);
		_columnOriginalValues.put("MDM_CODE_DESC", _codeDesc);
		_columnOriginalValues.put("MDM_CODE_DESC_AR", _codeDescAr);
		_columnOriginalValues.put("MDM_CODE_VALUE_0", _codeValue0);
		_columnOriginalValues.put("MDM_CODE_VALUE_1", _codeValue1);
		_columnOriginalValues.put("MDM_CODE_VALUE_2", _codeValue2);
		_columnOriginalValues.put("MDM_CODE_REF", _codeRef);
		_columnOriginalValues.put("MDM_CODE_SUB_REF", _codeSubRef);
		_columnOriginalValues.put("MDM_CODE_FREEZ_YN", _codeFreezYN);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("MDM_CODE_SYS_ID", "systemId");
		attributeNames.put("MDM_CODE_EFF_FM_DT", "effFromDate");
		attributeNames.put("MDM_CODE_EFF_TO_DT", "effToDate");
		attributeNames.put("MDM_CODE_CR_DT", "creationDate");
		attributeNames.put("MDM_CODE_CR_UID", "crUid");
		attributeNames.put("MDM_CODE_UPD_DT", "updateDate");
		attributeNames.put("MDM_CODE_UPD_UID", "updateUid");
		attributeNames.put("MDM_CODE", "code");
		attributeNames.put("MDM_CODE_SUB", "codeSub");
		attributeNames.put("MDM_CODE_DESC", "codeDesc");
		attributeNames.put("MDM_CODE_DESC_AR", "codeDescAr");
		attributeNames.put("MDM_CODE_VALUE_0", "codeValue0");
		attributeNames.put("MDM_CODE_VALUE_1", "codeValue1");
		attributeNames.put("MDM_CODE_VALUE_2", "codeValue2");
		attributeNames.put("MDM_CODE_REF", "codeRef");
		attributeNames.put("MDM_CODE_SUB_REF", "codeSubRef");
		attributeNames.put("MDM_CODE_FREEZ_YN", "codeFreezYN");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("MDM_CODE_SYS_ID", 1L);

		columnBitmasks.put("MDM_CODE_EFF_FM_DT", 2L);

		columnBitmasks.put("MDM_CODE_EFF_TO_DT", 4L);

		columnBitmasks.put("MDM_CODE_CR_DT", 8L);

		columnBitmasks.put("MDM_CODE_CR_UID", 16L);

		columnBitmasks.put("MDM_CODE_UPD_DT", 32L);

		columnBitmasks.put("MDM_CODE_UPD_UID", 64L);

		columnBitmasks.put("MDM_CODE", 128L);

		columnBitmasks.put("MDM_CODE_SUB", 256L);

		columnBitmasks.put("MDM_CODE_DESC", 512L);

		columnBitmasks.put("MDM_CODE_DESC_AR", 1024L);

		columnBitmasks.put("MDM_CODE_VALUE_0", 2048L);

		columnBitmasks.put("MDM_CODE_VALUE_1", 4096L);

		columnBitmasks.put("MDM_CODE_VALUE_2", 8192L);

		columnBitmasks.put("MDM_CODE_REF", 16384L);

		columnBitmasks.put("MDM_CODE_SUB_REF", 32768L);

		columnBitmasks.put("MDM_CODE_FREEZ_YN", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CodeMaster _escapedModel;

}