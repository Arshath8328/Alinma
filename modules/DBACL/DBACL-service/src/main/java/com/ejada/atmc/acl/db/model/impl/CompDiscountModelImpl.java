/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.CompDiscount;
import com.ejada.atmc.acl.db.model.CompDiscountModel;
import com.ejada.atmc.acl.db.model.CompDiscountSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CompDiscount service. Represents a row in the &quot;COMP_DISCOUNT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CompDiscountModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompDiscountImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CompDiscountImpl
 * @generated
 */
@JSON(strict = true)
public class CompDiscountModelImpl
	extends BaseModelImpl<CompDiscount> implements CompDiscountModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a comp discount model instance should use the <code>CompDiscount</code> interface instead.
	 */
	public static final String TABLE_NAME = "COMP_DISCOUNT";

	public static final Object[][] TABLE_COLUMNS = {
		{"IQAMA_ID", Types.VARCHAR}, {"SCHEME_CODE", Types.VARCHAR},
		{"COMPANY_NAME", Types.VARCHAR}, {"START_DATE", Types.TIMESTAMP},
		{"END_DATE", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("IQAMA_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SCHEME_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("COMPANY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("START_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("END_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table COMP_DISCOUNT (IQAMA_ID VARCHAR(75) not null primary key,SCHEME_CODE VARCHAR(75) null,COMPANY_NAME VARCHAR(75) null,START_DATE DATE null,END_DATE DATE null)";

	public static final String TABLE_SQL_DROP = "drop table COMP_DISCOUNT";

	public static final String ORDER_BY_JPQL =
		" ORDER BY compDiscount.iqamaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY COMP_DISCOUNT.IQAMA_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long IQAMAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static CompDiscount toModel(CompDiscountSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CompDiscount model = new CompDiscountImpl();

		model.setIqamaId(soapModel.getIqamaId());
		model.setSchemeCode(soapModel.getSchemeCode());
		model.setCompanyCode(soapModel.getCompanyCode());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<CompDiscount> toModels(CompDiscountSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CompDiscount> models = new ArrayList<CompDiscount>(
			soapModels.length);

		for (CompDiscountSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CompDiscountModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _iqamaId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setIqamaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _iqamaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CompDiscount.class;
	}

	@Override
	public String getModelClassName() {
		return CompDiscount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CompDiscount, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CompDiscount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompDiscount, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CompDiscount)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CompDiscount, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CompDiscount, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CompDiscount)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CompDiscount, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CompDiscount, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CompDiscount>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CompDiscount.class.getClassLoader(), CompDiscount.class,
			ModelWrapper.class);

		try {
			Constructor<CompDiscount> constructor =
				(Constructor<CompDiscount>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CompDiscount, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CompDiscount, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CompDiscount, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CompDiscount, Object>>();
		Map<String, BiConsumer<CompDiscount, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CompDiscount, ?>>();

		attributeGetterFunctions.put("iqamaId", CompDiscount::getIqamaId);
		attributeSetterBiConsumers.put(
			"iqamaId",
			(BiConsumer<CompDiscount, String>)CompDiscount::setIqamaId);
		attributeGetterFunctions.put("schemeCode", CompDiscount::getSchemeCode);
		attributeSetterBiConsumers.put(
			"schemeCode",
			(BiConsumer<CompDiscount, String>)CompDiscount::setSchemeCode);
		attributeGetterFunctions.put(
			"companyCode", CompDiscount::getCompanyCode);
		attributeSetterBiConsumers.put(
			"companyCode",
			(BiConsumer<CompDiscount, String>)CompDiscount::setCompanyCode);
		attributeGetterFunctions.put("startDate", CompDiscount::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<CompDiscount, Date>)CompDiscount::setStartDate);
		attributeGetterFunctions.put("endDate", CompDiscount::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<CompDiscount, Date>)CompDiscount::setEndDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getIqamaId() {
		if (_iqamaId == null) {
			return "";
		}
		else {
			return _iqamaId;
		}
	}

	@Override
	public void setIqamaId(String iqamaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_iqamaId = iqamaId;
	}

	@JSON
	@Override
	public String getSchemeCode() {
		if (_schemeCode == null) {
			return "";
		}
		else {
			return _schemeCode;
		}
	}

	@Override
	public void setSchemeCode(String schemeCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_schemeCode = schemeCode;
	}

	@JSON
	@Override
	public String getCompanyCode() {
		if (_companyCode == null) {
			return "";
		}
		else {
			return _companyCode;
		}
	}

	@Override
	public void setCompanyCode(String companyCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyCode = companyCode;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public CompDiscount toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CompDiscount>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompDiscountImpl compDiscountImpl = new CompDiscountImpl();

		compDiscountImpl.setIqamaId(getIqamaId());
		compDiscountImpl.setSchemeCode(getSchemeCode());
		compDiscountImpl.setCompanyCode(getCompanyCode());
		compDiscountImpl.setStartDate(getStartDate());
		compDiscountImpl.setEndDate(getEndDate());

		compDiscountImpl.resetOriginalValues();

		return compDiscountImpl;
	}

	@Override
	public int compareTo(CompDiscount compDiscount) {
		String primaryKey = compDiscount.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CompDiscount)) {
			return false;
		}

		CompDiscount compDiscount = (CompDiscount)object;

		String primaryKey = compDiscount.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CompDiscount> toCacheModel() {
		CompDiscountCacheModel compDiscountCacheModel =
			new CompDiscountCacheModel();

		compDiscountCacheModel.iqamaId = getIqamaId();

		String iqamaId = compDiscountCacheModel.iqamaId;

		if ((iqamaId != null) && (iqamaId.length() == 0)) {
			compDiscountCacheModel.iqamaId = null;
		}

		compDiscountCacheModel.schemeCode = getSchemeCode();

		String schemeCode = compDiscountCacheModel.schemeCode;

		if ((schemeCode != null) && (schemeCode.length() == 0)) {
			compDiscountCacheModel.schemeCode = null;
		}

		compDiscountCacheModel.companyCode = getCompanyCode();

		String companyCode = compDiscountCacheModel.companyCode;

		if ((companyCode != null) && (companyCode.length() == 0)) {
			compDiscountCacheModel.companyCode = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			compDiscountCacheModel.startDate = startDate.getTime();
		}
		else {
			compDiscountCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			compDiscountCacheModel.endDate = endDate.getTime();
		}
		else {
			compDiscountCacheModel.endDate = Long.MIN_VALUE;
		}

		return compDiscountCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CompDiscount, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CompDiscount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompDiscount, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CompDiscount)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CompDiscount, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CompDiscount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CompDiscount, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CompDiscount)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CompDiscount>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _iqamaId;
	private String _schemeCode;
	private String _companyCode;
	private Date _startDate;
	private Date _endDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CompDiscount, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CompDiscount)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("IQAMA_ID", _iqamaId);
		_columnOriginalValues.put("SCHEME_CODE", _schemeCode);
		_columnOriginalValues.put("COMPANY_NAME", _companyCode);
		_columnOriginalValues.put("START_DATE", _startDate);
		_columnOriginalValues.put("END_DATE", _endDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("IQAMA_ID", "iqamaId");
		attributeNames.put("SCHEME_CODE", "schemeCode");
		attributeNames.put("COMPANY_NAME", "companyCode");
		attributeNames.put("START_DATE", "startDate");
		attributeNames.put("END_DATE", "endDate");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("IQAMA_ID", 1L);

		columnBitmasks.put("SCHEME_CODE", 2L);

		columnBitmasks.put("COMPANY_NAME", 4L);

		columnBitmasks.put("START_DATE", 8L);

		columnBitmasks.put("END_DATE", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CompDiscount _escapedModel;

}