/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.QuotationSurvey;
import com.ejada.atmc.acl.db.model.QuotationSurveyModel;
import com.ejada.atmc.acl.db.model.QuotationSurveySoap;
import com.ejada.atmc.acl.db.model.QuotationSurveySurveyVideoFileBlobModel;
import com.ejada.atmc.acl.db.service.QuotationSurveyLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuotationSurvey service. Represents a row in the &quot;EJD_QUOTATION_SURVEY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationSurveyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationSurveyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationSurveyImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationSurveyModelImpl
	extends BaseModelImpl<QuotationSurvey> implements QuotationSurveyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotation survey model instance should use the <code>QuotationSurvey</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_QUOTATION_SURVEY";

	public static final Object[][] TABLE_COLUMNS = {
		{"QUOTATION_SURVEY_ID", Types.BIGINT}, {"QUOTATION_ID", Types.VARCHAR},
		{"SURVEY_VIDEO_FILE", Types.BLOB},
		{"SURVEY_VIDEO_FILE_NAME", Types.VARCHAR},
		{"SURVEY_DATE", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("QUOTATION_SURVEY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTATION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SURVEY_VIDEO_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("SURVEY_VIDEO_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SURVEY_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_QUOTATION_SURVEY (QUOTATION_SURVEY_ID LONG not null primary key,QUOTATION_ID VARCHAR(75) null,SURVEY_VIDEO_FILE BLOB,SURVEY_VIDEO_FILE_NAME VARCHAR(75) null,SURVEY_DATE DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table EJD_QUOTATION_SURVEY";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotationSurvey.surveyDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_QUOTATION_SURVEY.SURVEY_DATE DESC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUOTATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SURVEYDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static QuotationSurvey toModel(QuotationSurveySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		QuotationSurvey model = new QuotationSurveyImpl();

		model.setSurveyId(soapModel.getSurveyId());
		model.setQuotationId(soapModel.getQuotationId());
		model.setSurveyVideoFile(soapModel.getSurveyVideoFile());
		model.setSurveyVideoFileName(soapModel.getSurveyVideoFileName());
		model.setSurveyDate(soapModel.getSurveyDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<QuotationSurvey> toModels(
		QuotationSurveySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<QuotationSurvey> models = new ArrayList<QuotationSurvey>(
			soapModels.length);

		for (QuotationSurveySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationSurveyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _surveyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSurveyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _surveyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuotationSurvey.class;
	}

	@Override
	public String getModelClassName() {
		return QuotationSurvey.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuotationSurvey, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuotationSurvey, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationSurvey, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuotationSurvey)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuotationSurvey, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuotationSurvey, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuotationSurvey)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuotationSurvey, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuotationSurvey, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QuotationSurvey>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QuotationSurvey.class.getClassLoader(), QuotationSurvey.class,
			ModelWrapper.class);

		try {
			Constructor<QuotationSurvey> constructor =
				(Constructor<QuotationSurvey>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QuotationSurvey, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QuotationSurvey, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuotationSurvey, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<QuotationSurvey, Object>>();
		Map<String, BiConsumer<QuotationSurvey, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<QuotationSurvey, ?>>();

		attributeGetterFunctions.put("surveyId", QuotationSurvey::getSurveyId);
		attributeSetterBiConsumers.put(
			"surveyId",
			(BiConsumer<QuotationSurvey, Long>)QuotationSurvey::setSurveyId);
		attributeGetterFunctions.put(
			"quotationId", QuotationSurvey::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<QuotationSurvey, String>)
				QuotationSurvey::setQuotationId);
		attributeGetterFunctions.put(
			"surveyVideoFile", QuotationSurvey::getSurveyVideoFile);
		attributeSetterBiConsumers.put(
			"surveyVideoFile",
			(BiConsumer<QuotationSurvey, Blob>)
				QuotationSurvey::setSurveyVideoFile);
		attributeGetterFunctions.put(
			"surveyVideoFileName", QuotationSurvey::getSurveyVideoFileName);
		attributeSetterBiConsumers.put(
			"surveyVideoFileName",
			(BiConsumer<QuotationSurvey, String>)
				QuotationSurvey::setSurveyVideoFileName);
		attributeGetterFunctions.put(
			"surveyDate", QuotationSurvey::getSurveyDate);
		attributeSetterBiConsumers.put(
			"surveyDate",
			(BiConsumer<QuotationSurvey, Date>)QuotationSurvey::setSurveyDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSurveyId() {
		return _surveyId;
	}

	@Override
	public void setSurveyId(long surveyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surveyId = surveyId;
	}

	@JSON
	@Override
	public String getQuotationId() {
		if (_quotationId == null) {
			return "";
		}
		else {
			return _quotationId;
		}
	}

	@Override
	public void setQuotationId(String quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalQuotationId() {
		return getColumnOriginalValue("QUOTATION_ID");
	}

	@JSON
	@Override
	public Blob getSurveyVideoFile() {
		if (_surveyVideoFileBlobModel == null) {
			try {
				_surveyVideoFileBlobModel =
					QuotationSurveyLocalServiceUtil.getSurveyVideoFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_surveyVideoFileBlobModel != null) {
			blob = _surveyVideoFileBlobModel.getSurveyVideoFileBlob();
		}

		return blob;
	}

	@Override
	public void setSurveyVideoFile(Blob surveyVideoFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_surveyVideoFileBlobModel == null) {
			_surveyVideoFileBlobModel =
				new QuotationSurveySurveyVideoFileBlobModel(
					getPrimaryKey(), surveyVideoFile);
		}
		else {
			_surveyVideoFileBlobModel.setSurveyVideoFileBlob(surveyVideoFile);
		}
	}

	@JSON
	@Override
	public String getSurveyVideoFileName() {
		if (_surveyVideoFileName == null) {
			return "";
		}
		else {
			return _surveyVideoFileName;
		}
	}

	@Override
	public void setSurveyVideoFileName(String surveyVideoFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surveyVideoFileName = surveyVideoFileName;
	}

	@JSON
	@Override
	public Date getSurveyDate() {
		return _surveyDate;
	}

	@Override
	public void setSurveyDate(Date surveyDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surveyDate = surveyDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, QuotationSurvey.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuotationSurvey toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuotationSurvey>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationSurveyImpl quotationSurveyImpl = new QuotationSurveyImpl();

		quotationSurveyImpl.setSurveyId(getSurveyId());
		quotationSurveyImpl.setQuotationId(getQuotationId());
		quotationSurveyImpl.setSurveyVideoFileName(getSurveyVideoFileName());
		quotationSurveyImpl.setSurveyDate(getSurveyDate());

		quotationSurveyImpl.resetOriginalValues();

		return quotationSurveyImpl;
	}

	@Override
	public int compareTo(QuotationSurvey quotationSurvey) {
		int value = 0;

		value = DateUtil.compareTo(
			getSurveyDate(), quotationSurvey.getSurveyDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuotationSurvey)) {
			return false;
		}

		QuotationSurvey quotationSurvey = (QuotationSurvey)object;

		long primaryKey = quotationSurvey.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_surveyVideoFileBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotationSurvey> toCacheModel() {
		QuotationSurveyCacheModel quotationSurveyCacheModel =
			new QuotationSurveyCacheModel();

		quotationSurveyCacheModel.surveyId = getSurveyId();

		quotationSurveyCacheModel.quotationId = getQuotationId();

		String quotationId = quotationSurveyCacheModel.quotationId;

		if ((quotationId != null) && (quotationId.length() == 0)) {
			quotationSurveyCacheModel.quotationId = null;
		}

		quotationSurveyCacheModel.surveyVideoFileName =
			getSurveyVideoFileName();

		String surveyVideoFileName =
			quotationSurveyCacheModel.surveyVideoFileName;

		if ((surveyVideoFileName != null) &&
			(surveyVideoFileName.length() == 0)) {

			quotationSurveyCacheModel.surveyVideoFileName = null;
		}

		Date surveyDate = getSurveyDate();

		if (surveyDate != null) {
			quotationSurveyCacheModel.surveyDate = surveyDate.getTime();
		}
		else {
			quotationSurveyCacheModel.surveyDate = Long.MIN_VALUE;
		}

		return quotationSurveyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{surveyId=");
		sb.append(getSurveyId());
		sb.append(", quotationId=");
		sb.append(getQuotationId());
		sb.append(", surveyVideoFileName=");
		sb.append(getSurveyVideoFileName());
		sb.append(", surveyDate=");
		sb.append(getSurveyDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.QuotationSurvey");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>surveyId</column-name><column-value><![CDATA[");
		sb.append(getSurveyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotationId</column-name><column-value><![CDATA[");
		sb.append(getQuotationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surveyVideoFileName</column-name><column-value><![CDATA[");
		sb.append(getSurveyVideoFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surveyDate</column-name><column-value><![CDATA[");
		sb.append(getSurveyDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QuotationSurvey>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _surveyId;
	private String _quotationId;
	private QuotationSurveySurveyVideoFileBlobModel _surveyVideoFileBlobModel;
	private String _surveyVideoFileName;
	private Date _surveyDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuotationSurvey, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuotationSurvey)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("QUOTATION_SURVEY_ID", _surveyId);
		_columnOriginalValues.put("QUOTATION_ID", _quotationId);
		_columnOriginalValues.put(
			"SURVEY_VIDEO_FILE_NAME", _surveyVideoFileName);
		_columnOriginalValues.put("SURVEY_DATE", _surveyDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("QUOTATION_SURVEY_ID", "surveyId");
		attributeNames.put("QUOTATION_ID", "quotationId");
		attributeNames.put("SURVEY_VIDEO_FILE", "surveyVideoFile");
		attributeNames.put("SURVEY_VIDEO_FILE_NAME", "surveyVideoFileName");
		attributeNames.put("SURVEY_DATE", "surveyDate");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("QUOTATION_SURVEY_ID", 1L);

		columnBitmasks.put("QUOTATION_ID", 2L);

		columnBitmasks.put("SURVEY_VIDEO_FILE", 4L);

		columnBitmasks.put("SURVEY_VIDEO_FILE_NAME", 8L);

		columnBitmasks.put("SURVEY_DATE", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuotationSurvey _escapedModel;

}