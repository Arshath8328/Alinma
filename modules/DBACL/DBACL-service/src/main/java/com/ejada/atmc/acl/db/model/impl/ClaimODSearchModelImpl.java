/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.ClaimODSearch;
import com.ejada.atmc.acl.db.model.ClaimODSearchModel;
import com.ejada.atmc.acl.db.model.ClaimODSearchSoap;
import com.ejada.atmc.acl.db.service.persistence.ClaimODSearchPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ClaimODSearch service. Represents a row in the &quot;ODS_CLAIM_OD_SEARCH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ClaimODSearchModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClaimODSearchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClaimODSearchImpl
 * @generated
 */
@JSON(strict = true)
public class ClaimODSearchModelImpl
	extends BaseModelImpl<ClaimODSearch> implements ClaimODSearchModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a claim od search model instance should use the <code>ClaimODSearch</code> interface instead.
	 */
	public static final String TABLE_NAME = "ODS_CLAIM_OD_SEARCH";

	public static final Object[][] TABLE_COLUMNS = {
		{"ODS_POLICY_NO", Types.VARCHAR}, {"ODS_REPORT_NO", Types.VARCHAR},
		{"ODS_VEHICLE_SEQ_CUSTOM", Types.VARCHAR},
		{"ODS_VEHICLE_DEF_TYPE", Types.VARCHAR},
		{"ODS_NATUREOF_LOSS", Types.VARCHAR}, {"ODS_CAUSE_CODE", Types.VARCHAR},
		{"ODS_TYPEOF_CLAIM", Types.VARCHAR},
		{"ODS_CLAIM_LOSS_DT", Types.TIMESTAMP},
		{"ODS_LOSS_REMARKS", Types.VARCHAR},
		{"ODS_FAULT_PERCENT", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ODS_POLICY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_REPORT_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_VEHICLE_SEQ_CUSTOM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_VEHICLE_DEF_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_NATUREOF_LOSS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_CAUSE_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_TYPEOF_CLAIM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_CLAIM_LOSS_DT", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ODS_LOSS_REMARKS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ODS_FAULT_PERCENT", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ODS_CLAIM_OD_SEARCH (ODS_POLICY_NO VARCHAR(75) not null,ODS_REPORT_NO VARCHAR(75) not null,ODS_VEHICLE_SEQ_CUSTOM VARCHAR(75) not null,ODS_VEHICLE_DEF_TYPE VARCHAR(75) null,ODS_NATUREOF_LOSS VARCHAR(75) null,ODS_CAUSE_CODE VARCHAR(75) null,ODS_TYPEOF_CLAIM VARCHAR(75) null,ODS_CLAIM_LOSS_DT DATE null,ODS_LOSS_REMARKS VARCHAR(75) null,ODS_FAULT_PERCENT VARCHAR(75) null,primary key (ODS_POLICY_NO, ODS_REPORT_NO, ODS_VEHICLE_SEQ_CUSTOM))";

	public static final String TABLE_SQL_DROP =
		"drop table ODS_CLAIM_OD_SEARCH";

	public static final String ORDER_BY_JPQL =
		" ORDER BY claimODSearch.id.policyNo ASC, claimODSearch.id.reportNo ASC, claimODSearch.id.vehicleSEQCustom ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ODS_CLAIM_OD_SEARCH.ODS_POLICY_NO ASC, ODS_CLAIM_OD_SEARCH.ODS_REPORT_NO ASC, ODS_CLAIM_OD_SEARCH.ODS_VEHICLE_SEQ_CUSTOM ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POLICYNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REPORTNO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long VEHICLESEQCUSTOM_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ClaimODSearch toModel(ClaimODSearchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ClaimODSearch model = new ClaimODSearchImpl();

		model.setPolicyNo(soapModel.getPolicyNo());
		model.setReportNo(soapModel.getReportNo());
		model.setVehicleSEQCustom(soapModel.getVehicleSEQCustom());
		model.setVehicleDevType(soapModel.getVehicleDevType());
		model.setNatureofLoss(soapModel.getNatureofLoss());
		model.setCauseCode(soapModel.getCauseCode());
		model.setTypeOfClaim(soapModel.getTypeOfClaim());
		model.setClaimLossDate(soapModel.getClaimLossDate());
		model.setLossRemarks(soapModel.getLossRemarks());
		model.setFaultPercent(soapModel.getFaultPercent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ClaimODSearch> toModels(ClaimODSearchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ClaimODSearch> models = new ArrayList<ClaimODSearch>(
			soapModels.length);

		for (ClaimODSearchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ClaimODSearchModelImpl() {
	}

	@Override
	public ClaimODSearchPK getPrimaryKey() {
		return new ClaimODSearchPK(_policyNo, _reportNo, _vehicleSEQCustom);
	}

	@Override
	public void setPrimaryKey(ClaimODSearchPK primaryKey) {
		setPolicyNo(primaryKey.policyNo);
		setReportNo(primaryKey.reportNo);
		setVehicleSEQCustom(primaryKey.vehicleSEQCustom);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ClaimODSearchPK(_policyNo, _reportNo, _vehicleSEQCustom);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ClaimODSearchPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ClaimODSearch.class;
	}

	@Override
	public String getModelClassName() {
		return ClaimODSearch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ClaimODSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ClaimODSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimODSearch, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ClaimODSearch)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ClaimODSearch, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ClaimODSearch, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ClaimODSearch)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ClaimODSearch, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ClaimODSearch, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ClaimODSearch>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ClaimODSearch.class.getClassLoader(), ClaimODSearch.class,
			ModelWrapper.class);

		try {
			Constructor<ClaimODSearch> constructor =
				(Constructor<ClaimODSearch>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ClaimODSearch, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ClaimODSearch, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ClaimODSearch, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ClaimODSearch, Object>>();
		Map<String, BiConsumer<ClaimODSearch, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ClaimODSearch, ?>>();

		attributeGetterFunctions.put("policyNo", ClaimODSearch::getPolicyNo);
		attributeSetterBiConsumers.put(
			"policyNo",
			(BiConsumer<ClaimODSearch, String>)ClaimODSearch::setPolicyNo);
		attributeGetterFunctions.put("reportNo", ClaimODSearch::getReportNo);
		attributeSetterBiConsumers.put(
			"reportNo",
			(BiConsumer<ClaimODSearch, String>)ClaimODSearch::setReportNo);
		attributeGetterFunctions.put(
			"vehicleSEQCustom", ClaimODSearch::getVehicleSEQCustom);
		attributeSetterBiConsumers.put(
			"vehicleSEQCustom",
			(BiConsumer<ClaimODSearch, String>)
				ClaimODSearch::setVehicleSEQCustom);
		attributeGetterFunctions.put(
			"vehicleDevType", ClaimODSearch::getVehicleDevType);
		attributeSetterBiConsumers.put(
			"vehicleDevType",
			(BiConsumer<ClaimODSearch, String>)
				ClaimODSearch::setVehicleDevType);
		attributeGetterFunctions.put(
			"natureofLoss", ClaimODSearch::getNatureofLoss);
		attributeSetterBiConsumers.put(
			"natureofLoss",
			(BiConsumer<ClaimODSearch, String>)ClaimODSearch::setNatureofLoss);
		attributeGetterFunctions.put("causeCode", ClaimODSearch::getCauseCode);
		attributeSetterBiConsumers.put(
			"causeCode",
			(BiConsumer<ClaimODSearch, String>)ClaimODSearch::setCauseCode);
		attributeGetterFunctions.put(
			"typeOfClaim", ClaimODSearch::getTypeOfClaim);
		attributeSetterBiConsumers.put(
			"typeOfClaim",
			(BiConsumer<ClaimODSearch, String>)ClaimODSearch::setTypeOfClaim);
		attributeGetterFunctions.put(
			"claimLossDate", ClaimODSearch::getClaimLossDate);
		attributeSetterBiConsumers.put(
			"claimLossDate",
			(BiConsumer<ClaimODSearch, Date>)ClaimODSearch::setClaimLossDate);
		attributeGetterFunctions.put(
			"lossRemarks", ClaimODSearch::getLossRemarks);
		attributeSetterBiConsumers.put(
			"lossRemarks",
			(BiConsumer<ClaimODSearch, String>)ClaimODSearch::setLossRemarks);
		attributeGetterFunctions.put(
			"faultPercent", ClaimODSearch::getFaultPercent);
		attributeSetterBiConsumers.put(
			"faultPercent",
			(BiConsumer<ClaimODSearch, String>)ClaimODSearch::setFaultPercent);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getPolicyNo() {
		if (_policyNo == null) {
			return "";
		}
		else {
			return _policyNo;
		}
	}

	@Override
	public void setPolicyNo(String policyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNo = policyNo;
	}

	@JSON
	@Override
	public String getReportNo() {
		if (_reportNo == null) {
			return "";
		}
		else {
			return _reportNo;
		}
	}

	@Override
	public void setReportNo(String reportNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportNo = reportNo;
	}

	@JSON
	@Override
	public String getVehicleSEQCustom() {
		if (_vehicleSEQCustom == null) {
			return "";
		}
		else {
			return _vehicleSEQCustom;
		}
	}

	@Override
	public void setVehicleSEQCustom(String vehicleSEQCustom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleSEQCustom = vehicleSEQCustom;
	}

	@JSON
	@Override
	public String getVehicleDevType() {
		if (_vehicleDevType == null) {
			return "";
		}
		else {
			return _vehicleDevType;
		}
	}

	@Override
	public void setVehicleDevType(String vehicleDevType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleDevType = vehicleDevType;
	}

	@JSON
	@Override
	public String getNatureofLoss() {
		if (_natureofLoss == null) {
			return "";
		}
		else {
			return _natureofLoss;
		}
	}

	@Override
	public void setNatureofLoss(String natureofLoss) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_natureofLoss = natureofLoss;
	}

	@JSON
	@Override
	public String getCauseCode() {
		if (_causeCode == null) {
			return "";
		}
		else {
			return _causeCode;
		}
	}

	@Override
	public void setCauseCode(String causeCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_causeCode = causeCode;
	}

	@JSON
	@Override
	public String getTypeOfClaim() {
		if (_typeOfClaim == null) {
			return "";
		}
		else {
			return _typeOfClaim;
		}
	}

	@Override
	public void setTypeOfClaim(String typeOfClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeOfClaim = typeOfClaim;
	}

	@JSON
	@Override
	public Date getClaimLossDate() {
		return _claimLossDate;
	}

	@Override
	public void setClaimLossDate(Date claimLossDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimLossDate = claimLossDate;
	}

	@JSON
	@Override
	public String getLossRemarks() {
		if (_lossRemarks == null) {
			return "";
		}
		else {
			return _lossRemarks;
		}
	}

	@Override
	public void setLossRemarks(String lossRemarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lossRemarks = lossRemarks;
	}

	@JSON
	@Override
	public String getFaultPercent() {
		if (_faultPercent == null) {
			return "";
		}
		else {
			return _faultPercent;
		}
	}

	@Override
	public void setFaultPercent(String faultPercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_faultPercent = faultPercent;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ClaimODSearch toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ClaimODSearch>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClaimODSearchImpl claimODSearchImpl = new ClaimODSearchImpl();

		claimODSearchImpl.setPolicyNo(getPolicyNo());
		claimODSearchImpl.setReportNo(getReportNo());
		claimODSearchImpl.setVehicleSEQCustom(getVehicleSEQCustom());
		claimODSearchImpl.setVehicleDevType(getVehicleDevType());
		claimODSearchImpl.setNatureofLoss(getNatureofLoss());
		claimODSearchImpl.setCauseCode(getCauseCode());
		claimODSearchImpl.setTypeOfClaim(getTypeOfClaim());
		claimODSearchImpl.setClaimLossDate(getClaimLossDate());
		claimODSearchImpl.setLossRemarks(getLossRemarks());
		claimODSearchImpl.setFaultPercent(getFaultPercent());

		claimODSearchImpl.resetOriginalValues();

		return claimODSearchImpl;
	}

	@Override
	public int compareTo(ClaimODSearch claimODSearch) {
		ClaimODSearchPK primaryKey = claimODSearch.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ClaimODSearch)) {
			return false;
		}

		ClaimODSearch claimODSearch = (ClaimODSearch)object;

		ClaimODSearchPK primaryKey = claimODSearch.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ClaimODSearch> toCacheModel() {
		ClaimODSearchCacheModel claimODSearchCacheModel =
			new ClaimODSearchCacheModel();

		claimODSearchCacheModel.claimODSearchPK = getPrimaryKey();

		claimODSearchCacheModel.policyNo = getPolicyNo();

		String policyNo = claimODSearchCacheModel.policyNo;

		if ((policyNo != null) && (policyNo.length() == 0)) {
			claimODSearchCacheModel.policyNo = null;
		}

		claimODSearchCacheModel.reportNo = getReportNo();

		String reportNo = claimODSearchCacheModel.reportNo;

		if ((reportNo != null) && (reportNo.length() == 0)) {
			claimODSearchCacheModel.reportNo = null;
		}

		claimODSearchCacheModel.vehicleSEQCustom = getVehicleSEQCustom();

		String vehicleSEQCustom = claimODSearchCacheModel.vehicleSEQCustom;

		if ((vehicleSEQCustom != null) && (vehicleSEQCustom.length() == 0)) {
			claimODSearchCacheModel.vehicleSEQCustom = null;
		}

		claimODSearchCacheModel.vehicleDevType = getVehicleDevType();

		String vehicleDevType = claimODSearchCacheModel.vehicleDevType;

		if ((vehicleDevType != null) && (vehicleDevType.length() == 0)) {
			claimODSearchCacheModel.vehicleDevType = null;
		}

		claimODSearchCacheModel.natureofLoss = getNatureofLoss();

		String natureofLoss = claimODSearchCacheModel.natureofLoss;

		if ((natureofLoss != null) && (natureofLoss.length() == 0)) {
			claimODSearchCacheModel.natureofLoss = null;
		}

		claimODSearchCacheModel.causeCode = getCauseCode();

		String causeCode = claimODSearchCacheModel.causeCode;

		if ((causeCode != null) && (causeCode.length() == 0)) {
			claimODSearchCacheModel.causeCode = null;
		}

		claimODSearchCacheModel.typeOfClaim = getTypeOfClaim();

		String typeOfClaim = claimODSearchCacheModel.typeOfClaim;

		if ((typeOfClaim != null) && (typeOfClaim.length() == 0)) {
			claimODSearchCacheModel.typeOfClaim = null;
		}

		Date claimLossDate = getClaimLossDate();

		if (claimLossDate != null) {
			claimODSearchCacheModel.claimLossDate = claimLossDate.getTime();
		}
		else {
			claimODSearchCacheModel.claimLossDate = Long.MIN_VALUE;
		}

		claimODSearchCacheModel.lossRemarks = getLossRemarks();

		String lossRemarks = claimODSearchCacheModel.lossRemarks;

		if ((lossRemarks != null) && (lossRemarks.length() == 0)) {
			claimODSearchCacheModel.lossRemarks = null;
		}

		claimODSearchCacheModel.faultPercent = getFaultPercent();

		String faultPercent = claimODSearchCacheModel.faultPercent;

		if ((faultPercent != null) && (faultPercent.length() == 0)) {
			claimODSearchCacheModel.faultPercent = null;
		}

		return claimODSearchCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ClaimODSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ClaimODSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimODSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ClaimODSearch)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ClaimODSearch, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ClaimODSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ClaimODSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ClaimODSearch)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ClaimODSearch>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _policyNo;
	private String _reportNo;
	private String _vehicleSEQCustom;
	private String _vehicleDevType;
	private String _natureofLoss;
	private String _causeCode;
	private String _typeOfClaim;
	private Date _claimLossDate;
	private String _lossRemarks;
	private String _faultPercent;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ClaimODSearch, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ClaimODSearch)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ODS_POLICY_NO", _policyNo);
		_columnOriginalValues.put("ODS_REPORT_NO", _reportNo);
		_columnOriginalValues.put("ODS_VEHICLE_SEQ_CUSTOM", _vehicleSEQCustom);
		_columnOriginalValues.put("ODS_VEHICLE_DEF_TYPE", _vehicleDevType);
		_columnOriginalValues.put("ODS_NATUREOF_LOSS", _natureofLoss);
		_columnOriginalValues.put("ODS_CAUSE_CODE", _causeCode);
		_columnOriginalValues.put("ODS_TYPEOF_CLAIM", _typeOfClaim);
		_columnOriginalValues.put("ODS_CLAIM_LOSS_DT", _claimLossDate);
		_columnOriginalValues.put("ODS_LOSS_REMARKS", _lossRemarks);
		_columnOriginalValues.put("ODS_FAULT_PERCENT", _faultPercent);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ODS_POLICY_NO", "policyNo");
		attributeNames.put("ODS_REPORT_NO", "reportNo");
		attributeNames.put("ODS_VEHICLE_SEQ_CUSTOM", "vehicleSEQCustom");
		attributeNames.put("ODS_VEHICLE_DEF_TYPE", "vehicleDevType");
		attributeNames.put("ODS_NATUREOF_LOSS", "natureofLoss");
		attributeNames.put("ODS_CAUSE_CODE", "causeCode");
		attributeNames.put("ODS_TYPEOF_CLAIM", "typeOfClaim");
		attributeNames.put("ODS_CLAIM_LOSS_DT", "claimLossDate");
		attributeNames.put("ODS_LOSS_REMARKS", "lossRemarks");
		attributeNames.put("ODS_FAULT_PERCENT", "faultPercent");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ODS_POLICY_NO", 1L);

		columnBitmasks.put("ODS_REPORT_NO", 2L);

		columnBitmasks.put("ODS_VEHICLE_SEQ_CUSTOM", 4L);

		columnBitmasks.put("ODS_VEHICLE_DEF_TYPE", 8L);

		columnBitmasks.put("ODS_NATUREOF_LOSS", 16L);

		columnBitmasks.put("ODS_CAUSE_CODE", 32L);

		columnBitmasks.put("ODS_TYPEOF_CLAIM", 64L);

		columnBitmasks.put("ODS_CLAIM_LOSS_DT", 128L);

		columnBitmasks.put("ODS_LOSS_REMARKS", 256L);

		columnBitmasks.put("ODS_FAULT_PERCENT", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ClaimODSearch _escapedModel;

}