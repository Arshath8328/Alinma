/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.QuotationsNajmDetails;
import com.ejada.atmc.acl.db.model.QuotationsNajmDetailsModel;
import com.ejada.atmc.acl.db.model.QuotationsNajmDetailsSoap;
import com.ejada.atmc.acl.db.service.persistence.QuotationsNajmDetailsPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuotationsNajmDetails service. Represents a row in the &quot;EJD_QUOTATIONS_NAJM_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationsNajmDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationsNajmDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationsNajmDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationsNajmDetailsModelImpl
	extends BaseModelImpl<QuotationsNajmDetails>
	implements QuotationsNajmDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotations najm details model instance should use the <code>QuotationsNajmDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_QUOTATIONS_NAJM_DETAILS";

	public static final Object[][] TABLE_COLUMNS = {
		{"CASE_NUMBER", Types.VARCHAR}, {"QUOTATION_ID", Types.BIGINT},
		{"ACCIDENT_DATE", Types.VARCHAR}, {"LIABILITY", Types.VARCHAR},
		{"DRIVER_AGE", Types.VARCHAR}, {"CAR_MODEL", Types.VARCHAR},
		{"CAR_TYPE", Types.VARCHAR}, {"DRIVER_ID", Types.VARCHAR},
		{"SEQUENCE_NUMBER", Types.VARCHAR}, {"OWNER_ID", Types.VARCHAR},
		{"ESTIMATED_AMOUNT", Types.VARCHAR}, {"DAMAGE_PARTS", Types.VARCHAR},
		{"CAUSE_OF_ACCIDENT", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("CASE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("QUOTATION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ACCIDENT_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LIABILITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_AGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CAR_MODEL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CAR_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SEQUENCE_NUMBER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OWNER_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ESTIMATED_AMOUNT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DAMAGE_PARTS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CAUSE_OF_ACCIDENT", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_QUOTATIONS_NAJM_DETAILS (CASE_NUMBER VARCHAR(75) not null,QUOTATION_ID LONG not null,ACCIDENT_DATE VARCHAR(75) null,LIABILITY VARCHAR(75) null,DRIVER_AGE VARCHAR(75) null,CAR_MODEL VARCHAR(75) null,CAR_TYPE VARCHAR(75) null,DRIVER_ID VARCHAR(75) null,SEQUENCE_NUMBER VARCHAR(75) null,OWNER_ID VARCHAR(75) null,ESTIMATED_AMOUNT VARCHAR(75) null,DAMAGE_PARTS VARCHAR(75) null,CAUSE_OF_ACCIDENT VARCHAR(75) null,primary key (CASE_NUMBER, QUOTATION_ID))";

	public static final String TABLE_SQL_DROP =
		"drop table EJD_QUOTATIONS_NAJM_DETAILS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotationsNajmDetails.id.caseNumber ASC, quotationsNajmDetails.id.quotationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_QUOTATIONS_NAJM_DETAILS.CASE_NUMBER ASC, EJD_QUOTATIONS_NAJM_DETAILS.QUOTATION_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CASENUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUOTATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static QuotationsNajmDetails toModel(
		QuotationsNajmDetailsSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		QuotationsNajmDetails model = new QuotationsNajmDetailsImpl();

		model.setCaseNumber(soapModel.getCaseNumber());
		model.setQuotationId(soapModel.getQuotationId());
		model.setAccidentDate(soapModel.getAccidentDate());
		model.setLiability(soapModel.getLiability());
		model.setDriverAge(soapModel.getDriverAge());
		model.setCarModel(soapModel.getCarModel());
		model.setCarType(soapModel.getCarType());
		model.setDriverID(soapModel.getDriverID());
		model.setSequenceNumber(soapModel.getSequenceNumber());
		model.setOwnerID(soapModel.getOwnerID());
		model.setEstimatedAmount(soapModel.getEstimatedAmount());
		model.setDamageParts(soapModel.getDamageParts());
		model.setCauseOfAccident(soapModel.getCauseOfAccident());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<QuotationsNajmDetails> toModels(
		QuotationsNajmDetailsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<QuotationsNajmDetails> models =
			new ArrayList<QuotationsNajmDetails>(soapModels.length);

		for (QuotationsNajmDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationsNajmDetailsModelImpl() {
	}

	@Override
	public QuotationsNajmDetailsPK getPrimaryKey() {
		return new QuotationsNajmDetailsPK(_caseNumber, _quotationId);
	}

	@Override
	public void setPrimaryKey(QuotationsNajmDetailsPK primaryKey) {
		setCaseNumber(primaryKey.caseNumber);
		setQuotationId(primaryKey.quotationId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new QuotationsNajmDetailsPK(_caseNumber, _quotationId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((QuotationsNajmDetailsPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return QuotationsNajmDetails.class;
	}

	@Override
	public String getModelClassName() {
		return QuotationsNajmDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuotationsNajmDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuotationsNajmDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationsNajmDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuotationsNajmDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuotationsNajmDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuotationsNajmDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuotationsNajmDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuotationsNajmDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuotationsNajmDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QuotationsNajmDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QuotationsNajmDetails.class.getClassLoader(),
			QuotationsNajmDetails.class, ModelWrapper.class);

		try {
			Constructor<QuotationsNajmDetails> constructor =
				(Constructor<QuotationsNajmDetails>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QuotationsNajmDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QuotationsNajmDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuotationsNajmDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<QuotationsNajmDetails, Object>>();
		Map<String, BiConsumer<QuotationsNajmDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<QuotationsNajmDetails, ?>>();

		attributeGetterFunctions.put(
			"caseNumber", QuotationsNajmDetails::getCaseNumber);
		attributeSetterBiConsumers.put(
			"caseNumber",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setCaseNumber);
		attributeGetterFunctions.put(
			"quotationId", QuotationsNajmDetails::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<QuotationsNajmDetails, Long>)
				QuotationsNajmDetails::setQuotationId);
		attributeGetterFunctions.put(
			"accidentDate", QuotationsNajmDetails::getAccidentDate);
		attributeSetterBiConsumers.put(
			"accidentDate",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setAccidentDate);
		attributeGetterFunctions.put(
			"liability", QuotationsNajmDetails::getLiability);
		attributeSetterBiConsumers.put(
			"liability",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setLiability);
		attributeGetterFunctions.put(
			"driverAge", QuotationsNajmDetails::getDriverAge);
		attributeSetterBiConsumers.put(
			"driverAge",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setDriverAge);
		attributeGetterFunctions.put(
			"carModel", QuotationsNajmDetails::getCarModel);
		attributeSetterBiConsumers.put(
			"carModel",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setCarModel);
		attributeGetterFunctions.put(
			"carType", QuotationsNajmDetails::getCarType);
		attributeSetterBiConsumers.put(
			"carType",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setCarType);
		attributeGetterFunctions.put(
			"driverID", QuotationsNajmDetails::getDriverID);
		attributeSetterBiConsumers.put(
			"driverID",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setDriverID);
		attributeGetterFunctions.put(
			"sequenceNumber", QuotationsNajmDetails::getSequenceNumber);
		attributeSetterBiConsumers.put(
			"sequenceNumber",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setSequenceNumber);
		attributeGetterFunctions.put(
			"ownerID", QuotationsNajmDetails::getOwnerID);
		attributeSetterBiConsumers.put(
			"ownerID",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setOwnerID);
		attributeGetterFunctions.put(
			"estimatedAmount", QuotationsNajmDetails::getEstimatedAmount);
		attributeSetterBiConsumers.put(
			"estimatedAmount",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setEstimatedAmount);
		attributeGetterFunctions.put(
			"damageParts", QuotationsNajmDetails::getDamageParts);
		attributeSetterBiConsumers.put(
			"damageParts",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setDamageParts);
		attributeGetterFunctions.put(
			"causeOfAccident", QuotationsNajmDetails::getCauseOfAccident);
		attributeSetterBiConsumers.put(
			"causeOfAccident",
			(BiConsumer<QuotationsNajmDetails, String>)
				QuotationsNajmDetails::setCauseOfAccident);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getCaseNumber() {
		if (_caseNumber == null) {
			return "";
		}
		else {
			return _caseNumber;
		}
	}

	@Override
	public void setCaseNumber(String caseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseNumber = caseNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCaseNumber() {
		return getColumnOriginalValue("CASE_NUMBER");
	}

	@JSON
	@Override
	public long getQuotationId() {
		return _quotationId;
	}

	@Override
	public void setQuotationId(long quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuotationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("QUOTATION_ID"));
	}

	@JSON
	@Override
	public String getAccidentDate() {
		if (_accidentDate == null) {
			return "";
		}
		else {
			return _accidentDate;
		}
	}

	@Override
	public void setAccidentDate(String accidentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accidentDate = accidentDate;
	}

	@JSON
	@Override
	public String getLiability() {
		if (_liability == null) {
			return "";
		}
		else {
			return _liability;
		}
	}

	@Override
	public void setLiability(String liability) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_liability = liability;
	}

	@JSON
	@Override
	public String getDriverAge() {
		if (_driverAge == null) {
			return "";
		}
		else {
			return _driverAge;
		}
	}

	@Override
	public void setDriverAge(String driverAge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverAge = driverAge;
	}

	@JSON
	@Override
	public String getCarModel() {
		if (_carModel == null) {
			return "";
		}
		else {
			return _carModel;
		}
	}

	@Override
	public void setCarModel(String carModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carModel = carModel;
	}

	@JSON
	@Override
	public String getCarType() {
		if (_carType == null) {
			return "";
		}
		else {
			return _carType;
		}
	}

	@Override
	public void setCarType(String carType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carType = carType;
	}

	@JSON
	@Override
	public String getDriverID() {
		if (_driverID == null) {
			return "";
		}
		else {
			return _driverID;
		}
	}

	@Override
	public void setDriverID(String driverID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverID = driverID;
	}

	@JSON
	@Override
	public String getSequenceNumber() {
		if (_sequenceNumber == null) {
			return "";
		}
		else {
			return _sequenceNumber;
		}
	}

	@Override
	public void setSequenceNumber(String sequenceNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sequenceNumber = sequenceNumber;
	}

	@JSON
	@Override
	public String getOwnerID() {
		if (_ownerID == null) {
			return "";
		}
		else {
			return _ownerID;
		}
	}

	@Override
	public void setOwnerID(String ownerID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerID = ownerID;
	}

	@JSON
	@Override
	public String getEstimatedAmount() {
		if (_estimatedAmount == null) {
			return "";
		}
		else {
			return _estimatedAmount;
		}
	}

	@Override
	public void setEstimatedAmount(String estimatedAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estimatedAmount = estimatedAmount;
	}

	@JSON
	@Override
	public String getDamageParts() {
		if (_damageParts == null) {
			return "";
		}
		else {
			return _damageParts;
		}
	}

	@Override
	public void setDamageParts(String damageParts) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_damageParts = damageParts;
	}

	@JSON
	@Override
	public String getCauseOfAccident() {
		if (_causeOfAccident == null) {
			return "";
		}
		else {
			return _causeOfAccident;
		}
	}

	@Override
	public void setCauseOfAccident(String causeOfAccident) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_causeOfAccident = causeOfAccident;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public QuotationsNajmDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuotationsNajmDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationsNajmDetailsImpl quotationsNajmDetailsImpl =
			new QuotationsNajmDetailsImpl();

		quotationsNajmDetailsImpl.setCaseNumber(getCaseNumber());
		quotationsNajmDetailsImpl.setQuotationId(getQuotationId());
		quotationsNajmDetailsImpl.setAccidentDate(getAccidentDate());
		quotationsNajmDetailsImpl.setLiability(getLiability());
		quotationsNajmDetailsImpl.setDriverAge(getDriverAge());
		quotationsNajmDetailsImpl.setCarModel(getCarModel());
		quotationsNajmDetailsImpl.setCarType(getCarType());
		quotationsNajmDetailsImpl.setDriverID(getDriverID());
		quotationsNajmDetailsImpl.setSequenceNumber(getSequenceNumber());
		quotationsNajmDetailsImpl.setOwnerID(getOwnerID());
		quotationsNajmDetailsImpl.setEstimatedAmount(getEstimatedAmount());
		quotationsNajmDetailsImpl.setDamageParts(getDamageParts());
		quotationsNajmDetailsImpl.setCauseOfAccident(getCauseOfAccident());

		quotationsNajmDetailsImpl.resetOriginalValues();

		return quotationsNajmDetailsImpl;
	}

	@Override
	public int compareTo(QuotationsNajmDetails quotationsNajmDetails) {
		QuotationsNajmDetailsPK primaryKey =
			quotationsNajmDetails.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuotationsNajmDetails)) {
			return false;
		}

		QuotationsNajmDetails quotationsNajmDetails =
			(QuotationsNajmDetails)object;

		QuotationsNajmDetailsPK primaryKey =
			quotationsNajmDetails.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotationsNajmDetails> toCacheModel() {
		QuotationsNajmDetailsCacheModel quotationsNajmDetailsCacheModel =
			new QuotationsNajmDetailsCacheModel();

		quotationsNajmDetailsCacheModel.quotationsNajmDetailsPK =
			getPrimaryKey();

		quotationsNajmDetailsCacheModel.caseNumber = getCaseNumber();

		String caseNumber = quotationsNajmDetailsCacheModel.caseNumber;

		if ((caseNumber != null) && (caseNumber.length() == 0)) {
			quotationsNajmDetailsCacheModel.caseNumber = null;
		}

		quotationsNajmDetailsCacheModel.quotationId = getQuotationId();

		quotationsNajmDetailsCacheModel.accidentDate = getAccidentDate();

		String accidentDate = quotationsNajmDetailsCacheModel.accidentDate;

		if ((accidentDate != null) && (accidentDate.length() == 0)) {
			quotationsNajmDetailsCacheModel.accidentDate = null;
		}

		quotationsNajmDetailsCacheModel.liability = getLiability();

		String liability = quotationsNajmDetailsCacheModel.liability;

		if ((liability != null) && (liability.length() == 0)) {
			quotationsNajmDetailsCacheModel.liability = null;
		}

		quotationsNajmDetailsCacheModel.driverAge = getDriverAge();

		String driverAge = quotationsNajmDetailsCacheModel.driverAge;

		if ((driverAge != null) && (driverAge.length() == 0)) {
			quotationsNajmDetailsCacheModel.driverAge = null;
		}

		quotationsNajmDetailsCacheModel.carModel = getCarModel();

		String carModel = quotationsNajmDetailsCacheModel.carModel;

		if ((carModel != null) && (carModel.length() == 0)) {
			quotationsNajmDetailsCacheModel.carModel = null;
		}

		quotationsNajmDetailsCacheModel.carType = getCarType();

		String carType = quotationsNajmDetailsCacheModel.carType;

		if ((carType != null) && (carType.length() == 0)) {
			quotationsNajmDetailsCacheModel.carType = null;
		}

		quotationsNajmDetailsCacheModel.driverID = getDriverID();

		String driverID = quotationsNajmDetailsCacheModel.driverID;

		if ((driverID != null) && (driverID.length() == 0)) {
			quotationsNajmDetailsCacheModel.driverID = null;
		}

		quotationsNajmDetailsCacheModel.sequenceNumber = getSequenceNumber();

		String sequenceNumber = quotationsNajmDetailsCacheModel.sequenceNumber;

		if ((sequenceNumber != null) && (sequenceNumber.length() == 0)) {
			quotationsNajmDetailsCacheModel.sequenceNumber = null;
		}

		quotationsNajmDetailsCacheModel.ownerID = getOwnerID();

		String ownerID = quotationsNajmDetailsCacheModel.ownerID;

		if ((ownerID != null) && (ownerID.length() == 0)) {
			quotationsNajmDetailsCacheModel.ownerID = null;
		}

		quotationsNajmDetailsCacheModel.estimatedAmount = getEstimatedAmount();

		String estimatedAmount =
			quotationsNajmDetailsCacheModel.estimatedAmount;

		if ((estimatedAmount != null) && (estimatedAmount.length() == 0)) {
			quotationsNajmDetailsCacheModel.estimatedAmount = null;
		}

		quotationsNajmDetailsCacheModel.damageParts = getDamageParts();

		String damageParts = quotationsNajmDetailsCacheModel.damageParts;

		if ((damageParts != null) && (damageParts.length() == 0)) {
			quotationsNajmDetailsCacheModel.damageParts = null;
		}

		quotationsNajmDetailsCacheModel.causeOfAccident = getCauseOfAccident();

		String causeOfAccident =
			quotationsNajmDetailsCacheModel.causeOfAccident;

		if ((causeOfAccident != null) && (causeOfAccident.length() == 0)) {
			quotationsNajmDetailsCacheModel.causeOfAccident = null;
		}

		return quotationsNajmDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuotationsNajmDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuotationsNajmDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationsNajmDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((QuotationsNajmDetails)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<QuotationsNajmDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<QuotationsNajmDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationsNajmDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((QuotationsNajmDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QuotationsNajmDetails>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _caseNumber;
	private long _quotationId;
	private String _accidentDate;
	private String _liability;
	private String _driverAge;
	private String _carModel;
	private String _carType;
	private String _driverID;
	private String _sequenceNumber;
	private String _ownerID;
	private String _estimatedAmount;
	private String _damageParts;
	private String _causeOfAccident;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuotationsNajmDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuotationsNajmDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("CASE_NUMBER", _caseNumber);
		_columnOriginalValues.put("QUOTATION_ID", _quotationId);
		_columnOriginalValues.put("ACCIDENT_DATE", _accidentDate);
		_columnOriginalValues.put("LIABILITY", _liability);
		_columnOriginalValues.put("DRIVER_AGE", _driverAge);
		_columnOriginalValues.put("CAR_MODEL", _carModel);
		_columnOriginalValues.put("CAR_TYPE", _carType);
		_columnOriginalValues.put("DRIVER_ID", _driverID);
		_columnOriginalValues.put("SEQUENCE_NUMBER", _sequenceNumber);
		_columnOriginalValues.put("OWNER_ID", _ownerID);
		_columnOriginalValues.put("ESTIMATED_AMOUNT", _estimatedAmount);
		_columnOriginalValues.put("DAMAGE_PARTS", _damageParts);
		_columnOriginalValues.put("CAUSE_OF_ACCIDENT", _causeOfAccident);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("CASE_NUMBER", "caseNumber");
		attributeNames.put("QUOTATION_ID", "quotationId");
		attributeNames.put("ACCIDENT_DATE", "accidentDate");
		attributeNames.put("LIABILITY", "liability");
		attributeNames.put("DRIVER_AGE", "driverAge");
		attributeNames.put("CAR_MODEL", "carModel");
		attributeNames.put("CAR_TYPE", "carType");
		attributeNames.put("DRIVER_ID", "driverID");
		attributeNames.put("SEQUENCE_NUMBER", "sequenceNumber");
		attributeNames.put("OWNER_ID", "ownerID");
		attributeNames.put("ESTIMATED_AMOUNT", "estimatedAmount");
		attributeNames.put("DAMAGE_PARTS", "damageParts");
		attributeNames.put("CAUSE_OF_ACCIDENT", "causeOfAccident");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("CASE_NUMBER", 1L);

		columnBitmasks.put("QUOTATION_ID", 2L);

		columnBitmasks.put("ACCIDENT_DATE", 4L);

		columnBitmasks.put("LIABILITY", 8L);

		columnBitmasks.put("DRIVER_AGE", 16L);

		columnBitmasks.put("CAR_MODEL", 32L);

		columnBitmasks.put("CAR_TYPE", 64L);

		columnBitmasks.put("DRIVER_ID", 128L);

		columnBitmasks.put("SEQUENCE_NUMBER", 256L);

		columnBitmasks.put("OWNER_ID", 512L);

		columnBitmasks.put("ESTIMATED_AMOUNT", 1024L);

		columnBitmasks.put("DAMAGE_PARTS", 2048L);

		columnBitmasks.put("CAUSE_OF_ACCIDENT", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuotationsNajmDetails _escapedModel;

}