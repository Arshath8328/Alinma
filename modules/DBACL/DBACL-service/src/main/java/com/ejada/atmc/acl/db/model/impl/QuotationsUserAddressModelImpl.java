/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.QuotationsUserAddress;
import com.ejada.atmc.acl.db.model.QuotationsUserAddressModel;
import com.ejada.atmc.acl.db.model.QuotationsUserAddressSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the QuotationsUserAddress service. Represents a row in the &quot;EJD_QUOTATIONS_USER_ADDRESS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationsUserAddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationsUserAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationsUserAddressImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationsUserAddressModelImpl
	extends BaseModelImpl<QuotationsUserAddress>
	implements QuotationsUserAddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotations user address model instance should use the <code>QuotationsUserAddress</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_QUOTATIONS_USER_ADDRESS";

	public static final Object[][] TABLE_COLUMNS = {
		{"USER_ADDRESS_ID", Types.BIGINT}, {"DRIVER_ID", Types.BIGINT},
		{"QUOTATIONS_ID", Types.BIGINT}, {"BUILD_NO", Types.VARCHAR},
		{"ZIP_CODE", Types.VARCHAR}, {"ADD_NO", Types.VARCHAR},
		{"ST_NAME_EN", Types.VARCHAR}, {"ST_NAME_AR", Types.VARCHAR},
		{"DISTRICT_EN", Types.VARCHAR}, {"DISTRICT_AR", Types.VARCHAR},
		{"CITY_EN", Types.VARCHAR}, {"CITY_AR", Types.VARCHAR},
		{"IS_NAT_ADDRESS", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("USER_ADDRESS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DRIVER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTATIONS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("BUILD_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ZIP_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADD_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ST_NAME_EN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ST_NAME_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DISTRICT_EN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DISTRICT_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CITY_EN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CITY_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IS_NAT_ADDRESS", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_QUOTATIONS_USER_ADDRESS (USER_ADDRESS_ID LONG not null primary key,DRIVER_ID LONG,QUOTATIONS_ID LONG,BUILD_NO VARCHAR(75) null,ZIP_CODE VARCHAR(75) null,ADD_NO VARCHAR(75) null,ST_NAME_EN VARCHAR(75) null,ST_NAME_AR VARCHAR(75) null,DISTRICT_EN VARCHAR(75) null,DISTRICT_AR VARCHAR(75) null,CITY_EN VARCHAR(75) null,CITY_AR VARCHAR(75) null,IS_NAT_ADDRESS BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table EJD_QUOTATIONS_USER_ADDRESS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotationsUserAddress.userAddressId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_QUOTATIONS_USER_ADDRESS.USER_ADDRESS_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long DRIVERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ISNATADDRESS_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUOTATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long USERADDRESSID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static QuotationsUserAddress toModel(
		QuotationsUserAddressSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		QuotationsUserAddress model = new QuotationsUserAddressImpl();

		model.setUserAddressId(soapModel.getUserAddressId());
		model.setDriverId(soapModel.getDriverId());
		model.setQuotationId(soapModel.getQuotationId());
		model.setBuildNo(soapModel.getBuildNo());
		model.setZipCode(soapModel.getZipCode());
		model.setAddNo(soapModel.getAddNo());
		model.setStNameEn(soapModel.getStNameEn());
		model.setStNameAr(soapModel.getStNameAr());
		model.setDistrictEn(soapModel.getDistrictEn());
		model.setDistrictAr(soapModel.getDistrictAr());
		model.setCityEn(soapModel.getCityEn());
		model.setCityAr(soapModel.getCityAr());
		model.setIsNatAddress(soapModel.isIsNatAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<QuotationsUserAddress> toModels(
		QuotationsUserAddressSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<QuotationsUserAddress> models =
			new ArrayList<QuotationsUserAddress>(soapModels.length);

		for (QuotationsUserAddressSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationsUserAddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userAddressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userAddressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuotationsUserAddress.class;
	}

	@Override
	public String getModelClassName() {
		return QuotationsUserAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<QuotationsUserAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<QuotationsUserAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationsUserAddress, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((QuotationsUserAddress)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<QuotationsUserAddress, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<QuotationsUserAddress, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(QuotationsUserAddress)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<QuotationsUserAddress, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<QuotationsUserAddress, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, QuotationsUserAddress>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			QuotationsUserAddress.class.getClassLoader(),
			QuotationsUserAddress.class, ModelWrapper.class);

		try {
			Constructor<QuotationsUserAddress> constructor =
				(Constructor<QuotationsUserAddress>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<QuotationsUserAddress, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<QuotationsUserAddress, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<QuotationsUserAddress, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<QuotationsUserAddress, Object>>();
		Map<String, BiConsumer<QuotationsUserAddress, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<QuotationsUserAddress, ?>>();

		attributeGetterFunctions.put(
			"userAddressId", QuotationsUserAddress::getUserAddressId);
		attributeSetterBiConsumers.put(
			"userAddressId",
			(BiConsumer<QuotationsUserAddress, Long>)
				QuotationsUserAddress::setUserAddressId);
		attributeGetterFunctions.put(
			"driverId", QuotationsUserAddress::getDriverId);
		attributeSetterBiConsumers.put(
			"driverId",
			(BiConsumer<QuotationsUserAddress, Long>)
				QuotationsUserAddress::setDriverId);
		attributeGetterFunctions.put(
			"quotationId", QuotationsUserAddress::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<QuotationsUserAddress, Long>)
				QuotationsUserAddress::setQuotationId);
		attributeGetterFunctions.put(
			"buildNo", QuotationsUserAddress::getBuildNo);
		attributeSetterBiConsumers.put(
			"buildNo",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setBuildNo);
		attributeGetterFunctions.put(
			"zipCode", QuotationsUserAddress::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setZipCode);
		attributeGetterFunctions.put("addNo", QuotationsUserAddress::getAddNo);
		attributeSetterBiConsumers.put(
			"addNo",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setAddNo);
		attributeGetterFunctions.put(
			"stNameEn", QuotationsUserAddress::getStNameEn);
		attributeSetterBiConsumers.put(
			"stNameEn",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setStNameEn);
		attributeGetterFunctions.put(
			"stNameAr", QuotationsUserAddress::getStNameAr);
		attributeSetterBiConsumers.put(
			"stNameAr",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setStNameAr);
		attributeGetterFunctions.put(
			"districtEn", QuotationsUserAddress::getDistrictEn);
		attributeSetterBiConsumers.put(
			"districtEn",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setDistrictEn);
		attributeGetterFunctions.put(
			"districtAr", QuotationsUserAddress::getDistrictAr);
		attributeSetterBiConsumers.put(
			"districtAr",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setDistrictAr);
		attributeGetterFunctions.put(
			"cityEn", QuotationsUserAddress::getCityEn);
		attributeSetterBiConsumers.put(
			"cityEn",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setCityEn);
		attributeGetterFunctions.put(
			"cityAr", QuotationsUserAddress::getCityAr);
		attributeSetterBiConsumers.put(
			"cityAr",
			(BiConsumer<QuotationsUserAddress, String>)
				QuotationsUserAddress::setCityAr);
		attributeGetterFunctions.put(
			"isNatAddress", QuotationsUserAddress::getIsNatAddress);
		attributeSetterBiConsumers.put(
			"isNatAddress",
			(BiConsumer<QuotationsUserAddress, Boolean>)
				QuotationsUserAddress::setIsNatAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUserAddressId() {
		return _userAddressId;
	}

	@Override
	public void setUserAddressId(long userAddressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userAddressId = userAddressId;
	}

	@JSON
	@Override
	public long getDriverId() {
		return _driverId;
	}

	@Override
	public void setDriverId(long driverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverId = driverId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDriverId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("DRIVER_ID"));
	}

	@JSON
	@Override
	public long getQuotationId() {
		return _quotationId;
	}

	@Override
	public void setQuotationId(long quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuotationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("QUOTATIONS_ID"));
	}

	@JSON
	@Override
	public String getBuildNo() {
		if (_buildNo == null) {
			return "";
		}
		else {
			return _buildNo;
		}
	}

	@Override
	public void setBuildNo(String buildNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_buildNo = buildNo;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getAddNo() {
		if (_addNo == null) {
			return "";
		}
		else {
			return _addNo;
		}
	}

	@Override
	public void setAddNo(String addNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addNo = addNo;
	}

	@JSON
	@Override
	public String getStNameEn() {
		if (_stNameEn == null) {
			return "";
		}
		else {
			return _stNameEn;
		}
	}

	@Override
	public void setStNameEn(String stNameEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stNameEn = stNameEn;
	}

	@JSON
	@Override
	public String getStNameAr() {
		if (_stNameAr == null) {
			return "";
		}
		else {
			return _stNameAr;
		}
	}

	@Override
	public void setStNameAr(String stNameAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stNameAr = stNameAr;
	}

	@JSON
	@Override
	public String getDistrictEn() {
		if (_districtEn == null) {
			return "";
		}
		else {
			return _districtEn;
		}
	}

	@Override
	public void setDistrictEn(String districtEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtEn = districtEn;
	}

	@JSON
	@Override
	public String getDistrictAr() {
		if (_districtAr == null) {
			return "";
		}
		else {
			return _districtAr;
		}
	}

	@Override
	public void setDistrictAr(String districtAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_districtAr = districtAr;
	}

	@JSON
	@Override
	public String getCityEn() {
		if (_cityEn == null) {
			return "";
		}
		else {
			return _cityEn;
		}
	}

	@Override
	public void setCityEn(String cityEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityEn = cityEn;
	}

	@JSON
	@Override
	public String getCityAr() {
		if (_cityAr == null) {
			return "";
		}
		else {
			return _cityAr;
		}
	}

	@Override
	public void setCityAr(String cityAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityAr = cityAr;
	}

	@JSON
	@Override
	public boolean getIsNatAddress() {
		return _isNatAddress;
	}

	@JSON
	@Override
	public boolean isIsNatAddress() {
		return _isNatAddress;
	}

	@Override
	public void setIsNatAddress(boolean isNatAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isNatAddress = isNatAddress;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsNatAddress() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("IS_NAT_ADDRESS"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, QuotationsUserAddress.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuotationsUserAddress toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, QuotationsUserAddress>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationsUserAddressImpl quotationsUserAddressImpl =
			new QuotationsUserAddressImpl();

		quotationsUserAddressImpl.setUserAddressId(getUserAddressId());
		quotationsUserAddressImpl.setDriverId(getDriverId());
		quotationsUserAddressImpl.setQuotationId(getQuotationId());
		quotationsUserAddressImpl.setBuildNo(getBuildNo());
		quotationsUserAddressImpl.setZipCode(getZipCode());
		quotationsUserAddressImpl.setAddNo(getAddNo());
		quotationsUserAddressImpl.setStNameEn(getStNameEn());
		quotationsUserAddressImpl.setStNameAr(getStNameAr());
		quotationsUserAddressImpl.setDistrictEn(getDistrictEn());
		quotationsUserAddressImpl.setDistrictAr(getDistrictAr());
		quotationsUserAddressImpl.setCityEn(getCityEn());
		quotationsUserAddressImpl.setCityAr(getCityAr());
		quotationsUserAddressImpl.setIsNatAddress(isIsNatAddress());

		quotationsUserAddressImpl.resetOriginalValues();

		return quotationsUserAddressImpl;
	}

	@Override
	public int compareTo(QuotationsUserAddress quotationsUserAddress) {
		long primaryKey = quotationsUserAddress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof QuotationsUserAddress)) {
			return false;
		}

		QuotationsUserAddress quotationsUserAddress =
			(QuotationsUserAddress)object;

		long primaryKey = quotationsUserAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<QuotationsUserAddress> toCacheModel() {
		QuotationsUserAddressCacheModel quotationsUserAddressCacheModel =
			new QuotationsUserAddressCacheModel();

		quotationsUserAddressCacheModel.userAddressId = getUserAddressId();

		quotationsUserAddressCacheModel.driverId = getDriverId();

		quotationsUserAddressCacheModel.quotationId = getQuotationId();

		quotationsUserAddressCacheModel.buildNo = getBuildNo();

		String buildNo = quotationsUserAddressCacheModel.buildNo;

		if ((buildNo != null) && (buildNo.length() == 0)) {
			quotationsUserAddressCacheModel.buildNo = null;
		}

		quotationsUserAddressCacheModel.zipCode = getZipCode();

		String zipCode = quotationsUserAddressCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			quotationsUserAddressCacheModel.zipCode = null;
		}

		quotationsUserAddressCacheModel.addNo = getAddNo();

		String addNo = quotationsUserAddressCacheModel.addNo;

		if ((addNo != null) && (addNo.length() == 0)) {
			quotationsUserAddressCacheModel.addNo = null;
		}

		quotationsUserAddressCacheModel.stNameEn = getStNameEn();

		String stNameEn = quotationsUserAddressCacheModel.stNameEn;

		if ((stNameEn != null) && (stNameEn.length() == 0)) {
			quotationsUserAddressCacheModel.stNameEn = null;
		}

		quotationsUserAddressCacheModel.stNameAr = getStNameAr();

		String stNameAr = quotationsUserAddressCacheModel.stNameAr;

		if ((stNameAr != null) && (stNameAr.length() == 0)) {
			quotationsUserAddressCacheModel.stNameAr = null;
		}

		quotationsUserAddressCacheModel.districtEn = getDistrictEn();

		String districtEn = quotationsUserAddressCacheModel.districtEn;

		if ((districtEn != null) && (districtEn.length() == 0)) {
			quotationsUserAddressCacheModel.districtEn = null;
		}

		quotationsUserAddressCacheModel.districtAr = getDistrictAr();

		String districtAr = quotationsUserAddressCacheModel.districtAr;

		if ((districtAr != null) && (districtAr.length() == 0)) {
			quotationsUserAddressCacheModel.districtAr = null;
		}

		quotationsUserAddressCacheModel.cityEn = getCityEn();

		String cityEn = quotationsUserAddressCacheModel.cityEn;

		if ((cityEn != null) && (cityEn.length() == 0)) {
			quotationsUserAddressCacheModel.cityEn = null;
		}

		quotationsUserAddressCacheModel.cityAr = getCityAr();

		String cityAr = quotationsUserAddressCacheModel.cityAr;

		if ((cityAr != null) && (cityAr.length() == 0)) {
			quotationsUserAddressCacheModel.cityAr = null;
		}

		quotationsUserAddressCacheModel.isNatAddress = isIsNatAddress();

		return quotationsUserAddressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<QuotationsUserAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<QuotationsUserAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationsUserAddress, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((QuotationsUserAddress)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<QuotationsUserAddress, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<QuotationsUserAddress, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<QuotationsUserAddress, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((QuotationsUserAddress)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, QuotationsUserAddress>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _userAddressId;
	private long _driverId;
	private long _quotationId;
	private String _buildNo;
	private String _zipCode;
	private String _addNo;
	private String _stNameEn;
	private String _stNameAr;
	private String _districtEn;
	private String _districtAr;
	private String _cityEn;
	private String _cityAr;
	private boolean _isNatAddress;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<QuotationsUserAddress, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((QuotationsUserAddress)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("USER_ADDRESS_ID", _userAddressId);
		_columnOriginalValues.put("DRIVER_ID", _driverId);
		_columnOriginalValues.put("QUOTATIONS_ID", _quotationId);
		_columnOriginalValues.put("BUILD_NO", _buildNo);
		_columnOriginalValues.put("ZIP_CODE", _zipCode);
		_columnOriginalValues.put("ADD_NO", _addNo);
		_columnOriginalValues.put("ST_NAME_EN", _stNameEn);
		_columnOriginalValues.put("ST_NAME_AR", _stNameAr);
		_columnOriginalValues.put("DISTRICT_EN", _districtEn);
		_columnOriginalValues.put("DISTRICT_AR", _districtAr);
		_columnOriginalValues.put("CITY_EN", _cityEn);
		_columnOriginalValues.put("CITY_AR", _cityAr);
		_columnOriginalValues.put("IS_NAT_ADDRESS", _isNatAddress);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("USER_ADDRESS_ID", "userAddressId");
		attributeNames.put("DRIVER_ID", "driverId");
		attributeNames.put("QUOTATIONS_ID", "quotationId");
		attributeNames.put("BUILD_NO", "buildNo");
		attributeNames.put("ZIP_CODE", "zipCode");
		attributeNames.put("ADD_NO", "addNo");
		attributeNames.put("ST_NAME_EN", "stNameEn");
		attributeNames.put("ST_NAME_AR", "stNameAr");
		attributeNames.put("DISTRICT_EN", "districtEn");
		attributeNames.put("DISTRICT_AR", "districtAr");
		attributeNames.put("CITY_EN", "cityEn");
		attributeNames.put("CITY_AR", "cityAr");
		attributeNames.put("IS_NAT_ADDRESS", "isNatAddress");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("USER_ADDRESS_ID", 1L);

		columnBitmasks.put("DRIVER_ID", 2L);

		columnBitmasks.put("QUOTATIONS_ID", 4L);

		columnBitmasks.put("BUILD_NO", 8L);

		columnBitmasks.put("ZIP_CODE", 16L);

		columnBitmasks.put("ADD_NO", 32L);

		columnBitmasks.put("ST_NAME_EN", 64L);

		columnBitmasks.put("ST_NAME_AR", 128L);

		columnBitmasks.put("DISTRICT_EN", 256L);

		columnBitmasks.put("DISTRICT_AR", 512L);

		columnBitmasks.put("CITY_EN", 1024L);

		columnBitmasks.put("CITY_AR", 2048L);

		columnBitmasks.put("IS_NAT_ADDRESS", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private QuotationsUserAddress _escapedModel;

}