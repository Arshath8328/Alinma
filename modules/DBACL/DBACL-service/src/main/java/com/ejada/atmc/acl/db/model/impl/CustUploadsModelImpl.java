/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.CustUploads;
import com.ejada.atmc.acl.db.model.CustUploadsCarBackFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsCarFrontFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsCarLeftFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsCarRightFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsEngChassisNoFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsIdFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsIstCardFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsLeaseFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsLicenseFileBlobModel;
import com.ejada.atmc.acl.db.model.CustUploadsModel;
import com.ejada.atmc.acl.db.model.CustUploadsSoap;
import com.ejada.atmc.acl.db.service.CustUploadsLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CustUploads service. Represents a row in the &quot;EJD_QUOTATIONS_CUST_UPLOADS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustUploadsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustUploadsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustUploadsImpl
 * @generated
 */
@JSON(strict = true)
public class CustUploadsModelImpl
	extends BaseModelImpl<CustUploads> implements CustUploadsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cust uploads model instance should use the <code>CustUploads</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_QUOTATIONS_CUST_UPLOADS";

	public static final Object[][] TABLE_COLUMNS = {
		{"ID", Types.BIGINT}, {"QUOTATION_ID", Types.VARCHAR},
		{"ID_FILE", Types.BLOB}, {"LICENSE_FILE", Types.BLOB},
		{"IST_CARD_FILE", Types.BLOB}, {"CAR_FRONT_FILE", Types.BLOB},
		{"CAR_BACK_FILE", Types.BLOB}, {"CAR_LEFT_FILE", Types.BLOB},
		{"CAR_RIGHT_FILE", Types.BLOB}, {"ENG_CHASSIS_NO_FILE", Types.BLOB},
		{"LEASE_FILE", Types.BLOB}, {"ID_FILE_NAME", Types.VARCHAR},
		{"LICENSE_FILE_NANE", Types.VARCHAR},
		{"IST_CARD_FILE_NAME", Types.VARCHAR},
		{"CAR_FRONT_FILE_NAME", Types.VARCHAR},
		{"CAR_BACK_FILE_NAME", Types.VARCHAR},
		{"CAR_LEFT_FILE_NAME", Types.VARCHAR},
		{"CAR_RIGHT_FILE_NAME", Types.VARCHAR},
		{"ENG_CHASSIS_NO_FILE_NAME", Types.VARCHAR},
		{"LEASE_FILE_NAME", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTATION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ID_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("LICENSE_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("IST_CARD_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("CAR_FRONT_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("CAR_BACK_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("CAR_LEFT_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("CAR_RIGHT_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("ENG_CHASSIS_NO_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("LEASE_FILE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("ID_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LICENSE_FILE_NANE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IST_CARD_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CAR_FRONT_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CAR_BACK_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CAR_LEFT_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CAR_RIGHT_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ENG_CHASSIS_NO_FILE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("LEASE_FILE_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_QUOTATIONS_CUST_UPLOADS (ID LONG not null primary key,QUOTATION_ID VARCHAR(75) null,ID_FILE BLOB,LICENSE_FILE BLOB,IST_CARD_FILE BLOB,CAR_FRONT_FILE BLOB,CAR_BACK_FILE BLOB,CAR_LEFT_FILE BLOB,CAR_RIGHT_FILE BLOB,ENG_CHASSIS_NO_FILE BLOB,LEASE_FILE BLOB,ID_FILE_NAME VARCHAR(75) null,LICENSE_FILE_NANE VARCHAR(75) null,IST_CARD_FILE_NAME VARCHAR(75) null,CAR_FRONT_FILE_NAME VARCHAR(75) null,CAR_BACK_FILE_NAME VARCHAR(75) null,CAR_LEFT_FILE_NAME VARCHAR(75) null,CAR_RIGHT_FILE_NAME VARCHAR(75) null,ENG_CHASSIS_NO_FILE_NAME VARCHAR(75) null,LEASE_FILE_NAME VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table EJD_QUOTATIONS_CUST_UPLOADS";

	public static final String ORDER_BY_JPQL = " ORDER BY custUploads.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_QUOTATIONS_CUST_UPLOADS.ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long QUOTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static CustUploads toModel(CustUploadsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CustUploads model = new CustUploadsImpl();

		model.setId(soapModel.getId());
		model.setQuotId(soapModel.getQuotId());
		model.setIdFile(soapModel.getIdFile());
		model.setLicenseFile(soapModel.getLicenseFile());
		model.setIstCardFile(soapModel.getIstCardFile());
		model.setCarFrontFile(soapModel.getCarFrontFile());
		model.setCarBackFile(soapModel.getCarBackFile());
		model.setCarLeftFile(soapModel.getCarLeftFile());
		model.setCarRightFile(soapModel.getCarRightFile());
		model.setEngChassisNoFile(soapModel.getEngChassisNoFile());
		model.setLeaseFile(soapModel.getLeaseFile());
		model.setIdFileName(soapModel.getIdFileName());
		model.setLicenseFileName(soapModel.getLicenseFileName());
		model.setIstCardFileName(soapModel.getIstCardFileName());
		model.setCarFrontFileName(soapModel.getCarFrontFileName());
		model.setCarBackFileName(soapModel.getCarBackFileName());
		model.setCarLeftFileName(soapModel.getCarLeftFileName());
		model.setCarRightFileName(soapModel.getCarRightFileName());
		model.setEngChassisNoFileName(soapModel.getEngChassisNoFileName());
		model.setLeaseFileName(soapModel.getLeaseFileName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<CustUploads> toModels(CustUploadsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CustUploads> models = new ArrayList<CustUploads>(
			soapModels.length);

		for (CustUploadsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CustUploadsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustUploads.class;
	}

	@Override
	public String getModelClassName() {
		return CustUploads.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CustUploads, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CustUploads, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustUploads, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CustUploads)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CustUploads, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CustUploads, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CustUploads)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CustUploads, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CustUploads, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CustUploads>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CustUploads.class.getClassLoader(), CustUploads.class,
			ModelWrapper.class);

		try {
			Constructor<CustUploads> constructor =
				(Constructor<CustUploads>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CustUploads, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CustUploads, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CustUploads, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CustUploads, Object>>();
		Map<String, BiConsumer<CustUploads, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CustUploads, ?>>();

		attributeGetterFunctions.put("id", CustUploads::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<CustUploads, Long>)CustUploads::setId);
		attributeGetterFunctions.put("quotId", CustUploads::getQuotId);
		attributeSetterBiConsumers.put(
			"quotId", (BiConsumer<CustUploads, String>)CustUploads::setQuotId);
		attributeGetterFunctions.put("idFile", CustUploads::getIdFile);
		attributeSetterBiConsumers.put(
			"idFile", (BiConsumer<CustUploads, Blob>)CustUploads::setIdFile);
		attributeGetterFunctions.put(
			"licenseFile", CustUploads::getLicenseFile);
		attributeSetterBiConsumers.put(
			"licenseFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setLicenseFile);
		attributeGetterFunctions.put(
			"istCardFile", CustUploads::getIstCardFile);
		attributeSetterBiConsumers.put(
			"istCardFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setIstCardFile);
		attributeGetterFunctions.put(
			"carFrontFile", CustUploads::getCarFrontFile);
		attributeSetterBiConsumers.put(
			"carFrontFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setCarFrontFile);
		attributeGetterFunctions.put(
			"carBackFile", CustUploads::getCarBackFile);
		attributeSetterBiConsumers.put(
			"carBackFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setCarBackFile);
		attributeGetterFunctions.put(
			"carLeftFile", CustUploads::getCarLeftFile);
		attributeSetterBiConsumers.put(
			"carLeftFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setCarLeftFile);
		attributeGetterFunctions.put(
			"carRightFile", CustUploads::getCarRightFile);
		attributeSetterBiConsumers.put(
			"carRightFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setCarRightFile);
		attributeGetterFunctions.put(
			"engChassisNoFile", CustUploads::getEngChassisNoFile);
		attributeSetterBiConsumers.put(
			"engChassisNoFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setEngChassisNoFile);
		attributeGetterFunctions.put("leaseFile", CustUploads::getLeaseFile);
		attributeSetterBiConsumers.put(
			"leaseFile",
			(BiConsumer<CustUploads, Blob>)CustUploads::setLeaseFile);
		attributeGetterFunctions.put("idFileName", CustUploads::getIdFileName);
		attributeSetterBiConsumers.put(
			"idFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setIdFileName);
		attributeGetterFunctions.put(
			"licenseFileName", CustUploads::getLicenseFileName);
		attributeSetterBiConsumers.put(
			"licenseFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setLicenseFileName);
		attributeGetterFunctions.put(
			"istCardFileName", CustUploads::getIstCardFileName);
		attributeSetterBiConsumers.put(
			"istCardFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setIstCardFileName);
		attributeGetterFunctions.put(
			"carFrontFileName", CustUploads::getCarFrontFileName);
		attributeSetterBiConsumers.put(
			"carFrontFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setCarFrontFileName);
		attributeGetterFunctions.put(
			"carBackFileName", CustUploads::getCarBackFileName);
		attributeSetterBiConsumers.put(
			"carBackFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setCarBackFileName);
		attributeGetterFunctions.put(
			"carLeftFileName", CustUploads::getCarLeftFileName);
		attributeSetterBiConsumers.put(
			"carLeftFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setCarLeftFileName);
		attributeGetterFunctions.put(
			"carRightFileName", CustUploads::getCarRightFileName);
		attributeSetterBiConsumers.put(
			"carRightFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setCarRightFileName);
		attributeGetterFunctions.put(
			"engChassisNoFileName", CustUploads::getEngChassisNoFileName);
		attributeSetterBiConsumers.put(
			"engChassisNoFileName",
			(BiConsumer<CustUploads, String>)
				CustUploads::setEngChassisNoFileName);
		attributeGetterFunctions.put(
			"leaseFileName", CustUploads::getLeaseFileName);
		attributeSetterBiConsumers.put(
			"leaseFileName",
			(BiConsumer<CustUploads, String>)CustUploads::setLeaseFileName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public String getQuotId() {
		if (_quotId == null) {
			return "";
		}
		else {
			return _quotId;
		}
	}

	@Override
	public void setQuotId(String quotId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotId = quotId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalQuotId() {
		return getColumnOriginalValue("QUOTATION_ID");
	}

	@JSON
	@Override
	public Blob getIdFile() {
		if (_idFileBlobModel == null) {
			try {
				_idFileBlobModel =
					CustUploadsLocalServiceUtil.getIdFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_idFileBlobModel != null) {
			blob = _idFileBlobModel.getIdFileBlob();
		}

		return blob;
	}

	@Override
	public void setIdFile(Blob idFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_idFileBlobModel == null) {
			_idFileBlobModel = new CustUploadsIdFileBlobModel(
				getPrimaryKey(), idFile);
		}
		else {
			_idFileBlobModel.setIdFileBlob(idFile);
		}
	}

	@JSON
	@Override
	public Blob getLicenseFile() {
		if (_licenseFileBlobModel == null) {
			try {
				_licenseFileBlobModel =
					CustUploadsLocalServiceUtil.getLicenseFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_licenseFileBlobModel != null) {
			blob = _licenseFileBlobModel.getLicenseFileBlob();
		}

		return blob;
	}

	@Override
	public void setLicenseFile(Blob licenseFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_licenseFileBlobModel == null) {
			_licenseFileBlobModel = new CustUploadsLicenseFileBlobModel(
				getPrimaryKey(), licenseFile);
		}
		else {
			_licenseFileBlobModel.setLicenseFileBlob(licenseFile);
		}
	}

	@JSON
	@Override
	public Blob getIstCardFile() {
		if (_istCardFileBlobModel == null) {
			try {
				_istCardFileBlobModel =
					CustUploadsLocalServiceUtil.getIstCardFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_istCardFileBlobModel != null) {
			blob = _istCardFileBlobModel.getIstCardFileBlob();
		}

		return blob;
	}

	@Override
	public void setIstCardFile(Blob istCardFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_istCardFileBlobModel == null) {
			_istCardFileBlobModel = new CustUploadsIstCardFileBlobModel(
				getPrimaryKey(), istCardFile);
		}
		else {
			_istCardFileBlobModel.setIstCardFileBlob(istCardFile);
		}
	}

	@JSON
	@Override
	public Blob getCarFrontFile() {
		if (_carFrontFileBlobModel == null) {
			try {
				_carFrontFileBlobModel =
					CustUploadsLocalServiceUtil.getCarFrontFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_carFrontFileBlobModel != null) {
			blob = _carFrontFileBlobModel.getCarFrontFileBlob();
		}

		return blob;
	}

	@Override
	public void setCarFrontFile(Blob carFrontFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_carFrontFileBlobModel == null) {
			_carFrontFileBlobModel = new CustUploadsCarFrontFileBlobModel(
				getPrimaryKey(), carFrontFile);
		}
		else {
			_carFrontFileBlobModel.setCarFrontFileBlob(carFrontFile);
		}
	}

	@JSON
	@Override
	public Blob getCarBackFile() {
		if (_carBackFileBlobModel == null) {
			try {
				_carBackFileBlobModel =
					CustUploadsLocalServiceUtil.getCarBackFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_carBackFileBlobModel != null) {
			blob = _carBackFileBlobModel.getCarBackFileBlob();
		}

		return blob;
	}

	@Override
	public void setCarBackFile(Blob carBackFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_carBackFileBlobModel == null) {
			_carBackFileBlobModel = new CustUploadsCarBackFileBlobModel(
				getPrimaryKey(), carBackFile);
		}
		else {
			_carBackFileBlobModel.setCarBackFileBlob(carBackFile);
		}
	}

	@JSON
	@Override
	public Blob getCarLeftFile() {
		if (_carLeftFileBlobModel == null) {
			try {
				_carLeftFileBlobModel =
					CustUploadsLocalServiceUtil.getCarLeftFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_carLeftFileBlobModel != null) {
			blob = _carLeftFileBlobModel.getCarLeftFileBlob();
		}

		return blob;
	}

	@Override
	public void setCarLeftFile(Blob carLeftFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_carLeftFileBlobModel == null) {
			_carLeftFileBlobModel = new CustUploadsCarLeftFileBlobModel(
				getPrimaryKey(), carLeftFile);
		}
		else {
			_carLeftFileBlobModel.setCarLeftFileBlob(carLeftFile);
		}
	}

	@JSON
	@Override
	public Blob getCarRightFile() {
		if (_carRightFileBlobModel == null) {
			try {
				_carRightFileBlobModel =
					CustUploadsLocalServiceUtil.getCarRightFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_carRightFileBlobModel != null) {
			blob = _carRightFileBlobModel.getCarRightFileBlob();
		}

		return blob;
	}

	@Override
	public void setCarRightFile(Blob carRightFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_carRightFileBlobModel == null) {
			_carRightFileBlobModel = new CustUploadsCarRightFileBlobModel(
				getPrimaryKey(), carRightFile);
		}
		else {
			_carRightFileBlobModel.setCarRightFileBlob(carRightFile);
		}
	}

	@JSON
	@Override
	public Blob getEngChassisNoFile() {
		if (_engChassisNoFileBlobModel == null) {
			try {
				_engChassisNoFileBlobModel =
					CustUploadsLocalServiceUtil.getEngChassisNoFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_engChassisNoFileBlobModel != null) {
			blob = _engChassisNoFileBlobModel.getEngChassisNoFileBlob();
		}

		return blob;
	}

	@Override
	public void setEngChassisNoFile(Blob engChassisNoFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_engChassisNoFileBlobModel == null) {
			_engChassisNoFileBlobModel =
				new CustUploadsEngChassisNoFileBlobModel(
					getPrimaryKey(), engChassisNoFile);
		}
		else {
			_engChassisNoFileBlobModel.setEngChassisNoFileBlob(
				engChassisNoFile);
		}
	}

	@JSON
	@Override
	public Blob getLeaseFile() {
		if (_leaseFileBlobModel == null) {
			try {
				_leaseFileBlobModel =
					CustUploadsLocalServiceUtil.getLeaseFileBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_leaseFileBlobModel != null) {
			blob = _leaseFileBlobModel.getLeaseFileBlob();
		}

		return blob;
	}

	@Override
	public void setLeaseFile(Blob leaseFile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_leaseFileBlobModel == null) {
			_leaseFileBlobModel = new CustUploadsLeaseFileBlobModel(
				getPrimaryKey(), leaseFile);
		}
		else {
			_leaseFileBlobModel.setLeaseFileBlob(leaseFile);
		}
	}

	@JSON
	@Override
	public String getIdFileName() {
		if (_idFileName == null) {
			return "";
		}
		else {
			return _idFileName;
		}
	}

	@Override
	public void setIdFileName(String idFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idFileName = idFileName;
	}

	@JSON
	@Override
	public String getLicenseFileName() {
		if (_licenseFileName == null) {
			return "";
		}
		else {
			return _licenseFileName;
		}
	}

	@Override
	public void setLicenseFileName(String licenseFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseFileName = licenseFileName;
	}

	@JSON
	@Override
	public String getIstCardFileName() {
		if (_istCardFileName == null) {
			return "";
		}
		else {
			return _istCardFileName;
		}
	}

	@Override
	public void setIstCardFileName(String istCardFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_istCardFileName = istCardFileName;
	}

	@JSON
	@Override
	public String getCarFrontFileName() {
		if (_carFrontFileName == null) {
			return "";
		}
		else {
			return _carFrontFileName;
		}
	}

	@Override
	public void setCarFrontFileName(String carFrontFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carFrontFileName = carFrontFileName;
	}

	@JSON
	@Override
	public String getCarBackFileName() {
		if (_carBackFileName == null) {
			return "";
		}
		else {
			return _carBackFileName;
		}
	}

	@Override
	public void setCarBackFileName(String carBackFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carBackFileName = carBackFileName;
	}

	@JSON
	@Override
	public String getCarLeftFileName() {
		if (_carLeftFileName == null) {
			return "";
		}
		else {
			return _carLeftFileName;
		}
	}

	@Override
	public void setCarLeftFileName(String carLeftFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carLeftFileName = carLeftFileName;
	}

	@JSON
	@Override
	public String getCarRightFileName() {
		if (_carRightFileName == null) {
			return "";
		}
		else {
			return _carRightFileName;
		}
	}

	@Override
	public void setCarRightFileName(String carRightFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carRightFileName = carRightFileName;
	}

	@JSON
	@Override
	public String getEngChassisNoFileName() {
		if (_engChassisNoFileName == null) {
			return "";
		}
		else {
			return _engChassisNoFileName;
		}
	}

	@Override
	public void setEngChassisNoFileName(String engChassisNoFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_engChassisNoFileName = engChassisNoFileName;
	}

	@JSON
	@Override
	public String getLeaseFileName() {
		if (_leaseFileName == null) {
			return "";
		}
		else {
			return _leaseFileName;
		}
	}

	@Override
	public void setLeaseFileName(String leaseFileName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaseFileName = leaseFileName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CustUploads.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CustUploads toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CustUploads>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustUploadsImpl custUploadsImpl = new CustUploadsImpl();

		custUploadsImpl.setId(getId());
		custUploadsImpl.setQuotId(getQuotId());
		custUploadsImpl.setIdFileName(getIdFileName());
		custUploadsImpl.setLicenseFileName(getLicenseFileName());
		custUploadsImpl.setIstCardFileName(getIstCardFileName());
		custUploadsImpl.setCarFrontFileName(getCarFrontFileName());
		custUploadsImpl.setCarBackFileName(getCarBackFileName());
		custUploadsImpl.setCarLeftFileName(getCarLeftFileName());
		custUploadsImpl.setCarRightFileName(getCarRightFileName());
		custUploadsImpl.setEngChassisNoFileName(getEngChassisNoFileName());
		custUploadsImpl.setLeaseFileName(getLeaseFileName());

		custUploadsImpl.resetOriginalValues();

		return custUploadsImpl;
	}

	@Override
	public int compareTo(CustUploads custUploads) {
		long primaryKey = custUploads.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CustUploads)) {
			return false;
		}

		CustUploads custUploads = (CustUploads)object;

		long primaryKey = custUploads.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_idFileBlobModel = null;

		_licenseFileBlobModel = null;

		_istCardFileBlobModel = null;

		_carFrontFileBlobModel = null;

		_carBackFileBlobModel = null;

		_carLeftFileBlobModel = null;

		_carRightFileBlobModel = null;

		_engChassisNoFileBlobModel = null;

		_leaseFileBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CustUploads> toCacheModel() {
		CustUploadsCacheModel custUploadsCacheModel =
			new CustUploadsCacheModel();

		custUploadsCacheModel.id = getId();

		custUploadsCacheModel.quotId = getQuotId();

		String quotId = custUploadsCacheModel.quotId;

		if ((quotId != null) && (quotId.length() == 0)) {
			custUploadsCacheModel.quotId = null;
		}

		custUploadsCacheModel.idFileName = getIdFileName();

		String idFileName = custUploadsCacheModel.idFileName;

		if ((idFileName != null) && (idFileName.length() == 0)) {
			custUploadsCacheModel.idFileName = null;
		}

		custUploadsCacheModel.licenseFileName = getLicenseFileName();

		String licenseFileName = custUploadsCacheModel.licenseFileName;

		if ((licenseFileName != null) && (licenseFileName.length() == 0)) {
			custUploadsCacheModel.licenseFileName = null;
		}

		custUploadsCacheModel.istCardFileName = getIstCardFileName();

		String istCardFileName = custUploadsCacheModel.istCardFileName;

		if ((istCardFileName != null) && (istCardFileName.length() == 0)) {
			custUploadsCacheModel.istCardFileName = null;
		}

		custUploadsCacheModel.carFrontFileName = getCarFrontFileName();

		String carFrontFileName = custUploadsCacheModel.carFrontFileName;

		if ((carFrontFileName != null) && (carFrontFileName.length() == 0)) {
			custUploadsCacheModel.carFrontFileName = null;
		}

		custUploadsCacheModel.carBackFileName = getCarBackFileName();

		String carBackFileName = custUploadsCacheModel.carBackFileName;

		if ((carBackFileName != null) && (carBackFileName.length() == 0)) {
			custUploadsCacheModel.carBackFileName = null;
		}

		custUploadsCacheModel.carLeftFileName = getCarLeftFileName();

		String carLeftFileName = custUploadsCacheModel.carLeftFileName;

		if ((carLeftFileName != null) && (carLeftFileName.length() == 0)) {
			custUploadsCacheModel.carLeftFileName = null;
		}

		custUploadsCacheModel.carRightFileName = getCarRightFileName();

		String carRightFileName = custUploadsCacheModel.carRightFileName;

		if ((carRightFileName != null) && (carRightFileName.length() == 0)) {
			custUploadsCacheModel.carRightFileName = null;
		}

		custUploadsCacheModel.engChassisNoFileName = getEngChassisNoFileName();

		String engChassisNoFileName =
			custUploadsCacheModel.engChassisNoFileName;

		if ((engChassisNoFileName != null) &&
			(engChassisNoFileName.length() == 0)) {

			custUploadsCacheModel.engChassisNoFileName = null;
		}

		custUploadsCacheModel.leaseFileName = getLeaseFileName();

		String leaseFileName = custUploadsCacheModel.leaseFileName;

		if ((leaseFileName != null) && (leaseFileName.length() == 0)) {
			custUploadsCacheModel.leaseFileName = null;
		}

		return custUploadsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", quotId=");
		sb.append(getQuotId());
		sb.append(", idFileName=");
		sb.append(getIdFileName());
		sb.append(", licenseFileName=");
		sb.append(getLicenseFileName());
		sb.append(", istCardFileName=");
		sb.append(getIstCardFileName());
		sb.append(", carFrontFileName=");
		sb.append(getCarFrontFileName());
		sb.append(", carBackFileName=");
		sb.append(getCarBackFileName());
		sb.append(", carLeftFileName=");
		sb.append(getCarLeftFileName());
		sb.append(", carRightFileName=");
		sb.append(getCarRightFileName());
		sb.append(", engChassisNoFileName=");
		sb.append(getEngChassisNoFileName());
		sb.append(", leaseFileName=");
		sb.append(getLeaseFileName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.CustUploads");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quotId</column-name><column-value><![CDATA[");
		sb.append(getQuotId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idFileName</column-name><column-value><![CDATA[");
		sb.append(getIdFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>licenseFileName</column-name><column-value><![CDATA[");
		sb.append(getLicenseFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>istCardFileName</column-name><column-value><![CDATA[");
		sb.append(getIstCardFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carFrontFileName</column-name><column-value><![CDATA[");
		sb.append(getCarFrontFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carBackFileName</column-name><column-value><![CDATA[");
		sb.append(getCarBackFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carLeftFileName</column-name><column-value><![CDATA[");
		sb.append(getCarLeftFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carRightFileName</column-name><column-value><![CDATA[");
		sb.append(getCarRightFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engChassisNoFileName</column-name><column-value><![CDATA[");
		sb.append(getEngChassisNoFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaseFileName</column-name><column-value><![CDATA[");
		sb.append(getLeaseFileName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CustUploads>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private String _quotId;
	private CustUploadsIdFileBlobModel _idFileBlobModel;
	private CustUploadsLicenseFileBlobModel _licenseFileBlobModel;
	private CustUploadsIstCardFileBlobModel _istCardFileBlobModel;
	private CustUploadsCarFrontFileBlobModel _carFrontFileBlobModel;
	private CustUploadsCarBackFileBlobModel _carBackFileBlobModel;
	private CustUploadsCarLeftFileBlobModel _carLeftFileBlobModel;
	private CustUploadsCarRightFileBlobModel _carRightFileBlobModel;
	private CustUploadsEngChassisNoFileBlobModel _engChassisNoFileBlobModel;
	private CustUploadsLeaseFileBlobModel _leaseFileBlobModel;
	private String _idFileName;
	private String _licenseFileName;
	private String _istCardFileName;
	private String _carFrontFileName;
	private String _carBackFileName;
	private String _carLeftFileName;
	private String _carRightFileName;
	private String _engChassisNoFileName;
	private String _leaseFileName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CustUploads, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CustUploads)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ID", _id);
		_columnOriginalValues.put("QUOTATION_ID", _quotId);
		_columnOriginalValues.put("ID_FILE_NAME", _idFileName);
		_columnOriginalValues.put("LICENSE_FILE_NANE", _licenseFileName);
		_columnOriginalValues.put("IST_CARD_FILE_NAME", _istCardFileName);
		_columnOriginalValues.put("CAR_FRONT_FILE_NAME", _carFrontFileName);
		_columnOriginalValues.put("CAR_BACK_FILE_NAME", _carBackFileName);
		_columnOriginalValues.put("CAR_LEFT_FILE_NAME", _carLeftFileName);
		_columnOriginalValues.put("CAR_RIGHT_FILE_NAME", _carRightFileName);
		_columnOriginalValues.put(
			"ENG_CHASSIS_NO_FILE_NAME", _engChassisNoFileName);
		_columnOriginalValues.put("LEASE_FILE_NAME", _leaseFileName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ID", "id");
		attributeNames.put("QUOTATION_ID", "quotId");
		attributeNames.put("ID_FILE", "idFile");
		attributeNames.put("LICENSE_FILE", "licenseFile");
		attributeNames.put("IST_CARD_FILE", "istCardFile");
		attributeNames.put("CAR_FRONT_FILE", "carFrontFile");
		attributeNames.put("CAR_BACK_FILE", "carBackFile");
		attributeNames.put("CAR_LEFT_FILE", "carLeftFile");
		attributeNames.put("CAR_RIGHT_FILE", "carRightFile");
		attributeNames.put("ENG_CHASSIS_NO_FILE", "engChassisNoFile");
		attributeNames.put("LEASE_FILE", "leaseFile");
		attributeNames.put("ID_FILE_NAME", "idFileName");
		attributeNames.put("LICENSE_FILE_NANE", "licenseFileName");
		attributeNames.put("IST_CARD_FILE_NAME", "istCardFileName");
		attributeNames.put("CAR_FRONT_FILE_NAME", "carFrontFileName");
		attributeNames.put("CAR_BACK_FILE_NAME", "carBackFileName");
		attributeNames.put("CAR_LEFT_FILE_NAME", "carLeftFileName");
		attributeNames.put("CAR_RIGHT_FILE_NAME", "carRightFileName");
		attributeNames.put("ENG_CHASSIS_NO_FILE_NAME", "engChassisNoFileName");
		attributeNames.put("LEASE_FILE_NAME", "leaseFileName");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ID", 1L);

		columnBitmasks.put("QUOTATION_ID", 2L);

		columnBitmasks.put("ID_FILE", 4L);

		columnBitmasks.put("LICENSE_FILE", 8L);

		columnBitmasks.put("IST_CARD_FILE", 16L);

		columnBitmasks.put("CAR_FRONT_FILE", 32L);

		columnBitmasks.put("CAR_BACK_FILE", 64L);

		columnBitmasks.put("CAR_LEFT_FILE", 128L);

		columnBitmasks.put("CAR_RIGHT_FILE", 256L);

		columnBitmasks.put("ENG_CHASSIS_NO_FILE", 512L);

		columnBitmasks.put("LEASE_FILE", 1024L);

		columnBitmasks.put("ID_FILE_NAME", 2048L);

		columnBitmasks.put("LICENSE_FILE_NANE", 4096L);

		columnBitmasks.put("IST_CARD_FILE_NAME", 8192L);

		columnBitmasks.put("CAR_FRONT_FILE_NAME", 16384L);

		columnBitmasks.put("CAR_BACK_FILE_NAME", 32768L);

		columnBitmasks.put("CAR_LEFT_FILE_NAME", 65536L);

		columnBitmasks.put("CAR_RIGHT_FILE_NAME", 131072L);

		columnBitmasks.put("ENG_CHASSIS_NO_FILE_NAME", 262144L);

		columnBitmasks.put("LEASE_FILE_NAME", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CustUploads _escapedModel;

}