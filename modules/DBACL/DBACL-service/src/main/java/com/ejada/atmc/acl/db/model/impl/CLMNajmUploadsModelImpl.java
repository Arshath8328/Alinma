/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.CLMNajmUploads;
import com.ejada.atmc.acl.db.model.CLMNajmUploadsBankIbanBlobModel;
import com.ejada.atmc.acl.db.model.CLMNajmUploadsDamageEstQuotBlobModel;
import com.ejada.atmc.acl.db.model.CLMNajmUploadsModel;
import com.ejada.atmc.acl.db.model.CLMNajmUploadsNajmSlipBlobModel;
import com.ejada.atmc.acl.db.model.CLMNajmUploadsOwnerIdBlobModel;
import com.ejada.atmc.acl.db.model.CLMNajmUploadsSoap;
import com.ejada.atmc.acl.db.service.CLMNajmUploadsLocalServiceUtil;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CLMNajmUploads service. Represents a row in the &quot;CLM_NAJM_UPLOADS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CLMNajmUploadsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CLMNajmUploadsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CLMNajmUploadsImpl
 * @generated
 */
@JSON(strict = true)
public class CLMNajmUploadsModelImpl
	extends BaseModelImpl<CLMNajmUploads> implements CLMNajmUploadsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a clm najm uploads model instance should use the <code>CLMNajmUploads</code> interface instead.
	 */
	public static final String TABLE_NAME = "CLM_NAJM_UPLOADS";

	public static final Object[][] TABLE_COLUMNS = {
		{"FILE_ID", Types.INTEGER}, {"CASE_NO", Types.VARCHAR},
		{"CIPI_ID", Types.VARCHAR}, {"NAJM_SLIP", Types.BLOB},
		{"NAJM_SLIP_NAME", Types.VARCHAR}, {"DAMAGE_EST_QUOT", Types.BLOB},
		{"DAMAGE_EST_QUOT_NAME", Types.VARCHAR}, {"BANK_IBAN", Types.BLOB},
		{"BANK_IBAN_NAME", Types.VARCHAR}, {"OWNER_ID", Types.BLOB},
		{"OWNER_ID_NAME", Types.VARCHAR}, {"CLAIM_REF_NO", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FILE_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CASE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CIPI_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NAJM_SLIP", Types.BLOB);
		TABLE_COLUMNS_MAP.put("NAJM_SLIP_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DAMAGE_EST_QUOT", Types.BLOB);
		TABLE_COLUMNS_MAP.put("DAMAGE_EST_QUOT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BANK_IBAN", Types.BLOB);
		TABLE_COLUMNS_MAP.put("BANK_IBAN_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OWNER_ID", Types.BLOB);
		TABLE_COLUMNS_MAP.put("OWNER_ID_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CLAIM_REF_NO", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CLM_NAJM_UPLOADS (FILE_ID INTEGER not null primary key,CASE_NO VARCHAR(75) null,CIPI_ID VARCHAR(75) null,NAJM_SLIP BLOB,NAJM_SLIP_NAME VARCHAR(75) null,DAMAGE_EST_QUOT BLOB,DAMAGE_EST_QUOT_NAME VARCHAR(75) null,BANK_IBAN BLOB,BANK_IBAN_NAME VARCHAR(75) null,OWNER_ID BLOB,OWNER_ID_NAME VARCHAR(75) null,CLAIM_REF_NO VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table CLM_NAJM_UPLOADS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY clmNajmUploads.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CLM_NAJM_UPLOADS.FILE_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CLAIMREFNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static CLMNajmUploads toModel(CLMNajmUploadsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CLMNajmUploads model = new CLMNajmUploadsImpl();

		model.setId(soapModel.getId());
		model.setCaseNo(soapModel.getCaseNo());
		model.setCipiId(soapModel.getCipiId());
		model.setNajmSlip(soapModel.getNajmSlip());
		model.setNajmSlipName(soapModel.getNajmSlipName());
		model.setDamageEstQuot(soapModel.getDamageEstQuot());
		model.setDamageEstQuotName(soapModel.getDamageEstQuotName());
		model.setBankIban(soapModel.getBankIban());
		model.setBankIbanName(soapModel.getBankIbanName());
		model.setOwnerId(soapModel.getOwnerId());
		model.setOwnerIdName(soapModel.getOwnerIdName());
		model.setClaimRefNo(soapModel.getClaimRefNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<CLMNajmUploads> toModels(
		CLMNajmUploadsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CLMNajmUploads> models = new ArrayList<CLMNajmUploads>(
			soapModels.length);

		for (CLMNajmUploadsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CLMNajmUploadsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CLMNajmUploads.class;
	}

	@Override
	public String getModelClassName() {
		return CLMNajmUploads.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CLMNajmUploads, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CLMNajmUploads, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CLMNajmUploads, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CLMNajmUploads)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CLMNajmUploads, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CLMNajmUploads, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CLMNajmUploads)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CLMNajmUploads, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CLMNajmUploads, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CLMNajmUploads>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CLMNajmUploads.class.getClassLoader(), CLMNajmUploads.class,
			ModelWrapper.class);

		try {
			Constructor<CLMNajmUploads> constructor =
				(Constructor<CLMNajmUploads>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CLMNajmUploads, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CLMNajmUploads, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CLMNajmUploads, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CLMNajmUploads, Object>>();
		Map<String, BiConsumer<CLMNajmUploads, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CLMNajmUploads, ?>>();

		attributeGetterFunctions.put("id", CLMNajmUploads::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<CLMNajmUploads, Integer>)CLMNajmUploads::setId);
		attributeGetterFunctions.put("caseNo", CLMNajmUploads::getCaseNo);
		attributeSetterBiConsumers.put(
			"caseNo",
			(BiConsumer<CLMNajmUploads, String>)CLMNajmUploads::setCaseNo);
		attributeGetterFunctions.put("cipiId", CLMNajmUploads::getCipiId);
		attributeSetterBiConsumers.put(
			"cipiId",
			(BiConsumer<CLMNajmUploads, String>)CLMNajmUploads::setCipiId);
		attributeGetterFunctions.put("najmSlip", CLMNajmUploads::getNajmSlip);
		attributeSetterBiConsumers.put(
			"najmSlip",
			(BiConsumer<CLMNajmUploads, Blob>)CLMNajmUploads::setNajmSlip);
		attributeGetterFunctions.put(
			"najmSlipName", CLMNajmUploads::getNajmSlipName);
		attributeSetterBiConsumers.put(
			"najmSlipName",
			(BiConsumer<CLMNajmUploads, String>)
				CLMNajmUploads::setNajmSlipName);
		attributeGetterFunctions.put(
			"damageEstQuot", CLMNajmUploads::getDamageEstQuot);
		attributeSetterBiConsumers.put(
			"damageEstQuot",
			(BiConsumer<CLMNajmUploads, Blob>)CLMNajmUploads::setDamageEstQuot);
		attributeGetterFunctions.put(
			"damageEstQuotName", CLMNajmUploads::getDamageEstQuotName);
		attributeSetterBiConsumers.put(
			"damageEstQuotName",
			(BiConsumer<CLMNajmUploads, String>)
				CLMNajmUploads::setDamageEstQuotName);
		attributeGetterFunctions.put("bankIban", CLMNajmUploads::getBankIban);
		attributeSetterBiConsumers.put(
			"bankIban",
			(BiConsumer<CLMNajmUploads, Blob>)CLMNajmUploads::setBankIban);
		attributeGetterFunctions.put(
			"bankIbanName", CLMNajmUploads::getBankIbanName);
		attributeSetterBiConsumers.put(
			"bankIbanName",
			(BiConsumer<CLMNajmUploads, String>)
				CLMNajmUploads::setBankIbanName);
		attributeGetterFunctions.put("ownerId", CLMNajmUploads::getOwnerId);
		attributeSetterBiConsumers.put(
			"ownerId",
			(BiConsumer<CLMNajmUploads, Blob>)CLMNajmUploads::setOwnerId);
		attributeGetterFunctions.put(
			"ownerIdName", CLMNajmUploads::getOwnerIdName);
		attributeSetterBiConsumers.put(
			"ownerIdName",
			(BiConsumer<CLMNajmUploads, String>)CLMNajmUploads::setOwnerIdName);
		attributeGetterFunctions.put(
			"claimRefNo", CLMNajmUploads::getClaimRefNo);
		attributeSetterBiConsumers.put(
			"claimRefNo",
			(BiConsumer<CLMNajmUploads, String>)CLMNajmUploads::setClaimRefNo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public String getCaseNo() {
		if (_caseNo == null) {
			return "";
		}
		else {
			return _caseNo;
		}
	}

	@Override
	public void setCaseNo(String caseNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseNo = caseNo;
	}

	@JSON
	@Override
	public String getCipiId() {
		if (_cipiId == null) {
			return "";
		}
		else {
			return _cipiId;
		}
	}

	@Override
	public void setCipiId(String cipiId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cipiId = cipiId;
	}

	@JSON
	@Override
	public Blob getNajmSlip() {
		if (_najmSlipBlobModel == null) {
			try {
				_najmSlipBlobModel =
					CLMNajmUploadsLocalServiceUtil.getNajmSlipBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_najmSlipBlobModel != null) {
			blob = _najmSlipBlobModel.getNajmSlipBlob();
		}

		return blob;
	}

	@Override
	public void setNajmSlip(Blob najmSlip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_najmSlipBlobModel == null) {
			_najmSlipBlobModel = new CLMNajmUploadsNajmSlipBlobModel(
				getPrimaryKey(), najmSlip);
		}
		else {
			_najmSlipBlobModel.setNajmSlipBlob(najmSlip);
		}
	}

	@JSON
	@Override
	public String getNajmSlipName() {
		if (_najmSlipName == null) {
			return "";
		}
		else {
			return _najmSlipName;
		}
	}

	@Override
	public void setNajmSlipName(String najmSlipName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_najmSlipName = najmSlipName;
	}

	@JSON
	@Override
	public Blob getDamageEstQuot() {
		if (_damageEstQuotBlobModel == null) {
			try {
				_damageEstQuotBlobModel =
					CLMNajmUploadsLocalServiceUtil.getDamageEstQuotBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_damageEstQuotBlobModel != null) {
			blob = _damageEstQuotBlobModel.getDamageEstQuotBlob();
		}

		return blob;
	}

	@Override
	public void setDamageEstQuot(Blob damageEstQuot) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_damageEstQuotBlobModel == null) {
			_damageEstQuotBlobModel = new CLMNajmUploadsDamageEstQuotBlobModel(
				getPrimaryKey(), damageEstQuot);
		}
		else {
			_damageEstQuotBlobModel.setDamageEstQuotBlob(damageEstQuot);
		}
	}

	@JSON
	@Override
	public String getDamageEstQuotName() {
		if (_damageEstQuotName == null) {
			return "";
		}
		else {
			return _damageEstQuotName;
		}
	}

	@Override
	public void setDamageEstQuotName(String damageEstQuotName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_damageEstQuotName = damageEstQuotName;
	}

	@JSON
	@Override
	public Blob getBankIban() {
		if (_bankIbanBlobModel == null) {
			try {
				_bankIbanBlobModel =
					CLMNajmUploadsLocalServiceUtil.getBankIbanBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_bankIbanBlobModel != null) {
			blob = _bankIbanBlobModel.getBankIbanBlob();
		}

		return blob;
	}

	@Override
	public void setBankIban(Blob bankIban) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_bankIbanBlobModel == null) {
			_bankIbanBlobModel = new CLMNajmUploadsBankIbanBlobModel(
				getPrimaryKey(), bankIban);
		}
		else {
			_bankIbanBlobModel.setBankIbanBlob(bankIban);
		}
	}

	@JSON
	@Override
	public String getBankIbanName() {
		if (_bankIbanName == null) {
			return "";
		}
		else {
			return _bankIbanName;
		}
	}

	@Override
	public void setBankIbanName(String bankIbanName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankIbanName = bankIbanName;
	}

	@JSON
	@Override
	public Blob getOwnerId() {
		if (_ownerIdBlobModel == null) {
			try {
				_ownerIdBlobModel =
					CLMNajmUploadsLocalServiceUtil.getOwnerIdBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_ownerIdBlobModel != null) {
			blob = _ownerIdBlobModel.getOwnerIdBlob();
		}

		return blob;
	}

	@Override
	public void setOwnerId(Blob ownerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_ownerIdBlobModel == null) {
			_ownerIdBlobModel = new CLMNajmUploadsOwnerIdBlobModel(
				getPrimaryKey(), ownerId);
		}
		else {
			_ownerIdBlobModel.setOwnerIdBlob(ownerId);
		}
	}

	@JSON
	@Override
	public String getOwnerIdName() {
		if (_ownerIdName == null) {
			return "";
		}
		else {
			return _ownerIdName;
		}
	}

	@Override
	public void setOwnerIdName(String ownerIdName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ownerIdName = ownerIdName;
	}

	@JSON
	@Override
	public String getClaimRefNo() {
		if (_claimRefNo == null) {
			return "";
		}
		else {
			return _claimRefNo;
		}
	}

	@Override
	public void setClaimRefNo(String claimRefNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimRefNo = claimRefNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalClaimRefNo() {
		return getColumnOriginalValue("CLAIM_REF_NO");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public CLMNajmUploads toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CLMNajmUploads>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CLMNajmUploadsImpl clmNajmUploadsImpl = new CLMNajmUploadsImpl();

		clmNajmUploadsImpl.setId(getId());
		clmNajmUploadsImpl.setCaseNo(getCaseNo());
		clmNajmUploadsImpl.setCipiId(getCipiId());
		clmNajmUploadsImpl.setNajmSlipName(getNajmSlipName());
		clmNajmUploadsImpl.setDamageEstQuotName(getDamageEstQuotName());
		clmNajmUploadsImpl.setBankIbanName(getBankIbanName());
		clmNajmUploadsImpl.setOwnerIdName(getOwnerIdName());
		clmNajmUploadsImpl.setClaimRefNo(getClaimRefNo());

		clmNajmUploadsImpl.resetOriginalValues();

		return clmNajmUploadsImpl;
	}

	@Override
	public int compareTo(CLMNajmUploads clmNajmUploads) {
		int primaryKey = clmNajmUploads.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CLMNajmUploads)) {
			return false;
		}

		CLMNajmUploads clmNajmUploads = (CLMNajmUploads)object;

		int primaryKey = clmNajmUploads.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_najmSlipBlobModel = null;

		_damageEstQuotBlobModel = null;

		_bankIbanBlobModel = null;

		_ownerIdBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CLMNajmUploads> toCacheModel() {
		CLMNajmUploadsCacheModel clmNajmUploadsCacheModel =
			new CLMNajmUploadsCacheModel();

		clmNajmUploadsCacheModel.id = getId();

		clmNajmUploadsCacheModel.caseNo = getCaseNo();

		String caseNo = clmNajmUploadsCacheModel.caseNo;

		if ((caseNo != null) && (caseNo.length() == 0)) {
			clmNajmUploadsCacheModel.caseNo = null;
		}

		clmNajmUploadsCacheModel.cipiId = getCipiId();

		String cipiId = clmNajmUploadsCacheModel.cipiId;

		if ((cipiId != null) && (cipiId.length() == 0)) {
			clmNajmUploadsCacheModel.cipiId = null;
		}

		clmNajmUploadsCacheModel.najmSlipName = getNajmSlipName();

		String najmSlipName = clmNajmUploadsCacheModel.najmSlipName;

		if ((najmSlipName != null) && (najmSlipName.length() == 0)) {
			clmNajmUploadsCacheModel.najmSlipName = null;
		}

		clmNajmUploadsCacheModel.damageEstQuotName = getDamageEstQuotName();

		String damageEstQuotName = clmNajmUploadsCacheModel.damageEstQuotName;

		if ((damageEstQuotName != null) && (damageEstQuotName.length() == 0)) {
			clmNajmUploadsCacheModel.damageEstQuotName = null;
		}

		clmNajmUploadsCacheModel.bankIbanName = getBankIbanName();

		String bankIbanName = clmNajmUploadsCacheModel.bankIbanName;

		if ((bankIbanName != null) && (bankIbanName.length() == 0)) {
			clmNajmUploadsCacheModel.bankIbanName = null;
		}

		clmNajmUploadsCacheModel.ownerIdName = getOwnerIdName();

		String ownerIdName = clmNajmUploadsCacheModel.ownerIdName;

		if ((ownerIdName != null) && (ownerIdName.length() == 0)) {
			clmNajmUploadsCacheModel.ownerIdName = null;
		}

		clmNajmUploadsCacheModel.claimRefNo = getClaimRefNo();

		String claimRefNo = clmNajmUploadsCacheModel.claimRefNo;

		if ((claimRefNo != null) && (claimRefNo.length() == 0)) {
			clmNajmUploadsCacheModel.claimRefNo = null;
		}

		return clmNajmUploadsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", caseNo=");
		sb.append(getCaseNo());
		sb.append(", cipiId=");
		sb.append(getCipiId());
		sb.append(", najmSlipName=");
		sb.append(getNajmSlipName());
		sb.append(", damageEstQuotName=");
		sb.append(getDamageEstQuotName());
		sb.append(", bankIbanName=");
		sb.append(getBankIbanName());
		sb.append(", ownerIdName=");
		sb.append(getOwnerIdName());
		sb.append(", claimRefNo=");
		sb.append(getClaimRefNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.CLMNajmUploads");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>caseNo</column-name><column-value><![CDATA[");
		sb.append(getCaseNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cipiId</column-name><column-value><![CDATA[");
		sb.append(getCipiId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>najmSlipName</column-name><column-value><![CDATA[");
		sb.append(getNajmSlipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>damageEstQuotName</column-name><column-value><![CDATA[");
		sb.append(getDamageEstQuotName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bankIbanName</column-name><column-value><![CDATA[");
		sb.append(getBankIbanName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerIdName</column-name><column-value><![CDATA[");
		sb.append(getOwnerIdName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>claimRefNo</column-name><column-value><![CDATA[");
		sb.append(getClaimRefNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CLMNajmUploads>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private int _id;
	private String _caseNo;
	private String _cipiId;
	private CLMNajmUploadsNajmSlipBlobModel _najmSlipBlobModel;
	private String _najmSlipName;
	private CLMNajmUploadsDamageEstQuotBlobModel _damageEstQuotBlobModel;
	private String _damageEstQuotName;
	private CLMNajmUploadsBankIbanBlobModel _bankIbanBlobModel;
	private String _bankIbanName;
	private CLMNajmUploadsOwnerIdBlobModel _ownerIdBlobModel;
	private String _ownerIdName;
	private String _claimRefNo;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CLMNajmUploads, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CLMNajmUploads)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("FILE_ID", _id);
		_columnOriginalValues.put("CASE_NO", _caseNo);
		_columnOriginalValues.put("CIPI_ID", _cipiId);
		_columnOriginalValues.put("NAJM_SLIP_NAME", _najmSlipName);
		_columnOriginalValues.put("DAMAGE_EST_QUOT_NAME", _damageEstQuotName);
		_columnOriginalValues.put("BANK_IBAN_NAME", _bankIbanName);
		_columnOriginalValues.put("OWNER_ID_NAME", _ownerIdName);
		_columnOriginalValues.put("CLAIM_REF_NO", _claimRefNo);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("FILE_ID", "id");
		attributeNames.put("CASE_NO", "caseNo");
		attributeNames.put("CIPI_ID", "cipiId");
		attributeNames.put("NAJM_SLIP", "najmSlip");
		attributeNames.put("NAJM_SLIP_NAME", "najmSlipName");
		attributeNames.put("DAMAGE_EST_QUOT", "damageEstQuot");
		attributeNames.put("DAMAGE_EST_QUOT_NAME", "damageEstQuotName");
		attributeNames.put("BANK_IBAN", "bankIban");
		attributeNames.put("BANK_IBAN_NAME", "bankIbanName");
		attributeNames.put("OWNER_ID", "ownerId");
		attributeNames.put("OWNER_ID_NAME", "ownerIdName");
		attributeNames.put("CLAIM_REF_NO", "claimRefNo");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("FILE_ID", 1L);

		columnBitmasks.put("CASE_NO", 2L);

		columnBitmasks.put("CIPI_ID", 4L);

		columnBitmasks.put("NAJM_SLIP", 8L);

		columnBitmasks.put("NAJM_SLIP_NAME", 16L);

		columnBitmasks.put("DAMAGE_EST_QUOT", 32L);

		columnBitmasks.put("DAMAGE_EST_QUOT_NAME", 64L);

		columnBitmasks.put("BANK_IBAN", 128L);

		columnBitmasks.put("BANK_IBAN_NAME", 256L);

		columnBitmasks.put("OWNER_ID", 512L);

		columnBitmasks.put("OWNER_ID_NAME", 1024L);

		columnBitmasks.put("CLAIM_REF_NO", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CLMNajmUploads _escapedModel;

}