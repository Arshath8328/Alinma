/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.ServiceRequestAttachments;
import com.ejada.atmc.acl.db.model.ServiceRequestAttachmentsFILE_CONTENTBlobModel;
import com.ejada.atmc.acl.db.model.ServiceRequestAttachmentsModel;
import com.ejada.atmc.acl.db.model.ServiceRequestAttachmentsSoap;
import com.ejada.atmc.acl.db.service.ServiceRequestAttachmentsLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ServiceRequestAttachments service. Represents a row in the &quot;SERVICE_REQUEST_ATTACHMENTS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ServiceRequestAttachmentsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceRequestAttachmentsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServiceRequestAttachmentsImpl
 * @generated
 */
@JSON(strict = true)
public class ServiceRequestAttachmentsModelImpl
	extends BaseModelImpl<ServiceRequestAttachments>
	implements ServiceRequestAttachmentsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service request attachments model instance should use the <code>ServiceRequestAttachments</code> interface instead.
	 */
	public static final String TABLE_NAME = "SERVICE_REQUEST_ATTACHMENTS";

	public static final Object[][] TABLE_COLUMNS = {
		{"FILE_ID", Types.BIGINT}, {"REFERENCE_NO", Types.VARCHAR},
		{"ACTION_ID", Types.VARCHAR}, {"FILE_CONTENT", Types.BLOB},
		{"FILE_NAME", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FILE_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("REFERENCE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTION_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FILE_CONTENT", Types.BLOB);
		TABLE_COLUMNS_MAP.put("FILE_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SERVICE_REQUEST_ATTACHMENTS (FILE_ID LONG not null primary key,REFERENCE_NO VARCHAR(75) null,ACTION_ID VARCHAR(75) null,FILE_CONTENT BLOB,FILE_NAME VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table SERVICE_REQUEST_ATTACHMENTS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY serviceRequestAttachments.FILE_ID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SERVICE_REQUEST_ATTACHMENTS.FILE_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ACTION_ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long REFERENCE_NO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FILE_ID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ServiceRequestAttachments toModel(
		ServiceRequestAttachmentsSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		ServiceRequestAttachments model = new ServiceRequestAttachmentsImpl();

		model.setFILE_ID(soapModel.getFILE_ID());
		model.setREFERENCE_NO(soapModel.getREFERENCE_NO());
		model.setACTION_ID(soapModel.getACTION_ID());
		model.setFILE_CONTENT(soapModel.getFILE_CONTENT());
		model.setFILE_NAME(soapModel.getFILE_NAME());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ServiceRequestAttachments> toModels(
		ServiceRequestAttachmentsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ServiceRequestAttachments> models =
			new ArrayList<ServiceRequestAttachments>(soapModels.length);

		for (ServiceRequestAttachmentsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ServiceRequestAttachmentsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _FILE_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFILE_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _FILE_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceRequestAttachments.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceRequestAttachments.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ServiceRequestAttachments, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ServiceRequestAttachments, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceRequestAttachments, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ServiceRequestAttachments)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ServiceRequestAttachments, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ServiceRequestAttachments, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ServiceRequestAttachments)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ServiceRequestAttachments, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ServiceRequestAttachments, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ServiceRequestAttachments>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ServiceRequestAttachments.class.getClassLoader(),
			ServiceRequestAttachments.class, ModelWrapper.class);

		try {
			Constructor<ServiceRequestAttachments> constructor =
				(Constructor<ServiceRequestAttachments>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<ServiceRequestAttachments, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<ServiceRequestAttachments, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<ServiceRequestAttachments, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ServiceRequestAttachments, Object>>();
		Map<String, BiConsumer<ServiceRequestAttachments, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ServiceRequestAttachments, ?>>();

		attributeGetterFunctions.put(
			"FILE_ID", ServiceRequestAttachments::getFILE_ID);
		attributeSetterBiConsumers.put(
			"FILE_ID",
			(BiConsumer<ServiceRequestAttachments, Long>)
				ServiceRequestAttachments::setFILE_ID);
		attributeGetterFunctions.put(
			"REFERENCE_NO", ServiceRequestAttachments::getREFERENCE_NO);
		attributeSetterBiConsumers.put(
			"REFERENCE_NO",
			(BiConsumer<ServiceRequestAttachments, String>)
				ServiceRequestAttachments::setREFERENCE_NO);
		attributeGetterFunctions.put(
			"ACTION_ID", ServiceRequestAttachments::getACTION_ID);
		attributeSetterBiConsumers.put(
			"ACTION_ID",
			(BiConsumer<ServiceRequestAttachments, String>)
				ServiceRequestAttachments::setACTION_ID);
		attributeGetterFunctions.put(
			"FILE_CONTENT", ServiceRequestAttachments::getFILE_CONTENT);
		attributeSetterBiConsumers.put(
			"FILE_CONTENT",
			(BiConsumer<ServiceRequestAttachments, Blob>)
				ServiceRequestAttachments::setFILE_CONTENT);
		attributeGetterFunctions.put(
			"FILE_NAME", ServiceRequestAttachments::getFILE_NAME);
		attributeSetterBiConsumers.put(
			"FILE_NAME",
			(BiConsumer<ServiceRequestAttachments, String>)
				ServiceRequestAttachments::setFILE_NAME);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFILE_ID() {
		return _FILE_ID;
	}

	@Override
	public void setFILE_ID(long FILE_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_FILE_ID = FILE_ID;
	}

	@JSON
	@Override
	public String getREFERENCE_NO() {
		if (_REFERENCE_NO == null) {
			return "";
		}
		else {
			return _REFERENCE_NO;
		}
	}

	@Override
	public void setREFERENCE_NO(String REFERENCE_NO) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_REFERENCE_NO = REFERENCE_NO;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalREFERENCE_NO() {
		return getColumnOriginalValue("REFERENCE_NO");
	}

	@JSON
	@Override
	public String getACTION_ID() {
		if (_ACTION_ID == null) {
			return "";
		}
		else {
			return _ACTION_ID;
		}
	}

	@Override
	public void setACTION_ID(String ACTION_ID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ACTION_ID = ACTION_ID;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalACTION_ID() {
		return getColumnOriginalValue("ACTION_ID");
	}

	@JSON
	@Override
	public Blob getFILE_CONTENT() {
		if (_FILE_CONTENTBlobModel == null) {
			try {
				_FILE_CONTENTBlobModel =
					ServiceRequestAttachmentsLocalServiceUtil.
						getFILE_CONTENTBlobModel(getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_FILE_CONTENTBlobModel != null) {
			blob = _FILE_CONTENTBlobModel.getFILE_CONTENTBlob();
		}

		return blob;
	}

	@Override
	public void setFILE_CONTENT(Blob FILE_CONTENT) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_FILE_CONTENTBlobModel == null) {
			_FILE_CONTENTBlobModel =
				new ServiceRequestAttachmentsFILE_CONTENTBlobModel(
					getPrimaryKey(), FILE_CONTENT);
		}
		else {
			_FILE_CONTENTBlobModel.setFILE_CONTENTBlob(FILE_CONTENT);
		}
	}

	@JSON
	@Override
	public String getFILE_NAME() {
		if (_FILE_NAME == null) {
			return "";
		}
		else {
			return _FILE_NAME;
		}
	}

	@Override
	public void setFILE_NAME(String FILE_NAME) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_FILE_NAME = FILE_NAME;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ServiceRequestAttachments.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceRequestAttachments toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ServiceRequestAttachments>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceRequestAttachmentsImpl serviceRequestAttachmentsImpl =
			new ServiceRequestAttachmentsImpl();

		serviceRequestAttachmentsImpl.setFILE_ID(getFILE_ID());
		serviceRequestAttachmentsImpl.setREFERENCE_NO(getREFERENCE_NO());
		serviceRequestAttachmentsImpl.setACTION_ID(getACTION_ID());
		serviceRequestAttachmentsImpl.setFILE_NAME(getFILE_NAME());

		serviceRequestAttachmentsImpl.resetOriginalValues();

		return serviceRequestAttachmentsImpl;
	}

	@Override
	public int compareTo(ServiceRequestAttachments serviceRequestAttachments) {
		long primaryKey = serviceRequestAttachments.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ServiceRequestAttachments)) {
			return false;
		}

		ServiceRequestAttachments serviceRequestAttachments =
			(ServiceRequestAttachments)object;

		long primaryKey = serviceRequestAttachments.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_FILE_CONTENTBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceRequestAttachments> toCacheModel() {
		ServiceRequestAttachmentsCacheModel
			serviceRequestAttachmentsCacheModel =
				new ServiceRequestAttachmentsCacheModel();

		serviceRequestAttachmentsCacheModel.FILE_ID = getFILE_ID();

		serviceRequestAttachmentsCacheModel.REFERENCE_NO = getREFERENCE_NO();

		String REFERENCE_NO = serviceRequestAttachmentsCacheModel.REFERENCE_NO;

		if ((REFERENCE_NO != null) && (REFERENCE_NO.length() == 0)) {
			serviceRequestAttachmentsCacheModel.REFERENCE_NO = null;
		}

		serviceRequestAttachmentsCacheModel.ACTION_ID = getACTION_ID();

		String ACTION_ID = serviceRequestAttachmentsCacheModel.ACTION_ID;

		if ((ACTION_ID != null) && (ACTION_ID.length() == 0)) {
			serviceRequestAttachmentsCacheModel.ACTION_ID = null;
		}

		serviceRequestAttachmentsCacheModel.FILE_NAME = getFILE_NAME();

		String FILE_NAME = serviceRequestAttachmentsCacheModel.FILE_NAME;

		if ((FILE_NAME != null) && (FILE_NAME.length() == 0)) {
			serviceRequestAttachmentsCacheModel.FILE_NAME = null;
		}

		return serviceRequestAttachmentsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{FILE_ID=");
		sb.append(getFILE_ID());
		sb.append(", REFERENCE_NO=");
		sb.append(getREFERENCE_NO());
		sb.append(", ACTION_ID=");
		sb.append(getACTION_ID());
		sb.append(", FILE_NAME=");
		sb.append(getFILE_NAME());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.ServiceRequestAttachments");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>FILE_ID</column-name><column-value><![CDATA[");
		sb.append(getFILE_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>REFERENCE_NO</column-name><column-value><![CDATA[");
		sb.append(getREFERENCE_NO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACTION_ID</column-name><column-value><![CDATA[");
		sb.append(getACTION_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FILE_NAME</column-name><column-value><![CDATA[");
		sb.append(getFILE_NAME());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, ServiceRequestAttachments>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private long _FILE_ID;

	private String _REFERENCE_NO;

	private String _ACTION_ID;

	private ServiceRequestAttachmentsFILE_CONTENTBlobModel
		_FILE_CONTENTBlobModel;

	private String _FILE_NAME;

	public <T> T getColumnValue(String columnName) {
		Function<ServiceRequestAttachments, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ServiceRequestAttachments)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("FILE_ID", _FILE_ID);
		_columnOriginalValues.put("REFERENCE_NO", _REFERENCE_NO);
		_columnOriginalValues.put("ACTION_ID", _ACTION_ID);
		_columnOriginalValues.put("FILE_NAME", _FILE_NAME);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("FILE_ID", 1L);

		columnBitmasks.put("REFERENCE_NO", 2L);

		columnBitmasks.put("ACTION_ID", 4L);

		columnBitmasks.put("FILE_CONTENT", 8L);

		columnBitmasks.put("FILE_NAME", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ServiceRequestAttachments _escapedModel;

}