/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.ODMuroorUploads;
import com.ejada.atmc.acl.db.model.ODMuroorUploadsDriverLicenseBlobModel;
import com.ejada.atmc.acl.db.model.ODMuroorUploadsModel;
import com.ejada.atmc.acl.db.model.ODMuroorUploadsPolicyCopyBlobModel;
import com.ejada.atmc.acl.db.model.ODMuroorUploadsSoap;
import com.ejada.atmc.acl.db.model.ODMuroorUploadsVehRegistBlobModel;
import com.ejada.atmc.acl.db.service.ODMuroorUploadsLocalServiceUtil;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ODMuroorUploads service. Represents a row in the &quot;CLM_MUROOR_OD_UPLOADS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ODMuroorUploadsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ODMuroorUploadsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ODMuroorUploadsImpl
 * @generated
 */
@JSON(strict = true)
public class ODMuroorUploadsModelImpl
	extends BaseModelImpl<ODMuroorUploads> implements ODMuroorUploadsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a od muroor uploads model instance should use the <code>ODMuroorUploads</code> interface instead.
	 */
	public static final String TABLE_NAME = "CLM_MUROOR_OD_UPLOADS";

	public static final Object[][] TABLE_COLUMNS = {
		{"FILE_ID", Types.INTEGER}, {"CLM_INTM_NO", Types.VARCHAR},
		{"IQAMA_ID", Types.VARCHAR}, {"DRIVER_LICENSE", Types.BLOB},
		{"DRIVER_LICENSE_NAME", Types.VARCHAR},
		{"VEH_REGISTRATION", Types.BLOB},
		{"VEH_REGISTRATION_NAME", Types.VARCHAR}, {"POLICY_COPY", Types.BLOB},
		{"POLICY_COPY_NAME", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("FILE_ID", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CLM_INTM_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IQAMA_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_LICENSE", Types.BLOB);
		TABLE_COLUMNS_MAP.put("DRIVER_LICENSE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEH_REGISTRATION", Types.BLOB);
		TABLE_COLUMNS_MAP.put("VEH_REGISTRATION_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICY_COPY", Types.BLOB);
		TABLE_COLUMNS_MAP.put("POLICY_COPY_NAME", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CLM_MUROOR_OD_UPLOADS (FILE_ID INTEGER not null primary key,CLM_INTM_NO VARCHAR(75) null,IQAMA_ID VARCHAR(75) null,DRIVER_LICENSE BLOB,DRIVER_LICENSE_NAME VARCHAR(75) null,VEH_REGISTRATION BLOB,VEH_REGISTRATION_NAME VARCHAR(75) null,POLICY_COPY BLOB,POLICY_COPY_NAME VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table CLM_MUROOR_OD_UPLOADS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY odMuroorUploads.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CLM_MUROOR_OD_UPLOADS.FILE_ID ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CLAIMINTIMATIONNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ODMuroorUploads toModel(ODMuroorUploadsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ODMuroorUploads model = new ODMuroorUploadsImpl();

		model.setId(soapModel.getId());
		model.setClaimIntimationNo(soapModel.getClaimIntimationNo());
		model.setIqamaId(soapModel.getIqamaId());
		model.setDriverLicense(soapModel.getDriverLicense());
		model.setDriverLicenseName(soapModel.getDriverLicenseName());
		model.setVehRegist(soapModel.getVehRegist());
		model.setVehRegistName(soapModel.getVehRegistName());
		model.setPolicyCopy(soapModel.getPolicyCopy());
		model.setPolicyCopyName(soapModel.getPolicyCopyName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ODMuroorUploads> toModels(
		ODMuroorUploadsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ODMuroorUploads> models = new ArrayList<ODMuroorUploads>(
			soapModels.length);

		for (ODMuroorUploadsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ODMuroorUploadsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ODMuroorUploads.class;
	}

	@Override
	public String getModelClassName() {
		return ODMuroorUploads.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ODMuroorUploads, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ODMuroorUploads, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ODMuroorUploads, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ODMuroorUploads)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ODMuroorUploads, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ODMuroorUploads, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ODMuroorUploads)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ODMuroorUploads, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ODMuroorUploads, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ODMuroorUploads>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ODMuroorUploads.class.getClassLoader(), ODMuroorUploads.class,
			ModelWrapper.class);

		try {
			Constructor<ODMuroorUploads> constructor =
				(Constructor<ODMuroorUploads>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ODMuroorUploads, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ODMuroorUploads, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ODMuroorUploads, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ODMuroorUploads, Object>>();
		Map<String, BiConsumer<ODMuroorUploads, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ODMuroorUploads, ?>>();

		attributeGetterFunctions.put("id", ODMuroorUploads::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<ODMuroorUploads, Integer>)ODMuroorUploads::setId);
		attributeGetterFunctions.put(
			"claimIntimationNo", ODMuroorUploads::getClaimIntimationNo);
		attributeSetterBiConsumers.put(
			"claimIntimationNo",
			(BiConsumer<ODMuroorUploads, String>)
				ODMuroorUploads::setClaimIntimationNo);
		attributeGetterFunctions.put("iqamaId", ODMuroorUploads::getIqamaId);
		attributeSetterBiConsumers.put(
			"iqamaId",
			(BiConsumer<ODMuroorUploads, String>)ODMuroorUploads::setIqamaId);
		attributeGetterFunctions.put(
			"driverLicense", ODMuroorUploads::getDriverLicense);
		attributeSetterBiConsumers.put(
			"driverLicense",
			(BiConsumer<ODMuroorUploads, Blob>)
				ODMuroorUploads::setDriverLicense);
		attributeGetterFunctions.put(
			"driverLicenseName", ODMuroorUploads::getDriverLicenseName);
		attributeSetterBiConsumers.put(
			"driverLicenseName",
			(BiConsumer<ODMuroorUploads, String>)
				ODMuroorUploads::setDriverLicenseName);
		attributeGetterFunctions.put(
			"vehRegist", ODMuroorUploads::getVehRegist);
		attributeSetterBiConsumers.put(
			"vehRegist",
			(BiConsumer<ODMuroorUploads, Blob>)ODMuroorUploads::setVehRegist);
		attributeGetterFunctions.put(
			"vehRegistName", ODMuroorUploads::getVehRegistName);
		attributeSetterBiConsumers.put(
			"vehRegistName",
			(BiConsumer<ODMuroorUploads, String>)
				ODMuroorUploads::setVehRegistName);
		attributeGetterFunctions.put(
			"policyCopy", ODMuroorUploads::getPolicyCopy);
		attributeSetterBiConsumers.put(
			"policyCopy",
			(BiConsumer<ODMuroorUploads, Blob>)ODMuroorUploads::setPolicyCopy);
		attributeGetterFunctions.put(
			"policyCopyName", ODMuroorUploads::getPolicyCopyName);
		attributeSetterBiConsumers.put(
			"policyCopyName",
			(BiConsumer<ODMuroorUploads, String>)
				ODMuroorUploads::setPolicyCopyName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public String getClaimIntimationNo() {
		if (_claimIntimationNo == null) {
			return "";
		}
		else {
			return _claimIntimationNo;
		}
	}

	@Override
	public void setClaimIntimationNo(String claimIntimationNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimIntimationNo = claimIntimationNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalClaimIntimationNo() {
		return getColumnOriginalValue("CLM_INTM_NO");
	}

	@JSON
	@Override
	public String getIqamaId() {
		if (_iqamaId == null) {
			return "";
		}
		else {
			return _iqamaId;
		}
	}

	@Override
	public void setIqamaId(String iqamaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_iqamaId = iqamaId;
	}

	@JSON
	@Override
	public Blob getDriverLicense() {
		if (_driverLicenseBlobModel == null) {
			try {
				_driverLicenseBlobModel =
					ODMuroorUploadsLocalServiceUtil.getDriverLicenseBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_driverLicenseBlobModel != null) {
			blob = _driverLicenseBlobModel.getDriverLicenseBlob();
		}

		return blob;
	}

	@Override
	public void setDriverLicense(Blob driverLicense) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_driverLicenseBlobModel == null) {
			_driverLicenseBlobModel = new ODMuroorUploadsDriverLicenseBlobModel(
				getPrimaryKey(), driverLicense);
		}
		else {
			_driverLicenseBlobModel.setDriverLicenseBlob(driverLicense);
		}
	}

	@JSON
	@Override
	public String getDriverLicenseName() {
		if (_driverLicenseName == null) {
			return "";
		}
		else {
			return _driverLicenseName;
		}
	}

	@Override
	public void setDriverLicenseName(String driverLicenseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverLicenseName = driverLicenseName;
	}

	@JSON
	@Override
	public Blob getVehRegist() {
		if (_vehRegistBlobModel == null) {
			try {
				_vehRegistBlobModel =
					ODMuroorUploadsLocalServiceUtil.getVehRegistBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_vehRegistBlobModel != null) {
			blob = _vehRegistBlobModel.getVehRegistBlob();
		}

		return blob;
	}

	@Override
	public void setVehRegist(Blob vehRegist) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_vehRegistBlobModel == null) {
			_vehRegistBlobModel = new ODMuroorUploadsVehRegistBlobModel(
				getPrimaryKey(), vehRegist);
		}
		else {
			_vehRegistBlobModel.setVehRegistBlob(vehRegist);
		}
	}

	@JSON
	@Override
	public String getVehRegistName() {
		if (_vehRegistName == null) {
			return "";
		}
		else {
			return _vehRegistName;
		}
	}

	@Override
	public void setVehRegistName(String vehRegistName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehRegistName = vehRegistName;
	}

	@JSON
	@Override
	public Blob getPolicyCopy() {
		if (_policyCopyBlobModel == null) {
			try {
				_policyCopyBlobModel =
					ODMuroorUploadsLocalServiceUtil.getPolicyCopyBlobModel(
						getPrimaryKey());
			}
			catch (Exception exception) {
			}
		}

		Blob blob = null;

		if (_policyCopyBlobModel != null) {
			blob = _policyCopyBlobModel.getPolicyCopyBlob();
		}

		return blob;
	}

	@Override
	public void setPolicyCopy(Blob policyCopy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (_policyCopyBlobModel == null) {
			_policyCopyBlobModel = new ODMuroorUploadsPolicyCopyBlobModel(
				getPrimaryKey(), policyCopy);
		}
		else {
			_policyCopyBlobModel.setPolicyCopyBlob(policyCopy);
		}
	}

	@JSON
	@Override
	public String getPolicyCopyName() {
		if (_policyCopyName == null) {
			return "";
		}
		else {
			return _policyCopyName;
		}
	}

	@Override
	public void setPolicyCopyName(String policyCopyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyCopyName = policyCopyName;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ODMuroorUploads toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ODMuroorUploads>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ODMuroorUploadsImpl odMuroorUploadsImpl = new ODMuroorUploadsImpl();

		odMuroorUploadsImpl.setId(getId());
		odMuroorUploadsImpl.setClaimIntimationNo(getClaimIntimationNo());
		odMuroorUploadsImpl.setIqamaId(getIqamaId());
		odMuroorUploadsImpl.setDriverLicenseName(getDriverLicenseName());
		odMuroorUploadsImpl.setVehRegistName(getVehRegistName());
		odMuroorUploadsImpl.setPolicyCopyName(getPolicyCopyName());

		odMuroorUploadsImpl.resetOriginalValues();

		return odMuroorUploadsImpl;
	}

	@Override
	public int compareTo(ODMuroorUploads odMuroorUploads) {
		int primaryKey = odMuroorUploads.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ODMuroorUploads)) {
			return false;
		}

		ODMuroorUploads odMuroorUploads = (ODMuroorUploads)object;

		int primaryKey = odMuroorUploads.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_driverLicenseBlobModel = null;

		_vehRegistBlobModel = null;

		_policyCopyBlobModel = null;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ODMuroorUploads> toCacheModel() {
		ODMuroorUploadsCacheModel odMuroorUploadsCacheModel =
			new ODMuroorUploadsCacheModel();

		odMuroorUploadsCacheModel.id = getId();

		odMuroorUploadsCacheModel.claimIntimationNo = getClaimIntimationNo();

		String claimIntimationNo = odMuroorUploadsCacheModel.claimIntimationNo;

		if ((claimIntimationNo != null) && (claimIntimationNo.length() == 0)) {
			odMuroorUploadsCacheModel.claimIntimationNo = null;
		}

		odMuroorUploadsCacheModel.iqamaId = getIqamaId();

		String iqamaId = odMuroorUploadsCacheModel.iqamaId;

		if ((iqamaId != null) && (iqamaId.length() == 0)) {
			odMuroorUploadsCacheModel.iqamaId = null;
		}

		odMuroorUploadsCacheModel.driverLicenseName = getDriverLicenseName();

		String driverLicenseName = odMuroorUploadsCacheModel.driverLicenseName;

		if ((driverLicenseName != null) && (driverLicenseName.length() == 0)) {
			odMuroorUploadsCacheModel.driverLicenseName = null;
		}

		odMuroorUploadsCacheModel.vehRegistName = getVehRegistName();

		String vehRegistName = odMuroorUploadsCacheModel.vehRegistName;

		if ((vehRegistName != null) && (vehRegistName.length() == 0)) {
			odMuroorUploadsCacheModel.vehRegistName = null;
		}

		odMuroorUploadsCacheModel.policyCopyName = getPolicyCopyName();

		String policyCopyName = odMuroorUploadsCacheModel.policyCopyName;

		if ((policyCopyName != null) && (policyCopyName.length() == 0)) {
			odMuroorUploadsCacheModel.policyCopyName = null;
		}

		return odMuroorUploadsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", claimIntimationNo=");
		sb.append(getClaimIntimationNo());
		sb.append(", iqamaId=");
		sb.append(getIqamaId());
		sb.append(", driverLicenseName=");
		sb.append(getDriverLicenseName());
		sb.append(", vehRegistName=");
		sb.append(getVehRegistName());
		sb.append(", policyCopyName=");
		sb.append(getPolicyCopyName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ejada.atmc.acl.db.model.ODMuroorUploads");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>claimIntimationNo</column-name><column-value><![CDATA[");
		sb.append(getClaimIntimationNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iqamaId</column-name><column-value><![CDATA[");
		sb.append(getIqamaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>driverLicenseName</column-name><column-value><![CDATA[");
		sb.append(getDriverLicenseName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehRegistName</column-name><column-value><![CDATA[");
		sb.append(getVehRegistName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>policyCopyName</column-name><column-value><![CDATA[");
		sb.append(getPolicyCopyName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ODMuroorUploads>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private int _id;
	private String _claimIntimationNo;
	private String _iqamaId;
	private ODMuroorUploadsDriverLicenseBlobModel _driverLicenseBlobModel;
	private String _driverLicenseName;
	private ODMuroorUploadsVehRegistBlobModel _vehRegistBlobModel;
	private String _vehRegistName;
	private ODMuroorUploadsPolicyCopyBlobModel _policyCopyBlobModel;
	private String _policyCopyName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ODMuroorUploads, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ODMuroorUploads)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("FILE_ID", _id);
		_columnOriginalValues.put("CLM_INTM_NO", _claimIntimationNo);
		_columnOriginalValues.put("IQAMA_ID", _iqamaId);
		_columnOriginalValues.put("DRIVER_LICENSE_NAME", _driverLicenseName);
		_columnOriginalValues.put("VEH_REGISTRATION_NAME", _vehRegistName);
		_columnOriginalValues.put("POLICY_COPY_NAME", _policyCopyName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("FILE_ID", "id");
		attributeNames.put("CLM_INTM_NO", "claimIntimationNo");
		attributeNames.put("IQAMA_ID", "iqamaId");
		attributeNames.put("DRIVER_LICENSE", "driverLicense");
		attributeNames.put("DRIVER_LICENSE_NAME", "driverLicenseName");
		attributeNames.put("VEH_REGISTRATION", "vehRegist");
		attributeNames.put("VEH_REGISTRATION_NAME", "vehRegistName");
		attributeNames.put("POLICY_COPY", "policyCopy");
		attributeNames.put("POLICY_COPY_NAME", "policyCopyName");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("FILE_ID", 1L);

		columnBitmasks.put("CLM_INTM_NO", 2L);

		columnBitmasks.put("IQAMA_ID", 4L);

		columnBitmasks.put("DRIVER_LICENSE", 8L);

		columnBitmasks.put("DRIVER_LICENSE_NAME", 16L);

		columnBitmasks.put("VEH_REGISTRATION", 32L);

		columnBitmasks.put("VEH_REGISTRATION_NAME", 64L);

		columnBitmasks.put("POLICY_COPY", 128L);

		columnBitmasks.put("POLICY_COPY_NAME", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ODMuroorUploads _escapedModel;

}