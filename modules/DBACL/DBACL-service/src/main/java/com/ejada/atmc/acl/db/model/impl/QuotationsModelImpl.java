/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.Quotations;
import com.ejada.atmc.acl.db.model.QuotationsModel;
import com.ejada.atmc.acl.db.model.QuotationsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Quotations service. Represents a row in the &quot;EJD_QUOTATIONS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>QuotationsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuotationsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuotationsImpl
 * @generated
 */
@JSON(strict = true)
public class QuotationsModelImpl
	extends BaseModelImpl<Quotations> implements QuotationsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quotations model instance should use the <code>Quotations</code> interface instead.
	 */
	public static final String TABLE_NAME = "EJD_QUOTATIONS";

	public static final Object[][] TABLE_COLUMNS = {
		{"ADDRESS_ADD_NUMBER", Types.BIGINT}, {"ADDRESS_BLDG_NO", Types.BIGINT},
		{"ADDRESS_DISTRICT", Types.VARCHAR}, {"ADDRESS_STREET", Types.VARCHAR},
		{"ADDRESS_UNIT_NO", Types.BIGINT}, {"ADDRESS_ZIPCODE", Types.BIGINT},
		{"ADD_COVER", Types.VARCHAR}, {"ADD_DRIVER", Types.VARCHAR},
		{"AGENCY_REPAIR", Types.VARCHAR}, {"CITY", Types.VARCHAR},
		{"DEDUCTIBLE_VALUE", Types.VARCHAR}, {"INSURED_DOB", Types.TIMESTAMP},
		{"INSURED_EMAIL", Types.VARCHAR}, {"INSURED_GENDER", Types.VARCHAR},
		{"INSURED_ID", Types.BIGINT}, {"INSURED_ID_TYPE", Types.BIGINT},
		{"INSURED_MOBILE", Types.BIGINT}, {"INSURED_NAME", Types.VARCHAR},
		{"INSURED_NATIONALITY", Types.VARCHAR},
		{"INSURED_EDUCATION", Types.VARCHAR},
		{"INSURED_MARITAL_STATUS", Types.VARCHAR},
		{"INSURED_NO_CHILD_UNDER_16", Types.BIGINT},
		{"LOYALTY_DISCOUNT", Types.VARCHAR}, {"NCD_YEARS", Types.BIGINT},
		{"PAYMENT_AMOUNT", Types.BIGINT}, {"PAYMENT_METHOD", Types.VARCHAR},
		{"PAYMENT_REF_NO", Types.VARCHAR},
		{"POLICY_EFFECTIVE_FROM_NO", Types.TIMESTAMP},
		{"POLICY_EFFECTIVE_TO", Types.TIMESTAMP},
		{"POLICY_EFF_DATE", Types.TIMESTAMP},
		{"POLICY_ISSUE_DATE", Types.TIMESTAMP}, {"POLICY_NO", Types.VARCHAR},
		{"POLICY_REFERENCE_NO", Types.VARCHAR},
		{"POLICY_STATUS_CODE", Types.VARCHAR}, {"PRODUCT_CODE", Types.VARCHAR},
		{"PURPOSE_OF_VEHICLE", Types.VARCHAR}, {"QUOTATIONS_ID", Types.BIGINT},
		{"REFERENCE_NO", Types.VARCHAR}, {"SOURCE", Types.VARCHAR},
		{"TRANSACTION", Types.VARCHAR}, {"VEHICLE_BODY_TYPE", Types.VARCHAR},
		{"VEHICLE_CAPACITY", Types.BIGINT},
		{"VEHICLE_CHASSIS_NO", Types.VARCHAR}, {"VEHICLE_COLOR", Types.VARCHAR},
		{"VEHICLE_CYLINDER", Types.BIGINT},
		{"VEHICLE_EST_EXP_DATE", Types.TIMESTAMP}, {"VEHICLE_ID", Types.BIGINT},
		{"VEHICLE_ID_TYPE", Types.BIGINT}, {"VEHICLE_MAKE", Types.VARCHAR},
		{"VEHICLE_MFG_YEAR", Types.BIGINT}, {"VEHICLE_MODEL", Types.VARCHAR},
		{"VEHICLE_PLATE_L1", Types.VARCHAR},
		{"VEHICLE_PLATE_L2", Types.VARCHAR},
		{"VEHICLE_PLATE_L3", Types.VARCHAR}, {"VEHICLE_PLATE_NO", Types.BIGINT},
		{"VEHICLE_PLATE_TYPE", Types.VARCHAR}, {"VEHICLE_VALUE", Types.BIGINT},
		{"VEHICLE_WEIGHT", Types.BIGINT}, {"VEHICLE_CITY", Types.VARCHAR},
		{"VEHICLE_CURRENT_MILE", Types.BIGINT},
		{"VEHICLE_LOWER_MILE", Types.BIGINT},
		{"VEHICLE_UPPER_MILE", Types.BIGINT},
		{"VEHICLE_NIGHT_LOC", Types.VARCHAR},
		{"VEHICLE_ENGINE_SIZE", Types.VARCHAR},
		{"VEHICLE_TRANS_TYPE", Types.VARCHAR},
		{"VEHICLE_AXLE_WEIGHT", Types.BIGINT},
		{"VEHICLE_CAR_MODS", Types.VARCHAR}, {"VEHICLE_SPECS", Types.VARCHAR},
		{"OCCUPATION_CODE", Types.VARCHAR}, {"INSURED_IBAN", Types.VARCHAR},
		{"INSURE_DOB_H", Types.VARCHAR}, {"NET_PREMIUM", Types.DOUBLE},
		{"NCD_DISCOUNT_AMOUNT", Types.DOUBLE},
		{"LOYALTY_DISCOUNT_AMOUNT", Types.DOUBLE},
		{"NCD_DISCOUNT_PER", Types.DOUBLE},
		{"LOYALTY_DISCOUNT_PER", Types.DOUBLE},
		{"LOADING_AMOUNT", Types.DOUBLE}, {"POLICY_TAXES", Types.DOUBLE},
		{"POLICY_FEES", Types.DOUBLE}, {"TOTAL_COVER_PREMIUM", Types.DOUBLE},
		{"GROSS_PREMIUM", Types.DOUBLE}, {"EXIST_POL_NO", Types.VARCHAR},
		{"EXIST_COMP_NAME", Types.VARCHAR}, {"EXIST_EXP_DATE", Types.VARCHAR},
		{"POLICY_STATUS_MESSAGE", Types.VARCHAR},
		{"YAKEEN_REFERENCE_NO", Types.BIGINT},
		{"QUOTE_SUBMISSION_DATE", Types.TIMESTAMP},
		{"QUOTE_STATUS", Types.VARCHAR}, {"SAEED_SERVICE", Types.VARCHAR},
		{"DRIVER_ACCIDENTS", Types.DOUBLE},
		{"DRIVER_AGE_LESS_21", Types.DOUBLE},
		{"AGENCY_REPAIR_OUT", Types.DOUBLE},
		{"TOTAL_AFTER_DISCOUNT", Types.DOUBLE},
		{"TOTAL_BEFORE_DISC", Types.DOUBLE}, {"SMS_FLAG", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ADDRESS_ADD_NUMBER", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ADDRESS_BLDG_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ADDRESS_DISTRICT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADDRESS_STREET", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADDRESS_UNIT_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ADDRESS_ZIPCODE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ADD_COVER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ADD_DRIVER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("AGENCY_REPAIR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DEDUCTIBLE_VALUE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_DOB", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("INSURED_EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_GENDER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("INSURED_ID_TYPE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("INSURED_MOBILE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("INSURED_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_NATIONALITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_EDUCATION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_MARITAL_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_NO_CHILD_UNDER_16", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("LOYALTY_DISCOUNT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NCD_YEARS", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PAYMENT_AMOUNT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PAYMENT_METHOD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PAYMENT_REF_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICY_EFFECTIVE_FROM_NO", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("POLICY_EFFECTIVE_TO", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("POLICY_EFF_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("POLICY_ISSUE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("POLICY_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICY_REFERENCE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICY_STATUS_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PRODUCT_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PURPOSE_OF_VEHICLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("QUOTATIONS_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("REFERENCE_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SOURCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TRANSACTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_BODY_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_CAPACITY", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_CHASSIS_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_COLOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_CYLINDER", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_EST_EXP_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("VEHICLE_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_ID_TYPE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_MAKE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_MFG_YEAR", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_MODEL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_PLATE_L1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_PLATE_L2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_PLATE_L3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_PLATE_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_PLATE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_VALUE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_WEIGHT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_CITY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_CURRENT_MILE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_LOWER_MILE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_UPPER_MILE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_NIGHT_LOC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_ENGINE_SIZE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_TRANS_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_AXLE_WEIGHT", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("VEHICLE_CAR_MODS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VEHICLE_SPECS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OCCUPATION_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURED_IBAN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("INSURE_DOB_H", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NET_PREMIUM", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NCD_DISCOUNT_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("LOYALTY_DISCOUNT_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("NCD_DISCOUNT_PER", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("LOYALTY_DISCOUNT_PER", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("LOADING_AMOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("POLICY_TAXES", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("POLICY_FEES", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("TOTAL_COVER_PREMIUM", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("GROSS_PREMIUM", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("EXIST_POL_NO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EXIST_COMP_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EXIST_EXP_DATE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("POLICY_STATUS_MESSAGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("YAKEEN_REFERENCE_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUOTE_SUBMISSION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("QUOTE_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SAEED_SERVICE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DRIVER_ACCIDENTS", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("DRIVER_AGE_LESS_21", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("AGENCY_REPAIR_OUT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("TOTAL_AFTER_DISCOUNT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("TOTAL_BEFORE_DISC", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SMS_FLAG", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EJD_QUOTATIONS (ADDRESS_ADD_NUMBER LONG,ADDRESS_BLDG_NO LONG,ADDRESS_DISTRICT VARCHAR(75) null,ADDRESS_STREET VARCHAR(75) null,ADDRESS_UNIT_NO LONG,ADDRESS_ZIPCODE LONG,ADD_COVER VARCHAR(75) null,ADD_DRIVER VARCHAR(75) null,AGENCY_REPAIR VARCHAR(75) null,CITY VARCHAR(75) null,DEDUCTIBLE_VALUE VARCHAR(75) null,INSURED_DOB DATE null,INSURED_EMAIL VARCHAR(75) null,INSURED_GENDER VARCHAR(75) null,INSURED_ID LONG,INSURED_ID_TYPE LONG,INSURED_MOBILE LONG,INSURED_NAME VARCHAR(75) null,INSURED_NATIONALITY VARCHAR(75) null,INSURED_EDUCATION VARCHAR(75) null,INSURED_MARITAL_STATUS VARCHAR(75) null,INSURED_NO_CHILD_UNDER_16 LONG,LOYALTY_DISCOUNT VARCHAR(75) null,NCD_YEARS LONG,PAYMENT_AMOUNT LONG,PAYMENT_METHOD VARCHAR(75) null,PAYMENT_REF_NO VARCHAR(75) null,POLICY_EFFECTIVE_FROM_NO DATE null,POLICY_EFFECTIVE_TO DATE null,POLICY_EFF_DATE DATE null,POLICY_ISSUE_DATE DATE null,POLICY_NO VARCHAR(75) null,POLICY_REFERENCE_NO VARCHAR(75) null,POLICY_STATUS_CODE VARCHAR(75) null,PRODUCT_CODE VARCHAR(75) null,PURPOSE_OF_VEHICLE VARCHAR(75) null,QUOTATIONS_ID LONG not null primary key,REFERENCE_NO VARCHAR(75) null,SOURCE VARCHAR(75) null,TRANSACTION VARCHAR(75) null,VEHICLE_BODY_TYPE VARCHAR(75) null,VEHICLE_CAPACITY LONG,VEHICLE_CHASSIS_NO VARCHAR(75) null,VEHICLE_COLOR VARCHAR(75) null,VEHICLE_CYLINDER LONG,VEHICLE_EST_EXP_DATE DATE null,VEHICLE_ID LONG,VEHICLE_ID_TYPE LONG,VEHICLE_MAKE VARCHAR(75) null,VEHICLE_MFG_YEAR LONG,VEHICLE_MODEL VARCHAR(75) null,VEHICLE_PLATE_L1 VARCHAR(75) null,VEHICLE_PLATE_L2 VARCHAR(75) null,VEHICLE_PLATE_L3 VARCHAR(75) null,VEHICLE_PLATE_NO LONG,VEHICLE_PLATE_TYPE VARCHAR(75) null,VEHICLE_VALUE LONG,VEHICLE_WEIGHT LONG,VEHICLE_CITY VARCHAR(75) null,VEHICLE_CURRENT_MILE LONG,VEHICLE_LOWER_MILE LONG,VEHICLE_UPPER_MILE LONG,VEHICLE_NIGHT_LOC VARCHAR(75) null,VEHICLE_ENGINE_SIZE VARCHAR(75) null,VEHICLE_TRANS_TYPE VARCHAR(75) null,VEHICLE_AXLE_WEIGHT LONG,VEHICLE_CAR_MODS VARCHAR(75) null,VEHICLE_SPECS VARCHAR(75) null,OCCUPATION_CODE VARCHAR(75) null,INSURED_IBAN VARCHAR(75) null,INSURE_DOB_H VARCHAR(75) null,NET_PREMIUM DOUBLE,NCD_DISCOUNT_AMOUNT DOUBLE,LOYALTY_DISCOUNT_AMOUNT DOUBLE,NCD_DISCOUNT_PER DOUBLE,LOYALTY_DISCOUNT_PER DOUBLE,LOADING_AMOUNT DOUBLE,POLICY_TAXES DOUBLE,POLICY_FEES DOUBLE,TOTAL_COVER_PREMIUM DOUBLE,GROSS_PREMIUM DOUBLE,EXIST_POL_NO VARCHAR(75) null,EXIST_COMP_NAME VARCHAR(75) null,EXIST_EXP_DATE VARCHAR(75) null,POLICY_STATUS_MESSAGE VARCHAR(75) null,YAKEEN_REFERENCE_NO LONG,QUOTE_SUBMISSION_DATE DATE null,QUOTE_STATUS VARCHAR(75) null,SAEED_SERVICE VARCHAR(75) null,DRIVER_ACCIDENTS DOUBLE,DRIVER_AGE_LESS_21 DOUBLE,AGENCY_REPAIR_OUT DOUBLE,TOTAL_AFTER_DISCOUNT DOUBLE,TOTAL_BEFORE_DISC DOUBLE,SMS_FLAG BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table EJD_QUOTATIONS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY quotations.vehicleEstExpiryDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EJD_QUOTATIONS.VEHICLE_EST_EXP_DATE DESC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Quotations toModel(QuotationsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Quotations model = new QuotationsImpl();

		model.setAddressAddNo(soapModel.getAddressAddNo());
		model.setAddressBuildingNo(soapModel.getAddressBuildingNo());
		model.setAddressDistrict(soapModel.getAddressDistrict());
		model.setAddressStreet(soapModel.getAddressStreet());
		model.setAddressUnitNo(soapModel.getAddressUnitNo());
		model.setAddressZipCode(soapModel.getAddressZipCode());
		model.setAddCover(soapModel.getAddCover());
		model.setAddDriver(soapModel.getAddDriver());
		model.setAgencyRepair(soapModel.getAgencyRepair());
		model.setCity(soapModel.getCity());
		model.setDeductibleValue(soapModel.getDeductibleValue());
		model.setInsuredDob(soapModel.getInsuredDob());
		model.setInsuredEmail(soapModel.getInsuredEmail());
		model.setInsuredGender(soapModel.getInsuredGender());
		model.setInsuredId(soapModel.getInsuredId());
		model.setInsuredIdType(soapModel.getInsuredIdType());
		model.setInsuredMobile(soapModel.getInsuredMobile());
		model.setInsuredName(soapModel.getInsuredName());
		model.setInsuredNationality(soapModel.getInsuredNationality());
		model.setInsuredEducation(soapModel.getInsuredEducation());
		model.setInsuredMaritalStatus(soapModel.getInsuredMaritalStatus());
		model.setInsuredNoChildUnder16(soapModel.getInsuredNoChildUnder16());
		model.setLoyaltyDiscount(soapModel.getLoyaltyDiscount());
		model.setNcdYears(soapModel.getNcdYears());
		model.setPaymemtAmount(soapModel.getPaymemtAmount());
		model.setPaymentMethod(soapModel.getPaymentMethod());
		model.setPaymentRefNo(soapModel.getPaymentRefNo());
		model.setPolicyEffFromNo(soapModel.getPolicyEffFromNo());
		model.setPolicyEffTo(soapModel.getPolicyEffTo());
		model.setPolicyEffDate(soapModel.getPolicyEffDate());
		model.setPolicyIssueDate(soapModel.getPolicyIssueDate());
		model.setPolicyNo(soapModel.getPolicyNo());
		model.setPolicyRefNo(soapModel.getPolicyRefNo());
		model.setPolicyStatusCode(soapModel.getPolicyStatusCode());
		model.setProductCode(soapModel.getProductCode());
		model.setPurposeOfVehicle(soapModel.getPurposeOfVehicle());
		model.setQuotationId(soapModel.getQuotationId());
		model.setReferenceNo(soapModel.getReferenceNo());
		model.setSource(soapModel.getSource());
		model.setTransaction(soapModel.getTransaction());
		model.setVehicleBodyType(soapModel.getVehicleBodyType());
		model.setVehicleCapacity(soapModel.getVehicleCapacity());
		model.setVehicleChassisNo(soapModel.getVehicleChassisNo());
		model.setVehicleColor(soapModel.getVehicleColor());
		model.setVehicleCylinder(soapModel.getVehicleCylinder());
		model.setVehicleEstExpiryDate(soapModel.getVehicleEstExpiryDate());
		model.setVehicleId(soapModel.getVehicleId());
		model.setVehicleIdType(soapModel.getVehicleIdType());
		model.setVehicleMake(soapModel.getVehicleMake());
		model.setVehicleMfgYear(soapModel.getVehicleMfgYear());
		model.setVehicleModel(soapModel.getVehicleModel());
		model.setVehiclePlateL1(soapModel.getVehiclePlateL1());
		model.setVehiclePlateL2(soapModel.getVehiclePlateL2());
		model.setVehiclePlateL3(soapModel.getVehiclePlateL3());
		model.setVehiclePlateNo(soapModel.getVehiclePlateNo());
		model.setVehiclePlateType(soapModel.getVehiclePlateType());
		model.setVehicleValue(soapModel.getVehicleValue());
		model.setVehicleWeight(soapModel.getVehicleWeight());
		model.setVehicleCity(soapModel.getVehicleCity());
		model.setVehicleCurrentMileage(soapModel.getVehicleCurrentMileage());
		model.setVehicleLowerExpectedMileagePerYear(
			soapModel.getVehicleLowerExpectedMileagePerYear());
		model.setVehicleUpperExpectedMileagePerYear(
			soapModel.getVehicleUpperExpectedMileagePerYear());
		model.setVehicleNightLocation(soapModel.getVehicleNightLocation());
		model.setVehicleEngineSize(soapModel.getVehicleEngineSize());
		model.setVehicleTransType(soapModel.getVehicleTransType());
		model.setVehAxleWeight(soapModel.getVehAxleWeight());
		model.setVehCarMods(soapModel.getVehCarMods());
		model.setVehSpecs(soapModel.getVehSpecs());
		model.setOccCode(soapModel.getOccCode());
		model.setInsuredIBAN(soapModel.getInsuredIBAN());
		model.setInsuredDobH(soapModel.getInsuredDobH());
		model.setNetPrem(soapModel.getNetPrem());
		model.setDiscountAmount(soapModel.getDiscountAmount());
		model.setLoyaltyDiscountAmount(soapModel.getLoyaltyDiscountAmount());
		model.setDiscountPrem(soapModel.getDiscountPrem());
		model.setLoyaltyDiscountPer(soapModel.getLoyaltyDiscountPer());
		model.setLoadingAmount(soapModel.getLoadingAmount());
		model.setPolicyTaxes(soapModel.getPolicyTaxes());
		model.setPolicyFees(soapModel.getPolicyFees());
		model.setTotalCoverPrem(soapModel.getTotalCoverPrem());
		model.setGrossPrem(soapModel.getGrossPrem());
		model.setExistingPolicyNo(soapModel.getExistingPolicyNo());
		model.setExistingCompanyName(soapModel.getExistingCompanyName());
		model.setExistingExpDate(soapModel.getExistingExpDate());
		model.setPolicyStatusMsg(soapModel.getPolicyStatusMsg());
		model.setYakeenRefNo(soapModel.getYakeenRefNo());
		model.setQuoteSubmissionDate(soapModel.getQuoteSubmissionDate());
		model.setQuoteStatus(soapModel.getQuoteStatus());
		model.setSaeedService(soapModel.getSaeedService());
		model.setDriverAccidents(soapModel.getDriverAccidents());
		model.setDriverAgeLess21(soapModel.getDriverAgeLess21());
		model.setAgencyRepairOut(soapModel.getAgencyRepairOut());
		model.setTotalAfterDiscount(soapModel.getTotalAfterDiscount());
		model.setTotalBeforeDisc(soapModel.getTotalBeforeDisc());
		model.setSmsFlag(soapModel.isSmsFlag());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Quotations> toModels(QuotationsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Quotations> models = new ArrayList<Quotations>(soapModels.length);

		for (QuotationsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public QuotationsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _quotationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuotationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _quotationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Quotations.class;
	}

	@Override
	public String getModelClassName() {
		return Quotations.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Quotations, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Quotations, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Quotations, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Quotations)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Quotations, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Quotations, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Quotations)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Quotations, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Quotations, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Quotations>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Quotations.class.getClassLoader(), Quotations.class,
			ModelWrapper.class);

		try {
			Constructor<Quotations> constructor =
				(Constructor<Quotations>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Quotations, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Quotations, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Quotations, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Quotations, Object>>();
		Map<String, BiConsumer<Quotations, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Quotations, ?>>();

		attributeGetterFunctions.put(
			"addressAddNo", Quotations::getAddressAddNo);
		attributeSetterBiConsumers.put(
			"addressAddNo",
			(BiConsumer<Quotations, Long>)Quotations::setAddressAddNo);
		attributeGetterFunctions.put(
			"addressBuildingNo", Quotations::getAddressBuildingNo);
		attributeSetterBiConsumers.put(
			"addressBuildingNo",
			(BiConsumer<Quotations, Long>)Quotations::setAddressBuildingNo);
		attributeGetterFunctions.put(
			"addressDistrict", Quotations::getAddressDistrict);
		attributeSetterBiConsumers.put(
			"addressDistrict",
			(BiConsumer<Quotations, String>)Quotations::setAddressDistrict);
		attributeGetterFunctions.put(
			"addressStreet", Quotations::getAddressStreet);
		attributeSetterBiConsumers.put(
			"addressStreet",
			(BiConsumer<Quotations, String>)Quotations::setAddressStreet);
		attributeGetterFunctions.put(
			"addressUnitNo", Quotations::getAddressUnitNo);
		attributeSetterBiConsumers.put(
			"addressUnitNo",
			(BiConsumer<Quotations, Long>)Quotations::setAddressUnitNo);
		attributeGetterFunctions.put(
			"addressZipCode", Quotations::getAddressZipCode);
		attributeSetterBiConsumers.put(
			"addressZipCode",
			(BiConsumer<Quotations, Long>)Quotations::setAddressZipCode);
		attributeGetterFunctions.put("addCover", Quotations::getAddCover);
		attributeSetterBiConsumers.put(
			"addCover",
			(BiConsumer<Quotations, String>)Quotations::setAddCover);
		attributeGetterFunctions.put("addDriver", Quotations::getAddDriver);
		attributeSetterBiConsumers.put(
			"addDriver",
			(BiConsumer<Quotations, String>)Quotations::setAddDriver);
		attributeGetterFunctions.put(
			"agencyRepair", Quotations::getAgencyRepair);
		attributeSetterBiConsumers.put(
			"agencyRepair",
			(BiConsumer<Quotations, String>)Quotations::setAgencyRepair);
		attributeGetterFunctions.put("city", Quotations::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Quotations, String>)Quotations::setCity);
		attributeGetterFunctions.put(
			"deductibleValue", Quotations::getDeductibleValue);
		attributeSetterBiConsumers.put(
			"deductibleValue",
			(BiConsumer<Quotations, String>)Quotations::setDeductibleValue);
		attributeGetterFunctions.put("insuredDob", Quotations::getInsuredDob);
		attributeSetterBiConsumers.put(
			"insuredDob",
			(BiConsumer<Quotations, Date>)Quotations::setInsuredDob);
		attributeGetterFunctions.put(
			"insuredEmail", Quotations::getInsuredEmail);
		attributeSetterBiConsumers.put(
			"insuredEmail",
			(BiConsumer<Quotations, String>)Quotations::setInsuredEmail);
		attributeGetterFunctions.put(
			"insuredGender", Quotations::getInsuredGender);
		attributeSetterBiConsumers.put(
			"insuredGender",
			(BiConsumer<Quotations, String>)Quotations::setInsuredGender);
		attributeGetterFunctions.put("insuredId", Quotations::getInsuredId);
		attributeSetterBiConsumers.put(
			"insuredId",
			(BiConsumer<Quotations, Long>)Quotations::setInsuredId);
		attributeGetterFunctions.put(
			"insuredIdType", Quotations::getInsuredIdType);
		attributeSetterBiConsumers.put(
			"insuredIdType",
			(BiConsumer<Quotations, Long>)Quotations::setInsuredIdType);
		attributeGetterFunctions.put(
			"insuredMobile", Quotations::getInsuredMobile);
		attributeSetterBiConsumers.put(
			"insuredMobile",
			(BiConsumer<Quotations, Long>)Quotations::setInsuredMobile);
		attributeGetterFunctions.put("insuredName", Quotations::getInsuredName);
		attributeSetterBiConsumers.put(
			"insuredName",
			(BiConsumer<Quotations, String>)Quotations::setInsuredName);
		attributeGetterFunctions.put(
			"insuredNationality", Quotations::getInsuredNationality);
		attributeSetterBiConsumers.put(
			"insuredNationality",
			(BiConsumer<Quotations, String>)Quotations::setInsuredNationality);
		attributeGetterFunctions.put(
			"insuredEducation", Quotations::getInsuredEducation);
		attributeSetterBiConsumers.put(
			"insuredEducation",
			(BiConsumer<Quotations, String>)Quotations::setInsuredEducation);
		attributeGetterFunctions.put(
			"insuredMaritalStatus", Quotations::getInsuredMaritalStatus);
		attributeSetterBiConsumers.put(
			"insuredMaritalStatus",
			(BiConsumer<Quotations, String>)
				Quotations::setInsuredMaritalStatus);
		attributeGetterFunctions.put(
			"insuredNoChildUnder16", Quotations::getInsuredNoChildUnder16);
		attributeSetterBiConsumers.put(
			"insuredNoChildUnder16",
			(BiConsumer<Quotations, Long>)Quotations::setInsuredNoChildUnder16);
		attributeGetterFunctions.put(
			"loyaltyDiscount", Quotations::getLoyaltyDiscount);
		attributeSetterBiConsumers.put(
			"loyaltyDiscount",
			(BiConsumer<Quotations, String>)Quotations::setLoyaltyDiscount);
		attributeGetterFunctions.put("ncdYears", Quotations::getNcdYears);
		attributeSetterBiConsumers.put(
			"ncdYears", (BiConsumer<Quotations, Long>)Quotations::setNcdYears);
		attributeGetterFunctions.put(
			"paymemtAmount", Quotations::getPaymemtAmount);
		attributeSetterBiConsumers.put(
			"paymemtAmount",
			(BiConsumer<Quotations, Long>)Quotations::setPaymemtAmount);
		attributeGetterFunctions.put(
			"paymentMethod", Quotations::getPaymentMethod);
		attributeSetterBiConsumers.put(
			"paymentMethod",
			(BiConsumer<Quotations, String>)Quotations::setPaymentMethod);
		attributeGetterFunctions.put(
			"paymentRefNo", Quotations::getPaymentRefNo);
		attributeSetterBiConsumers.put(
			"paymentRefNo",
			(BiConsumer<Quotations, String>)Quotations::setPaymentRefNo);
		attributeGetterFunctions.put(
			"policyEffFromNo", Quotations::getPolicyEffFromNo);
		attributeSetterBiConsumers.put(
			"policyEffFromNo",
			(BiConsumer<Quotations, Date>)Quotations::setPolicyEffFromNo);
		attributeGetterFunctions.put("policyEffTo", Quotations::getPolicyEffTo);
		attributeSetterBiConsumers.put(
			"policyEffTo",
			(BiConsumer<Quotations, Date>)Quotations::setPolicyEffTo);
		attributeGetterFunctions.put(
			"policyEffDate", Quotations::getPolicyEffDate);
		attributeSetterBiConsumers.put(
			"policyEffDate",
			(BiConsumer<Quotations, Date>)Quotations::setPolicyEffDate);
		attributeGetterFunctions.put(
			"policyIssueDate", Quotations::getPolicyIssueDate);
		attributeSetterBiConsumers.put(
			"policyIssueDate",
			(BiConsumer<Quotations, Date>)Quotations::setPolicyIssueDate);
		attributeGetterFunctions.put("policyNo", Quotations::getPolicyNo);
		attributeSetterBiConsumers.put(
			"policyNo",
			(BiConsumer<Quotations, String>)Quotations::setPolicyNo);
		attributeGetterFunctions.put("policyRefNo", Quotations::getPolicyRefNo);
		attributeSetterBiConsumers.put(
			"policyRefNo",
			(BiConsumer<Quotations, String>)Quotations::setPolicyRefNo);
		attributeGetterFunctions.put(
			"policyStatusCode", Quotations::getPolicyStatusCode);
		attributeSetterBiConsumers.put(
			"policyStatusCode",
			(BiConsumer<Quotations, String>)Quotations::setPolicyStatusCode);
		attributeGetterFunctions.put("productCode", Quotations::getProductCode);
		attributeSetterBiConsumers.put(
			"productCode",
			(BiConsumer<Quotations, String>)Quotations::setProductCode);
		attributeGetterFunctions.put(
			"purposeOfVehicle", Quotations::getPurposeOfVehicle);
		attributeSetterBiConsumers.put(
			"purposeOfVehicle",
			(BiConsumer<Quotations, String>)Quotations::setPurposeOfVehicle);
		attributeGetterFunctions.put("quotationId", Quotations::getQuotationId);
		attributeSetterBiConsumers.put(
			"quotationId",
			(BiConsumer<Quotations, Long>)Quotations::setQuotationId);
		attributeGetterFunctions.put("referenceNo", Quotations::getReferenceNo);
		attributeSetterBiConsumers.put(
			"referenceNo",
			(BiConsumer<Quotations, String>)Quotations::setReferenceNo);
		attributeGetterFunctions.put("source", Quotations::getSource);
		attributeSetterBiConsumers.put(
			"source", (BiConsumer<Quotations, String>)Quotations::setSource);
		attributeGetterFunctions.put("transaction", Quotations::getTransaction);
		attributeSetterBiConsumers.put(
			"transaction",
			(BiConsumer<Quotations, String>)Quotations::setTransaction);
		attributeGetterFunctions.put(
			"vehicleBodyType", Quotations::getVehicleBodyType);
		attributeSetterBiConsumers.put(
			"vehicleBodyType",
			(BiConsumer<Quotations, String>)Quotations::setVehicleBodyType);
		attributeGetterFunctions.put(
			"vehicleCapacity", Quotations::getVehicleCapacity);
		attributeSetterBiConsumers.put(
			"vehicleCapacity",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleCapacity);
		attributeGetterFunctions.put(
			"vehicleChassisNo", Quotations::getVehicleChassisNo);
		attributeSetterBiConsumers.put(
			"vehicleChassisNo",
			(BiConsumer<Quotations, String>)Quotations::setVehicleChassisNo);
		attributeGetterFunctions.put(
			"vehicleColor", Quotations::getVehicleColor);
		attributeSetterBiConsumers.put(
			"vehicleColor",
			(BiConsumer<Quotations, String>)Quotations::setVehicleColor);
		attributeGetterFunctions.put(
			"vehicleCylinder", Quotations::getVehicleCylinder);
		attributeSetterBiConsumers.put(
			"vehicleCylinder",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleCylinder);
		attributeGetterFunctions.put(
			"vehicleEstExpiryDate", Quotations::getVehicleEstExpiryDate);
		attributeSetterBiConsumers.put(
			"vehicleEstExpiryDate",
			(BiConsumer<Quotations, Date>)Quotations::setVehicleEstExpiryDate);
		attributeGetterFunctions.put("vehicleId", Quotations::getVehicleId);
		attributeSetterBiConsumers.put(
			"vehicleId",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleId);
		attributeGetterFunctions.put(
			"vehicleIdType", Quotations::getVehicleIdType);
		attributeSetterBiConsumers.put(
			"vehicleIdType",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleIdType);
		attributeGetterFunctions.put("vehicleMake", Quotations::getVehicleMake);
		attributeSetterBiConsumers.put(
			"vehicleMake",
			(BiConsumer<Quotations, String>)Quotations::setVehicleMake);
		attributeGetterFunctions.put(
			"vehicleMfgYear", Quotations::getVehicleMfgYear);
		attributeSetterBiConsumers.put(
			"vehicleMfgYear",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleMfgYear);
		attributeGetterFunctions.put(
			"vehicleModel", Quotations::getVehicleModel);
		attributeSetterBiConsumers.put(
			"vehicleModel",
			(BiConsumer<Quotations, String>)Quotations::setVehicleModel);
		attributeGetterFunctions.put(
			"vehiclePlateL1", Quotations::getVehiclePlateL1);
		attributeSetterBiConsumers.put(
			"vehiclePlateL1",
			(BiConsumer<Quotations, String>)Quotations::setVehiclePlateL1);
		attributeGetterFunctions.put(
			"vehiclePlateL2", Quotations::getVehiclePlateL2);
		attributeSetterBiConsumers.put(
			"vehiclePlateL2",
			(BiConsumer<Quotations, String>)Quotations::setVehiclePlateL2);
		attributeGetterFunctions.put(
			"vehiclePlateL3", Quotations::getVehiclePlateL3);
		attributeSetterBiConsumers.put(
			"vehiclePlateL3",
			(BiConsumer<Quotations, String>)Quotations::setVehiclePlateL3);
		attributeGetterFunctions.put(
			"vehiclePlateNo", Quotations::getVehiclePlateNo);
		attributeSetterBiConsumers.put(
			"vehiclePlateNo",
			(BiConsumer<Quotations, Long>)Quotations::setVehiclePlateNo);
		attributeGetterFunctions.put(
			"vehiclePlateType", Quotations::getVehiclePlateType);
		attributeSetterBiConsumers.put(
			"vehiclePlateType",
			(BiConsumer<Quotations, String>)Quotations::setVehiclePlateType);
		attributeGetterFunctions.put(
			"vehicleValue", Quotations::getVehicleValue);
		attributeSetterBiConsumers.put(
			"vehicleValue",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleValue);
		attributeGetterFunctions.put(
			"vehicleWeight", Quotations::getVehicleWeight);
		attributeSetterBiConsumers.put(
			"vehicleWeight",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleWeight);
		attributeGetterFunctions.put("vehicleCity", Quotations::getVehicleCity);
		attributeSetterBiConsumers.put(
			"vehicleCity",
			(BiConsumer<Quotations, String>)Quotations::setVehicleCity);
		attributeGetterFunctions.put(
			"vehicleCurrentMileage", Quotations::getVehicleCurrentMileage);
		attributeSetterBiConsumers.put(
			"vehicleCurrentMileage",
			(BiConsumer<Quotations, Long>)Quotations::setVehicleCurrentMileage);
		attributeGetterFunctions.put(
			"vehicleLowerExpectedMileagePerYear",
			Quotations::getVehicleLowerExpectedMileagePerYear);
		attributeSetterBiConsumers.put(
			"vehicleLowerExpectedMileagePerYear",
			(BiConsumer<Quotations, Long>)
				Quotations::setVehicleLowerExpectedMileagePerYear);
		attributeGetterFunctions.put(
			"vehicleUpperExpectedMileagePerYear",
			Quotations::getVehicleUpperExpectedMileagePerYear);
		attributeSetterBiConsumers.put(
			"vehicleUpperExpectedMileagePerYear",
			(BiConsumer<Quotations, Long>)
				Quotations::setVehicleUpperExpectedMileagePerYear);
		attributeGetterFunctions.put(
			"vehicleNightLocation", Quotations::getVehicleNightLocation);
		attributeSetterBiConsumers.put(
			"vehicleNightLocation",
			(BiConsumer<Quotations, String>)
				Quotations::setVehicleNightLocation);
		attributeGetterFunctions.put(
			"vehicleEngineSize", Quotations::getVehicleEngineSize);
		attributeSetterBiConsumers.put(
			"vehicleEngineSize",
			(BiConsumer<Quotations, String>)Quotations::setVehicleEngineSize);
		attributeGetterFunctions.put(
			"vehicleTransType", Quotations::getVehicleTransType);
		attributeSetterBiConsumers.put(
			"vehicleTransType",
			(BiConsumer<Quotations, String>)Quotations::setVehicleTransType);
		attributeGetterFunctions.put(
			"vehAxleWeight", Quotations::getVehAxleWeight);
		attributeSetterBiConsumers.put(
			"vehAxleWeight",
			(BiConsumer<Quotations, Long>)Quotations::setVehAxleWeight);
		attributeGetterFunctions.put("vehCarMods", Quotations::getVehCarMods);
		attributeSetterBiConsumers.put(
			"vehCarMods",
			(BiConsumer<Quotations, String>)Quotations::setVehCarMods);
		attributeGetterFunctions.put("vehSpecs", Quotations::getVehSpecs);
		attributeSetterBiConsumers.put(
			"vehSpecs",
			(BiConsumer<Quotations, String>)Quotations::setVehSpecs);
		attributeGetterFunctions.put("occCode", Quotations::getOccCode);
		attributeSetterBiConsumers.put(
			"occCode", (BiConsumer<Quotations, String>)Quotations::setOccCode);
		attributeGetterFunctions.put("insuredIBAN", Quotations::getInsuredIBAN);
		attributeSetterBiConsumers.put(
			"insuredIBAN",
			(BiConsumer<Quotations, String>)Quotations::setInsuredIBAN);
		attributeGetterFunctions.put("insuredDobH", Quotations::getInsuredDobH);
		attributeSetterBiConsumers.put(
			"insuredDobH",
			(BiConsumer<Quotations, String>)Quotations::setInsuredDobH);
		attributeGetterFunctions.put("netPrem", Quotations::getNetPrem);
		attributeSetterBiConsumers.put(
			"netPrem", (BiConsumer<Quotations, Double>)Quotations::setNetPrem);
		attributeGetterFunctions.put(
			"discountAmount", Quotations::getDiscountAmount);
		attributeSetterBiConsumers.put(
			"discountAmount",
			(BiConsumer<Quotations, Double>)Quotations::setDiscountAmount);
		attributeGetterFunctions.put(
			"loyaltyDiscountAmount", Quotations::getLoyaltyDiscountAmount);
		attributeSetterBiConsumers.put(
			"loyaltyDiscountAmount",
			(BiConsumer<Quotations, Double>)
				Quotations::setLoyaltyDiscountAmount);
		attributeGetterFunctions.put(
			"discountPrem", Quotations::getDiscountPrem);
		attributeSetterBiConsumers.put(
			"discountPrem",
			(BiConsumer<Quotations, Double>)Quotations::setDiscountPrem);
		attributeGetterFunctions.put(
			"loyaltyDiscountPer", Quotations::getLoyaltyDiscountPer);
		attributeSetterBiConsumers.put(
			"loyaltyDiscountPer",
			(BiConsumer<Quotations, Double>)Quotations::setLoyaltyDiscountPer);
		attributeGetterFunctions.put(
			"loadingAmount", Quotations::getLoadingAmount);
		attributeSetterBiConsumers.put(
			"loadingAmount",
			(BiConsumer<Quotations, Double>)Quotations::setLoadingAmount);
		attributeGetterFunctions.put("policyTaxes", Quotations::getPolicyTaxes);
		attributeSetterBiConsumers.put(
			"policyTaxes",
			(BiConsumer<Quotations, Double>)Quotations::setPolicyTaxes);
		attributeGetterFunctions.put("policyFees", Quotations::getPolicyFees);
		attributeSetterBiConsumers.put(
			"policyFees",
			(BiConsumer<Quotations, Double>)Quotations::setPolicyFees);
		attributeGetterFunctions.put(
			"totalCoverPrem", Quotations::getTotalCoverPrem);
		attributeSetterBiConsumers.put(
			"totalCoverPrem",
			(BiConsumer<Quotations, Double>)Quotations::setTotalCoverPrem);
		attributeGetterFunctions.put("grossPrem", Quotations::getGrossPrem);
		attributeSetterBiConsumers.put(
			"grossPrem",
			(BiConsumer<Quotations, Double>)Quotations::setGrossPrem);
		attributeGetterFunctions.put(
			"existingPolicyNo", Quotations::getExistingPolicyNo);
		attributeSetterBiConsumers.put(
			"existingPolicyNo",
			(BiConsumer<Quotations, String>)Quotations::setExistingPolicyNo);
		attributeGetterFunctions.put(
			"existingCompanyName", Quotations::getExistingCompanyName);
		attributeSetterBiConsumers.put(
			"existingCompanyName",
			(BiConsumer<Quotations, String>)Quotations::setExistingCompanyName);
		attributeGetterFunctions.put(
			"existingExpDate", Quotations::getExistingExpDate);
		attributeSetterBiConsumers.put(
			"existingExpDate",
			(BiConsumer<Quotations, String>)Quotations::setExistingExpDate);
		attributeGetterFunctions.put(
			"policyStatusMsg", Quotations::getPolicyStatusMsg);
		attributeSetterBiConsumers.put(
			"policyStatusMsg",
			(BiConsumer<Quotations, String>)Quotations::setPolicyStatusMsg);
		attributeGetterFunctions.put("yakeenRefNo", Quotations::getYakeenRefNo);
		attributeSetterBiConsumers.put(
			"yakeenRefNo",
			(BiConsumer<Quotations, Long>)Quotations::setYakeenRefNo);
		attributeGetterFunctions.put(
			"quoteSubmissionDate", Quotations::getQuoteSubmissionDate);
		attributeSetterBiConsumers.put(
			"quoteSubmissionDate",
			(BiConsumer<Quotations, Date>)Quotations::setQuoteSubmissionDate);
		attributeGetterFunctions.put("quoteStatus", Quotations::getQuoteStatus);
		attributeSetterBiConsumers.put(
			"quoteStatus",
			(BiConsumer<Quotations, String>)Quotations::setQuoteStatus);
		attributeGetterFunctions.put(
			"saeedService", Quotations::getSaeedService);
		attributeSetterBiConsumers.put(
			"saeedService",
			(BiConsumer<Quotations, String>)Quotations::setSaeedService);
		attributeGetterFunctions.put(
			"driverAccidents", Quotations::getDriverAccidents);
		attributeSetterBiConsumers.put(
			"driverAccidents",
			(BiConsumer<Quotations, Double>)Quotations::setDriverAccidents);
		attributeGetterFunctions.put(
			"driverAgeLess21", Quotations::getDriverAgeLess21);
		attributeSetterBiConsumers.put(
			"driverAgeLess21",
			(BiConsumer<Quotations, Double>)Quotations::setDriverAgeLess21);
		attributeGetterFunctions.put(
			"agencyRepairOut", Quotations::getAgencyRepairOut);
		attributeSetterBiConsumers.put(
			"agencyRepairOut",
			(BiConsumer<Quotations, Double>)Quotations::setAgencyRepairOut);
		attributeGetterFunctions.put(
			"totalAfterDiscount", Quotations::getTotalAfterDiscount);
		attributeSetterBiConsumers.put(
			"totalAfterDiscount",
			(BiConsumer<Quotations, Double>)Quotations::setTotalAfterDiscount);
		attributeGetterFunctions.put(
			"totalBeforeDisc", Quotations::getTotalBeforeDisc);
		attributeSetterBiConsumers.put(
			"totalBeforeDisc",
			(BiConsumer<Quotations, Double>)Quotations::setTotalBeforeDisc);
		attributeGetterFunctions.put("smsFlag", Quotations::getSmsFlag);
		attributeSetterBiConsumers.put(
			"smsFlag", (BiConsumer<Quotations, Boolean>)Quotations::setSmsFlag);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAddressAddNo() {
		return _addressAddNo;
	}

	@Override
	public void setAddressAddNo(long addressAddNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressAddNo = addressAddNo;
	}

	@JSON
	@Override
	public long getAddressBuildingNo() {
		return _addressBuildingNo;
	}

	@Override
	public void setAddressBuildingNo(long addressBuildingNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressBuildingNo = addressBuildingNo;
	}

	@JSON
	@Override
	public String getAddressDistrict() {
		if (_addressDistrict == null) {
			return "";
		}
		else {
			return _addressDistrict;
		}
	}

	@Override
	public void setAddressDistrict(String addressDistrict) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressDistrict = addressDistrict;
	}

	@JSON
	@Override
	public String getAddressStreet() {
		if (_addressStreet == null) {
			return "";
		}
		else {
			return _addressStreet;
		}
	}

	@Override
	public void setAddressStreet(String addressStreet) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressStreet = addressStreet;
	}

	@JSON
	@Override
	public long getAddressUnitNo() {
		return _addressUnitNo;
	}

	@Override
	public void setAddressUnitNo(long addressUnitNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressUnitNo = addressUnitNo;
	}

	@JSON
	@Override
	public long getAddressZipCode() {
		return _addressZipCode;
	}

	@Override
	public void setAddressZipCode(long addressZipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressZipCode = addressZipCode;
	}

	@JSON
	@Override
	public String getAddCover() {
		if (_addCover == null) {
			return "";
		}
		else {
			return _addCover;
		}
	}

	@Override
	public void setAddCover(String addCover) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addCover = addCover;
	}

	@JSON
	@Override
	public String getAddDriver() {
		if (_addDriver == null) {
			return "";
		}
		else {
			return _addDriver;
		}
	}

	@Override
	public void setAddDriver(String addDriver) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addDriver = addDriver;
	}

	@JSON
	@Override
	public String getAgencyRepair() {
		if (_agencyRepair == null) {
			return "";
		}
		else {
			return _agencyRepair;
		}
	}

	@Override
	public void setAgencyRepair(String agencyRepair) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyRepair = agencyRepair;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getDeductibleValue() {
		if (_deductibleValue == null) {
			return "";
		}
		else {
			return _deductibleValue;
		}
	}

	@Override
	public void setDeductibleValue(String deductibleValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deductibleValue = deductibleValue;
	}

	@JSON
	@Override
	public Date getInsuredDob() {
		return _insuredDob;
	}

	@Override
	public void setInsuredDob(Date insuredDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredDob = insuredDob;
	}

	@JSON
	@Override
	public String getInsuredEmail() {
		if (_insuredEmail == null) {
			return "";
		}
		else {
			return _insuredEmail;
		}
	}

	@Override
	public void setInsuredEmail(String insuredEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredEmail = insuredEmail;
	}

	@JSON
	@Override
	public String getInsuredGender() {
		if (_insuredGender == null) {
			return "";
		}
		else {
			return _insuredGender;
		}
	}

	@Override
	public void setInsuredGender(String insuredGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredGender = insuredGender;
	}

	@JSON
	@Override
	public long getInsuredId() {
		return _insuredId;
	}

	@Override
	public void setInsuredId(long insuredId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredId = insuredId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalInsuredId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("INSURED_ID"));
	}

	@JSON
	@Override
	public long getInsuredIdType() {
		return _insuredIdType;
	}

	@Override
	public void setInsuredIdType(long insuredIdType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredIdType = insuredIdType;
	}

	@JSON
	@Override
	public long getInsuredMobile() {
		return _insuredMobile;
	}

	@Override
	public void setInsuredMobile(long insuredMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredMobile = insuredMobile;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalInsuredMobile() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("INSURED_MOBILE"));
	}

	@JSON
	@Override
	public String getInsuredName() {
		if (_insuredName == null) {
			return "";
		}
		else {
			return _insuredName;
		}
	}

	@Override
	public void setInsuredName(String insuredName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredName = insuredName;
	}

	@JSON
	@Override
	public String getInsuredNationality() {
		if (_insuredNationality == null) {
			return "";
		}
		else {
			return _insuredNationality;
		}
	}

	@Override
	public void setInsuredNationality(String insuredNationality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredNationality = insuredNationality;
	}

	@JSON
	@Override
	public String getInsuredEducation() {
		if (_insuredEducation == null) {
			return "";
		}
		else {
			return _insuredEducation;
		}
	}

	@Override
	public void setInsuredEducation(String insuredEducation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredEducation = insuredEducation;
	}

	@JSON
	@Override
	public String getInsuredMaritalStatus() {
		if (_insuredMaritalStatus == null) {
			return "";
		}
		else {
			return _insuredMaritalStatus;
		}
	}

	@Override
	public void setInsuredMaritalStatus(String insuredMaritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredMaritalStatus = insuredMaritalStatus;
	}

	@JSON
	@Override
	public long getInsuredNoChildUnder16() {
		return _insuredNoChildUnder16;
	}

	@Override
	public void setInsuredNoChildUnder16(long insuredNoChildUnder16) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredNoChildUnder16 = insuredNoChildUnder16;
	}

	@JSON
	@Override
	public String getLoyaltyDiscount() {
		if (_loyaltyDiscount == null) {
			return "";
		}
		else {
			return _loyaltyDiscount;
		}
	}

	@Override
	public void setLoyaltyDiscount(String loyaltyDiscount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loyaltyDiscount = loyaltyDiscount;
	}

	@JSON
	@Override
	public long getNcdYears() {
		return _ncdYears;
	}

	@Override
	public void setNcdYears(long ncdYears) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ncdYears = ncdYears;
	}

	@JSON
	@Override
	public long getPaymemtAmount() {
		return _paymemtAmount;
	}

	@Override
	public void setPaymemtAmount(long paymemtAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymemtAmount = paymemtAmount;
	}

	@JSON
	@Override
	public String getPaymentMethod() {
		if (_paymentMethod == null) {
			return "";
		}
		else {
			return _paymentMethod;
		}
	}

	@Override
	public void setPaymentMethod(String paymentMethod) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentMethod = paymentMethod;
	}

	@JSON
	@Override
	public String getPaymentRefNo() {
		if (_paymentRefNo == null) {
			return "";
		}
		else {
			return _paymentRefNo;
		}
	}

	@Override
	public void setPaymentRefNo(String paymentRefNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentRefNo = paymentRefNo;
	}

	@JSON
	@Override
	public Date getPolicyEffFromNo() {
		return _policyEffFromNo;
	}

	@Override
	public void setPolicyEffFromNo(Date policyEffFromNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyEffFromNo = policyEffFromNo;
	}

	@JSON
	@Override
	public Date getPolicyEffTo() {
		return _policyEffTo;
	}

	@Override
	public void setPolicyEffTo(Date policyEffTo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyEffTo = policyEffTo;
	}

	@JSON
	@Override
	public Date getPolicyEffDate() {
		return _policyEffDate;
	}

	@Override
	public void setPolicyEffDate(Date policyEffDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyEffDate = policyEffDate;
	}

	@JSON
	@Override
	public Date getPolicyIssueDate() {
		return _policyIssueDate;
	}

	@Override
	public void setPolicyIssueDate(Date policyIssueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyIssueDate = policyIssueDate;
	}

	@JSON
	@Override
	public String getPolicyNo() {
		if (_policyNo == null) {
			return "";
		}
		else {
			return _policyNo;
		}
	}

	@Override
	public void setPolicyNo(String policyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyNo = policyNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPolicyNo() {
		return getColumnOriginalValue("POLICY_NO");
	}

	@JSON
	@Override
	public String getPolicyRefNo() {
		if (_policyRefNo == null) {
			return "";
		}
		else {
			return _policyRefNo;
		}
	}

	@Override
	public void setPolicyRefNo(String policyRefNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyRefNo = policyRefNo;
	}

	@JSON
	@Override
	public String getPolicyStatusCode() {
		if (_policyStatusCode == null) {
			return "";
		}
		else {
			return _policyStatusCode;
		}
	}

	@Override
	public void setPolicyStatusCode(String policyStatusCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyStatusCode = policyStatusCode;
	}

	@JSON
	@Override
	public String getProductCode() {
		if (_productCode == null) {
			return "";
		}
		else {
			return _productCode;
		}
	}

	@Override
	public void setProductCode(String productCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productCode = productCode;
	}

	@JSON
	@Override
	public String getPurposeOfVehicle() {
		if (_purposeOfVehicle == null) {
			return "";
		}
		else {
			return _purposeOfVehicle;
		}
	}

	@Override
	public void setPurposeOfVehicle(String purposeOfVehicle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_purposeOfVehicle = purposeOfVehicle;
	}

	@JSON
	@Override
	public long getQuotationId() {
		return _quotationId;
	}

	@Override
	public void setQuotationId(long quotationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quotationId = quotationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuotationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("QUOTATIONS_ID"));
	}

	@JSON
	@Override
	public String getReferenceNo() {
		if (_referenceNo == null) {
			return "";
		}
		else {
			return _referenceNo;
		}
	}

	@Override
	public void setReferenceNo(String referenceNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_referenceNo = referenceNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalReferenceNo() {
		return getColumnOriginalValue("REFERENCE_NO");
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_source = source;
	}

	@JSON
	@Override
	public String getTransaction() {
		if (_transaction == null) {
			return "";
		}
		else {
			return _transaction;
		}
	}

	@Override
	public void setTransaction(String transaction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transaction = transaction;
	}

	@JSON
	@Override
	public String getVehicleBodyType() {
		if (_vehicleBodyType == null) {
			return "";
		}
		else {
			return _vehicleBodyType;
		}
	}

	@Override
	public void setVehicleBodyType(String vehicleBodyType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleBodyType = vehicleBodyType;
	}

	@JSON
	@Override
	public long getVehicleCapacity() {
		return _vehicleCapacity;
	}

	@Override
	public void setVehicleCapacity(long vehicleCapacity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleCapacity = vehicleCapacity;
	}

	@JSON
	@Override
	public String getVehicleChassisNo() {
		if (_vehicleChassisNo == null) {
			return "";
		}
		else {
			return _vehicleChassisNo;
		}
	}

	@Override
	public void setVehicleChassisNo(String vehicleChassisNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleChassisNo = vehicleChassisNo;
	}

	@JSON
	@Override
	public String getVehicleColor() {
		if (_vehicleColor == null) {
			return "";
		}
		else {
			return _vehicleColor;
		}
	}

	@Override
	public void setVehicleColor(String vehicleColor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleColor = vehicleColor;
	}

	@JSON
	@Override
	public long getVehicleCylinder() {
		return _vehicleCylinder;
	}

	@Override
	public void setVehicleCylinder(long vehicleCylinder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleCylinder = vehicleCylinder;
	}

	@JSON
	@Override
	public Date getVehicleEstExpiryDate() {
		return _vehicleEstExpiryDate;
	}

	@Override
	public void setVehicleEstExpiryDate(Date vehicleEstExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleEstExpiryDate = vehicleEstExpiryDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalVehicleEstExpiryDate() {
		return getColumnOriginalValue("VEHICLE_EST_EXP_DATE");
	}

	@JSON
	@Override
	public long getVehicleId() {
		return _vehicleId;
	}

	@Override
	public void setVehicleId(long vehicleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleId = vehicleId;
	}

	@JSON
	@Override
	public long getVehicleIdType() {
		return _vehicleIdType;
	}

	@Override
	public void setVehicleIdType(long vehicleIdType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleIdType = vehicleIdType;
	}

	@JSON
	@Override
	public String getVehicleMake() {
		if (_vehicleMake == null) {
			return "";
		}
		else {
			return _vehicleMake;
		}
	}

	@Override
	public void setVehicleMake(String vehicleMake) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleMake = vehicleMake;
	}

	@JSON
	@Override
	public long getVehicleMfgYear() {
		return _vehicleMfgYear;
	}

	@Override
	public void setVehicleMfgYear(long vehicleMfgYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleMfgYear = vehicleMfgYear;
	}

	@JSON
	@Override
	public String getVehicleModel() {
		if (_vehicleModel == null) {
			return "";
		}
		else {
			return _vehicleModel;
		}
	}

	@Override
	public void setVehicleModel(String vehicleModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleModel = vehicleModel;
	}

	@JSON
	@Override
	public String getVehiclePlateL1() {
		if (_vehiclePlateL1 == null) {
			return "";
		}
		else {
			return _vehiclePlateL1;
		}
	}

	@Override
	public void setVehiclePlateL1(String vehiclePlateL1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehiclePlateL1 = vehiclePlateL1;
	}

	@JSON
	@Override
	public String getVehiclePlateL2() {
		if (_vehiclePlateL2 == null) {
			return "";
		}
		else {
			return _vehiclePlateL2;
		}
	}

	@Override
	public void setVehiclePlateL2(String vehiclePlateL2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehiclePlateL2 = vehiclePlateL2;
	}

	@JSON
	@Override
	public String getVehiclePlateL3() {
		if (_vehiclePlateL3 == null) {
			return "";
		}
		else {
			return _vehiclePlateL3;
		}
	}

	@Override
	public void setVehiclePlateL3(String vehiclePlateL3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehiclePlateL3 = vehiclePlateL3;
	}

	@JSON
	@Override
	public long getVehiclePlateNo() {
		return _vehiclePlateNo;
	}

	@Override
	public void setVehiclePlateNo(long vehiclePlateNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehiclePlateNo = vehiclePlateNo;
	}

	@JSON
	@Override
	public String getVehiclePlateType() {
		if (_vehiclePlateType == null) {
			return "";
		}
		else {
			return _vehiclePlateType;
		}
	}

	@Override
	public void setVehiclePlateType(String vehiclePlateType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehiclePlateType = vehiclePlateType;
	}

	@JSON
	@Override
	public long getVehicleValue() {
		return _vehicleValue;
	}

	@Override
	public void setVehicleValue(long vehicleValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleValue = vehicleValue;
	}

	@JSON
	@Override
	public long getVehicleWeight() {
		return _vehicleWeight;
	}

	@Override
	public void setVehicleWeight(long vehicleWeight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleWeight = vehicleWeight;
	}

	@JSON
	@Override
	public String getVehicleCity() {
		if (_vehicleCity == null) {
			return "";
		}
		else {
			return _vehicleCity;
		}
	}

	@Override
	public void setVehicleCity(String vehicleCity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleCity = vehicleCity;
	}

	@JSON
	@Override
	public long getVehicleCurrentMileage() {
		return _vehicleCurrentMileage;
	}

	@Override
	public void setVehicleCurrentMileage(long vehicleCurrentMileage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleCurrentMileage = vehicleCurrentMileage;
	}

	@JSON
	@Override
	public long getVehicleLowerExpectedMileagePerYear() {
		return _vehicleLowerExpectedMileagePerYear;
	}

	@Override
	public void setVehicleLowerExpectedMileagePerYear(
		long vehicleLowerExpectedMileagePerYear) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleLowerExpectedMileagePerYear =
			vehicleLowerExpectedMileagePerYear;
	}

	@JSON
	@Override
	public long getVehicleUpperExpectedMileagePerYear() {
		return _vehicleUpperExpectedMileagePerYear;
	}

	@Override
	public void setVehicleUpperExpectedMileagePerYear(
		long vehicleUpperExpectedMileagePerYear) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleUpperExpectedMileagePerYear =
			vehicleUpperExpectedMileagePerYear;
	}

	@JSON
	@Override
	public String getVehicleNightLocation() {
		if (_vehicleNightLocation == null) {
			return "";
		}
		else {
			return _vehicleNightLocation;
		}
	}

	@Override
	public void setVehicleNightLocation(String vehicleNightLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleNightLocation = vehicleNightLocation;
	}

	@JSON
	@Override
	public String getVehicleEngineSize() {
		if (_vehicleEngineSize == null) {
			return "";
		}
		else {
			return _vehicleEngineSize;
		}
	}

	@Override
	public void setVehicleEngineSize(String vehicleEngineSize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleEngineSize = vehicleEngineSize;
	}

	@JSON
	@Override
	public String getVehicleTransType() {
		if (_vehicleTransType == null) {
			return "";
		}
		else {
			return _vehicleTransType;
		}
	}

	@Override
	public void setVehicleTransType(String vehicleTransType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleTransType = vehicleTransType;
	}

	@JSON
	@Override
	public long getVehAxleWeight() {
		return _vehAxleWeight;
	}

	@Override
	public void setVehAxleWeight(long vehAxleWeight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehAxleWeight = vehAxleWeight;
	}

	@JSON
	@Override
	public String getVehCarMods() {
		if (_vehCarMods == null) {
			return "";
		}
		else {
			return _vehCarMods;
		}
	}

	@Override
	public void setVehCarMods(String vehCarMods) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehCarMods = vehCarMods;
	}

	@JSON
	@Override
	public String getVehSpecs() {
		if (_vehSpecs == null) {
			return "";
		}
		else {
			return _vehSpecs;
		}
	}

	@Override
	public void setVehSpecs(String vehSpecs) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehSpecs = vehSpecs;
	}

	@JSON
	@Override
	public String getOccCode() {
		if (_occCode == null) {
			return "";
		}
		else {
			return _occCode;
		}
	}

	@Override
	public void setOccCode(String occCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occCode = occCode;
	}

	@JSON
	@Override
	public String getInsuredIBAN() {
		if (_insuredIBAN == null) {
			return "";
		}
		else {
			return _insuredIBAN;
		}
	}

	@Override
	public void setInsuredIBAN(String insuredIBAN) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredIBAN = insuredIBAN;
	}

	@JSON
	@Override
	public String getInsuredDobH() {
		if (_insuredDobH == null) {
			return "";
		}
		else {
			return _insuredDobH;
		}
	}

	@Override
	public void setInsuredDobH(String insuredDobH) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_insuredDobH = insuredDobH;
	}

	@JSON
	@Override
	public double getNetPrem() {
		return _netPrem;
	}

	@Override
	public void setNetPrem(double netPrem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_netPrem = netPrem;
	}

	@JSON
	@Override
	public double getDiscountAmount() {
		return _discountAmount;
	}

	@Override
	public void setDiscountAmount(double discountAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_discountAmount = discountAmount;
	}

	@JSON
	@Override
	public double getLoyaltyDiscountAmount() {
		return _loyaltyDiscountAmount;
	}

	@Override
	public void setLoyaltyDiscountAmount(double loyaltyDiscountAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loyaltyDiscountAmount = loyaltyDiscountAmount;
	}

	@JSON
	@Override
	public double getDiscountPrem() {
		return _discountPrem;
	}

	@Override
	public void setDiscountPrem(double discountPrem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_discountPrem = discountPrem;
	}

	@JSON
	@Override
	public double getLoyaltyDiscountPer() {
		return _loyaltyDiscountPer;
	}

	@Override
	public void setLoyaltyDiscountPer(double loyaltyDiscountPer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loyaltyDiscountPer = loyaltyDiscountPer;
	}

	@JSON
	@Override
	public double getLoadingAmount() {
		return _loadingAmount;
	}

	@Override
	public void setLoadingAmount(double loadingAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loadingAmount = loadingAmount;
	}

	@JSON
	@Override
	public double getPolicyTaxes() {
		return _policyTaxes;
	}

	@Override
	public void setPolicyTaxes(double policyTaxes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyTaxes = policyTaxes;
	}

	@JSON
	@Override
	public double getPolicyFees() {
		return _policyFees;
	}

	@Override
	public void setPolicyFees(double policyFees) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyFees = policyFees;
	}

	@JSON
	@Override
	public double getTotalCoverPrem() {
		return _totalCoverPrem;
	}

	@Override
	public void setTotalCoverPrem(double totalCoverPrem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalCoverPrem = totalCoverPrem;
	}

	@JSON
	@Override
	public double getGrossPrem() {
		return _grossPrem;
	}

	@Override
	public void setGrossPrem(double grossPrem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_grossPrem = grossPrem;
	}

	@JSON
	@Override
	public String getExistingPolicyNo() {
		if (_existingPolicyNo == null) {
			return "";
		}
		else {
			return _existingPolicyNo;
		}
	}

	@Override
	public void setExistingPolicyNo(String existingPolicyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_existingPolicyNo = existingPolicyNo;
	}

	@JSON
	@Override
	public String getExistingCompanyName() {
		if (_existingCompanyName == null) {
			return "";
		}
		else {
			return _existingCompanyName;
		}
	}

	@Override
	public void setExistingCompanyName(String existingCompanyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_existingCompanyName = existingCompanyName;
	}

	@JSON
	@Override
	public String getExistingExpDate() {
		if (_existingExpDate == null) {
			return "";
		}
		else {
			return _existingExpDate;
		}
	}

	@Override
	public void setExistingExpDate(String existingExpDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_existingExpDate = existingExpDate;
	}

	@JSON
	@Override
	public String getPolicyStatusMsg() {
		if (_policyStatusMsg == null) {
			return "";
		}
		else {
			return _policyStatusMsg;
		}
	}

	@Override
	public void setPolicyStatusMsg(String policyStatusMsg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyStatusMsg = policyStatusMsg;
	}

	@JSON
	@Override
	public long getYakeenRefNo() {
		return _yakeenRefNo;
	}

	@Override
	public void setYakeenRefNo(long yakeenRefNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yakeenRefNo = yakeenRefNo;
	}

	@JSON
	@Override
	public Date getQuoteSubmissionDate() {
		return _quoteSubmissionDate;
	}

	@Override
	public void setQuoteSubmissionDate(Date quoteSubmissionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quoteSubmissionDate = quoteSubmissionDate;
	}

	@JSON
	@Override
	public String getQuoteStatus() {
		if (_quoteStatus == null) {
			return "";
		}
		else {
			return _quoteStatus;
		}
	}

	@Override
	public void setQuoteStatus(String quoteStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quoteStatus = quoteStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalQuoteStatus() {
		return getColumnOriginalValue("QUOTE_STATUS");
	}

	@JSON
	@Override
	public String getSaeedService() {
		if (_saeedService == null) {
			return "";
		}
		else {
			return _saeedService;
		}
	}

	@Override
	public void setSaeedService(String saeedService) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_saeedService = saeedService;
	}

	@JSON
	@Override
	public double getDriverAccidents() {
		return _driverAccidents;
	}

	@Override
	public void setDriverAccidents(double driverAccidents) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverAccidents = driverAccidents;
	}

	@JSON
	@Override
	public double getDriverAgeLess21() {
		return _driverAgeLess21;
	}

	@Override
	public void setDriverAgeLess21(double driverAgeLess21) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverAgeLess21 = driverAgeLess21;
	}

	@JSON
	@Override
	public double getAgencyRepairOut() {
		return _agencyRepairOut;
	}

	@Override
	public void setAgencyRepairOut(double agencyRepairOut) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agencyRepairOut = agencyRepairOut;
	}

	@JSON
	@Override
	public double getTotalAfterDiscount() {
		return _totalAfterDiscount;
	}

	@Override
	public void setTotalAfterDiscount(double totalAfterDiscount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalAfterDiscount = totalAfterDiscount;
	}

	@JSON
	@Override
	public double getTotalBeforeDisc() {
		return _totalBeforeDisc;
	}

	@Override
	public void setTotalBeforeDisc(double totalBeforeDisc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalBeforeDisc = totalBeforeDisc;
	}

	@JSON
	@Override
	public boolean getSmsFlag() {
		return _smsFlag;
	}

	@JSON
	@Override
	public boolean isSmsFlag() {
		return _smsFlag;
	}

	@Override
	public void setSmsFlag(boolean smsFlag) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_smsFlag = smsFlag;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalSmsFlag() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("SMS_FLAG"));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Quotations.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Quotations toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Quotations>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuotationsImpl quotationsImpl = new QuotationsImpl();

		quotationsImpl.setAddressAddNo(getAddressAddNo());
		quotationsImpl.setAddressBuildingNo(getAddressBuildingNo());
		quotationsImpl.setAddressDistrict(getAddressDistrict());
		quotationsImpl.setAddressStreet(getAddressStreet());
		quotationsImpl.setAddressUnitNo(getAddressUnitNo());
		quotationsImpl.setAddressZipCode(getAddressZipCode());
		quotationsImpl.setAddCover(getAddCover());
		quotationsImpl.setAddDriver(getAddDriver());
		quotationsImpl.setAgencyRepair(getAgencyRepair());
		quotationsImpl.setCity(getCity());
		quotationsImpl.setDeductibleValue(getDeductibleValue());
		quotationsImpl.setInsuredDob(getInsuredDob());
		quotationsImpl.setInsuredEmail(getInsuredEmail());
		quotationsImpl.setInsuredGender(getInsuredGender());
		quotationsImpl.setInsuredId(getInsuredId());
		quotationsImpl.setInsuredIdType(getInsuredIdType());
		quotationsImpl.setInsuredMobile(getInsuredMobile());
		quotationsImpl.setInsuredName(getInsuredName());
		quotationsImpl.setInsuredNationality(getInsuredNationality());
		quotationsImpl.setInsuredEducation(getInsuredEducation());
		quotationsImpl.setInsuredMaritalStatus(getInsuredMaritalStatus());
		quotationsImpl.setInsuredNoChildUnder16(getInsuredNoChildUnder16());
		quotationsImpl.setLoyaltyDiscount(getLoyaltyDiscount());
		quotationsImpl.setNcdYears(getNcdYears());
		quotationsImpl.setPaymemtAmount(getPaymemtAmount());
		quotationsImpl.setPaymentMethod(getPaymentMethod());
		quotationsImpl.setPaymentRefNo(getPaymentRefNo());
		quotationsImpl.setPolicyEffFromNo(getPolicyEffFromNo());
		quotationsImpl.setPolicyEffTo(getPolicyEffTo());
		quotationsImpl.setPolicyEffDate(getPolicyEffDate());
		quotationsImpl.setPolicyIssueDate(getPolicyIssueDate());
		quotationsImpl.setPolicyNo(getPolicyNo());
		quotationsImpl.setPolicyRefNo(getPolicyRefNo());
		quotationsImpl.setPolicyStatusCode(getPolicyStatusCode());
		quotationsImpl.setProductCode(getProductCode());
		quotationsImpl.setPurposeOfVehicle(getPurposeOfVehicle());
		quotationsImpl.setQuotationId(getQuotationId());
		quotationsImpl.setReferenceNo(getReferenceNo());
		quotationsImpl.setSource(getSource());
		quotationsImpl.setTransaction(getTransaction());
		quotationsImpl.setVehicleBodyType(getVehicleBodyType());
		quotationsImpl.setVehicleCapacity(getVehicleCapacity());
		quotationsImpl.setVehicleChassisNo(getVehicleChassisNo());
		quotationsImpl.setVehicleColor(getVehicleColor());
		quotationsImpl.setVehicleCylinder(getVehicleCylinder());
		quotationsImpl.setVehicleEstExpiryDate(getVehicleEstExpiryDate());
		quotationsImpl.setVehicleId(getVehicleId());
		quotationsImpl.setVehicleIdType(getVehicleIdType());
		quotationsImpl.setVehicleMake(getVehicleMake());
		quotationsImpl.setVehicleMfgYear(getVehicleMfgYear());
		quotationsImpl.setVehicleModel(getVehicleModel());
		quotationsImpl.setVehiclePlateL1(getVehiclePlateL1());
		quotationsImpl.setVehiclePlateL2(getVehiclePlateL2());
		quotationsImpl.setVehiclePlateL3(getVehiclePlateL3());
		quotationsImpl.setVehiclePlateNo(getVehiclePlateNo());
		quotationsImpl.setVehiclePlateType(getVehiclePlateType());
		quotationsImpl.setVehicleValue(getVehicleValue());
		quotationsImpl.setVehicleWeight(getVehicleWeight());
		quotationsImpl.setVehicleCity(getVehicleCity());
		quotationsImpl.setVehicleCurrentMileage(getVehicleCurrentMileage());
		quotationsImpl.setVehicleLowerExpectedMileagePerYear(
			getVehicleLowerExpectedMileagePerYear());
		quotationsImpl.setVehicleUpperExpectedMileagePerYear(
			getVehicleUpperExpectedMileagePerYear());
		quotationsImpl.setVehicleNightLocation(getVehicleNightLocation());
		quotationsImpl.setVehicleEngineSize(getVehicleEngineSize());
		quotationsImpl.setVehicleTransType(getVehicleTransType());
		quotationsImpl.setVehAxleWeight(getVehAxleWeight());
		quotationsImpl.setVehCarMods(getVehCarMods());
		quotationsImpl.setVehSpecs(getVehSpecs());
		quotationsImpl.setOccCode(getOccCode());
		quotationsImpl.setInsuredIBAN(getInsuredIBAN());
		quotationsImpl.setInsuredDobH(getInsuredDobH());
		quotationsImpl.setNetPrem(getNetPrem());
		quotationsImpl.setDiscountAmount(getDiscountAmount());
		quotationsImpl.setLoyaltyDiscountAmount(getLoyaltyDiscountAmount());
		quotationsImpl.setDiscountPrem(getDiscountPrem());
		quotationsImpl.setLoyaltyDiscountPer(getLoyaltyDiscountPer());
		quotationsImpl.setLoadingAmount(getLoadingAmount());
		quotationsImpl.setPolicyTaxes(getPolicyTaxes());
		quotationsImpl.setPolicyFees(getPolicyFees());
		quotationsImpl.setTotalCoverPrem(getTotalCoverPrem());
		quotationsImpl.setGrossPrem(getGrossPrem());
		quotationsImpl.setExistingPolicyNo(getExistingPolicyNo());
		quotationsImpl.setExistingCompanyName(getExistingCompanyName());
		quotationsImpl.setExistingExpDate(getExistingExpDate());
		quotationsImpl.setPolicyStatusMsg(getPolicyStatusMsg());
		quotationsImpl.setYakeenRefNo(getYakeenRefNo());
		quotationsImpl.setQuoteSubmissionDate(getQuoteSubmissionDate());
		quotationsImpl.setQuoteStatus(getQuoteStatus());
		quotationsImpl.setSaeedService(getSaeedService());
		quotationsImpl.setDriverAccidents(getDriverAccidents());
		quotationsImpl.setDriverAgeLess21(getDriverAgeLess21());
		quotationsImpl.setAgencyRepairOut(getAgencyRepairOut());
		quotationsImpl.setTotalAfterDiscount(getTotalAfterDiscount());
		quotationsImpl.setTotalBeforeDisc(getTotalBeforeDisc());
		quotationsImpl.setSmsFlag(isSmsFlag());

		quotationsImpl.resetOriginalValues();

		return quotationsImpl;
	}

	@Override
	public int compareTo(Quotations quotations) {
		int value = 0;

		value = DateUtil.compareTo(
			getVehicleEstExpiryDate(), quotations.getVehicleEstExpiryDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Quotations)) {
			return false;
		}

		Quotations quotations = (Quotations)object;

		long primaryKey = quotations.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();
	}

	@Override
	public CacheModel<Quotations> toCacheModel() {
		QuotationsCacheModel quotationsCacheModel = new QuotationsCacheModel();

		quotationsCacheModel.addressAddNo = getAddressAddNo();

		quotationsCacheModel.addressBuildingNo = getAddressBuildingNo();

		quotationsCacheModel.addressDistrict = getAddressDistrict();

		String addressDistrict = quotationsCacheModel.addressDistrict;

		if ((addressDistrict != null) && (addressDistrict.length() == 0)) {
			quotationsCacheModel.addressDistrict = null;
		}

		quotationsCacheModel.addressStreet = getAddressStreet();

		String addressStreet = quotationsCacheModel.addressStreet;

		if ((addressStreet != null) && (addressStreet.length() == 0)) {
			quotationsCacheModel.addressStreet = null;
		}

		quotationsCacheModel.addressUnitNo = getAddressUnitNo();

		quotationsCacheModel.addressZipCode = getAddressZipCode();

		quotationsCacheModel.addCover = getAddCover();

		String addCover = quotationsCacheModel.addCover;

		if ((addCover != null) && (addCover.length() == 0)) {
			quotationsCacheModel.addCover = null;
		}

		quotationsCacheModel.addDriver = getAddDriver();

		String addDriver = quotationsCacheModel.addDriver;

		if ((addDriver != null) && (addDriver.length() == 0)) {
			quotationsCacheModel.addDriver = null;
		}

		quotationsCacheModel.agencyRepair = getAgencyRepair();

		String agencyRepair = quotationsCacheModel.agencyRepair;

		if ((agencyRepair != null) && (agencyRepair.length() == 0)) {
			quotationsCacheModel.agencyRepair = null;
		}

		quotationsCacheModel.city = getCity();

		String city = quotationsCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			quotationsCacheModel.city = null;
		}

		quotationsCacheModel.deductibleValue = getDeductibleValue();

		String deductibleValue = quotationsCacheModel.deductibleValue;

		if ((deductibleValue != null) && (deductibleValue.length() == 0)) {
			quotationsCacheModel.deductibleValue = null;
		}

		Date insuredDob = getInsuredDob();

		if (insuredDob != null) {
			quotationsCacheModel.insuredDob = insuredDob.getTime();
		}
		else {
			quotationsCacheModel.insuredDob = Long.MIN_VALUE;
		}

		quotationsCacheModel.insuredEmail = getInsuredEmail();

		String insuredEmail = quotationsCacheModel.insuredEmail;

		if ((insuredEmail != null) && (insuredEmail.length() == 0)) {
			quotationsCacheModel.insuredEmail = null;
		}

		quotationsCacheModel.insuredGender = getInsuredGender();

		String insuredGender = quotationsCacheModel.insuredGender;

		if ((insuredGender != null) && (insuredGender.length() == 0)) {
			quotationsCacheModel.insuredGender = null;
		}

		quotationsCacheModel.insuredId = getInsuredId();

		quotationsCacheModel.insuredIdType = getInsuredIdType();

		quotationsCacheModel.insuredMobile = getInsuredMobile();

		quotationsCacheModel.insuredName = getInsuredName();

		String insuredName = quotationsCacheModel.insuredName;

		if ((insuredName != null) && (insuredName.length() == 0)) {
			quotationsCacheModel.insuredName = null;
		}

		quotationsCacheModel.insuredNationality = getInsuredNationality();

		String insuredNationality = quotationsCacheModel.insuredNationality;

		if ((insuredNationality != null) &&
			(insuredNationality.length() == 0)) {

			quotationsCacheModel.insuredNationality = null;
		}

		quotationsCacheModel.insuredEducation = getInsuredEducation();

		String insuredEducation = quotationsCacheModel.insuredEducation;

		if ((insuredEducation != null) && (insuredEducation.length() == 0)) {
			quotationsCacheModel.insuredEducation = null;
		}

		quotationsCacheModel.insuredMaritalStatus = getInsuredMaritalStatus();

		String insuredMaritalStatus = quotationsCacheModel.insuredMaritalStatus;

		if ((insuredMaritalStatus != null) &&
			(insuredMaritalStatus.length() == 0)) {

			quotationsCacheModel.insuredMaritalStatus = null;
		}

		quotationsCacheModel.insuredNoChildUnder16 = getInsuredNoChildUnder16();

		quotationsCacheModel.loyaltyDiscount = getLoyaltyDiscount();

		String loyaltyDiscount = quotationsCacheModel.loyaltyDiscount;

		if ((loyaltyDiscount != null) && (loyaltyDiscount.length() == 0)) {
			quotationsCacheModel.loyaltyDiscount = null;
		}

		quotationsCacheModel.ncdYears = getNcdYears();

		quotationsCacheModel.paymemtAmount = getPaymemtAmount();

		quotationsCacheModel.paymentMethod = getPaymentMethod();

		String paymentMethod = quotationsCacheModel.paymentMethod;

		if ((paymentMethod != null) && (paymentMethod.length() == 0)) {
			quotationsCacheModel.paymentMethod = null;
		}

		quotationsCacheModel.paymentRefNo = getPaymentRefNo();

		String paymentRefNo = quotationsCacheModel.paymentRefNo;

		if ((paymentRefNo != null) && (paymentRefNo.length() == 0)) {
			quotationsCacheModel.paymentRefNo = null;
		}

		Date policyEffFromNo = getPolicyEffFromNo();

		if (policyEffFromNo != null) {
			quotationsCacheModel.policyEffFromNo = policyEffFromNo.getTime();
		}
		else {
			quotationsCacheModel.policyEffFromNo = Long.MIN_VALUE;
		}

		Date policyEffTo = getPolicyEffTo();

		if (policyEffTo != null) {
			quotationsCacheModel.policyEffTo = policyEffTo.getTime();
		}
		else {
			quotationsCacheModel.policyEffTo = Long.MIN_VALUE;
		}

		Date policyEffDate = getPolicyEffDate();

		if (policyEffDate != null) {
			quotationsCacheModel.policyEffDate = policyEffDate.getTime();
		}
		else {
			quotationsCacheModel.policyEffDate = Long.MIN_VALUE;
		}

		Date policyIssueDate = getPolicyIssueDate();

		if (policyIssueDate != null) {
			quotationsCacheModel.policyIssueDate = policyIssueDate.getTime();
		}
		else {
			quotationsCacheModel.policyIssueDate = Long.MIN_VALUE;
		}

		quotationsCacheModel.policyNo = getPolicyNo();

		String policyNo = quotationsCacheModel.policyNo;

		if ((policyNo != null) && (policyNo.length() == 0)) {
			quotationsCacheModel.policyNo = null;
		}

		quotationsCacheModel.policyRefNo = getPolicyRefNo();

		String policyRefNo = quotationsCacheModel.policyRefNo;

		if ((policyRefNo != null) && (policyRefNo.length() == 0)) {
			quotationsCacheModel.policyRefNo = null;
		}

		quotationsCacheModel.policyStatusCode = getPolicyStatusCode();

		String policyStatusCode = quotationsCacheModel.policyStatusCode;

		if ((policyStatusCode != null) && (policyStatusCode.length() == 0)) {
			quotationsCacheModel.policyStatusCode = null;
		}

		quotationsCacheModel.productCode = getProductCode();

		String productCode = quotationsCacheModel.productCode;

		if ((productCode != null) && (productCode.length() == 0)) {
			quotationsCacheModel.productCode = null;
		}

		quotationsCacheModel.purposeOfVehicle = getPurposeOfVehicle();

		String purposeOfVehicle = quotationsCacheModel.purposeOfVehicle;

		if ((purposeOfVehicle != null) && (purposeOfVehicle.length() == 0)) {
			quotationsCacheModel.purposeOfVehicle = null;
		}

		quotationsCacheModel.quotationId = getQuotationId();

		quotationsCacheModel.referenceNo = getReferenceNo();

		String referenceNo = quotationsCacheModel.referenceNo;

		if ((referenceNo != null) && (referenceNo.length() == 0)) {
			quotationsCacheModel.referenceNo = null;
		}

		quotationsCacheModel.source = getSource();

		String source = quotationsCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			quotationsCacheModel.source = null;
		}

		quotationsCacheModel.transaction = getTransaction();

		String transaction = quotationsCacheModel.transaction;

		if ((transaction != null) && (transaction.length() == 0)) {
			quotationsCacheModel.transaction = null;
		}

		quotationsCacheModel.vehicleBodyType = getVehicleBodyType();

		String vehicleBodyType = quotationsCacheModel.vehicleBodyType;

		if ((vehicleBodyType != null) && (vehicleBodyType.length() == 0)) {
			quotationsCacheModel.vehicleBodyType = null;
		}

		quotationsCacheModel.vehicleCapacity = getVehicleCapacity();

		quotationsCacheModel.vehicleChassisNo = getVehicleChassisNo();

		String vehicleChassisNo = quotationsCacheModel.vehicleChassisNo;

		if ((vehicleChassisNo != null) && (vehicleChassisNo.length() == 0)) {
			quotationsCacheModel.vehicleChassisNo = null;
		}

		quotationsCacheModel.vehicleColor = getVehicleColor();

		String vehicleColor = quotationsCacheModel.vehicleColor;

		if ((vehicleColor != null) && (vehicleColor.length() == 0)) {
			quotationsCacheModel.vehicleColor = null;
		}

		quotationsCacheModel.vehicleCylinder = getVehicleCylinder();

		Date vehicleEstExpiryDate = getVehicleEstExpiryDate();

		if (vehicleEstExpiryDate != null) {
			quotationsCacheModel.vehicleEstExpiryDate =
				vehicleEstExpiryDate.getTime();
		}
		else {
			quotationsCacheModel.vehicleEstExpiryDate = Long.MIN_VALUE;
		}

		quotationsCacheModel.vehicleId = getVehicleId();

		quotationsCacheModel.vehicleIdType = getVehicleIdType();

		quotationsCacheModel.vehicleMake = getVehicleMake();

		String vehicleMake = quotationsCacheModel.vehicleMake;

		if ((vehicleMake != null) && (vehicleMake.length() == 0)) {
			quotationsCacheModel.vehicleMake = null;
		}

		quotationsCacheModel.vehicleMfgYear = getVehicleMfgYear();

		quotationsCacheModel.vehicleModel = getVehicleModel();

		String vehicleModel = quotationsCacheModel.vehicleModel;

		if ((vehicleModel != null) && (vehicleModel.length() == 0)) {
			quotationsCacheModel.vehicleModel = null;
		}

		quotationsCacheModel.vehiclePlateL1 = getVehiclePlateL1();

		String vehiclePlateL1 = quotationsCacheModel.vehiclePlateL1;

		if ((vehiclePlateL1 != null) && (vehiclePlateL1.length() == 0)) {
			quotationsCacheModel.vehiclePlateL1 = null;
		}

		quotationsCacheModel.vehiclePlateL2 = getVehiclePlateL2();

		String vehiclePlateL2 = quotationsCacheModel.vehiclePlateL2;

		if ((vehiclePlateL2 != null) && (vehiclePlateL2.length() == 0)) {
			quotationsCacheModel.vehiclePlateL2 = null;
		}

		quotationsCacheModel.vehiclePlateL3 = getVehiclePlateL3();

		String vehiclePlateL3 = quotationsCacheModel.vehiclePlateL3;

		if ((vehiclePlateL3 != null) && (vehiclePlateL3.length() == 0)) {
			quotationsCacheModel.vehiclePlateL3 = null;
		}

		quotationsCacheModel.vehiclePlateNo = getVehiclePlateNo();

		quotationsCacheModel.vehiclePlateType = getVehiclePlateType();

		String vehiclePlateType = quotationsCacheModel.vehiclePlateType;

		if ((vehiclePlateType != null) && (vehiclePlateType.length() == 0)) {
			quotationsCacheModel.vehiclePlateType = null;
		}

		quotationsCacheModel.vehicleValue = getVehicleValue();

		quotationsCacheModel.vehicleWeight = getVehicleWeight();

		quotationsCacheModel.vehicleCity = getVehicleCity();

		String vehicleCity = quotationsCacheModel.vehicleCity;

		if ((vehicleCity != null) && (vehicleCity.length() == 0)) {
			quotationsCacheModel.vehicleCity = null;
		}

		quotationsCacheModel.vehicleCurrentMileage = getVehicleCurrentMileage();

		quotationsCacheModel.vehicleLowerExpectedMileagePerYear =
			getVehicleLowerExpectedMileagePerYear();

		quotationsCacheModel.vehicleUpperExpectedMileagePerYear =
			getVehicleUpperExpectedMileagePerYear();

		quotationsCacheModel.vehicleNightLocation = getVehicleNightLocation();

		String vehicleNightLocation = quotationsCacheModel.vehicleNightLocation;

		if ((vehicleNightLocation != null) &&
			(vehicleNightLocation.length() == 0)) {

			quotationsCacheModel.vehicleNightLocation = null;
		}

		quotationsCacheModel.vehicleEngineSize = getVehicleEngineSize();

		String vehicleEngineSize = quotationsCacheModel.vehicleEngineSize;

		if ((vehicleEngineSize != null) && (vehicleEngineSize.length() == 0)) {
			quotationsCacheModel.vehicleEngineSize = null;
		}

		quotationsCacheModel.vehicleTransType = getVehicleTransType();

		String vehicleTransType = quotationsCacheModel.vehicleTransType;

		if ((vehicleTransType != null) && (vehicleTransType.length() == 0)) {
			quotationsCacheModel.vehicleTransType = null;
		}

		quotationsCacheModel.vehAxleWeight = getVehAxleWeight();

		quotationsCacheModel.vehCarMods = getVehCarMods();

		String vehCarMods = quotationsCacheModel.vehCarMods;

		if ((vehCarMods != null) && (vehCarMods.length() == 0)) {
			quotationsCacheModel.vehCarMods = null;
		}

		quotationsCacheModel.vehSpecs = getVehSpecs();

		String vehSpecs = quotationsCacheModel.vehSpecs;

		if ((vehSpecs != null) && (vehSpecs.length() == 0)) {
			quotationsCacheModel.vehSpecs = null;
		}

		quotationsCacheModel.occCode = getOccCode();

		String occCode = quotationsCacheModel.occCode;

		if ((occCode != null) && (occCode.length() == 0)) {
			quotationsCacheModel.occCode = null;
		}

		quotationsCacheModel.insuredIBAN = getInsuredIBAN();

		String insuredIBAN = quotationsCacheModel.insuredIBAN;

		if ((insuredIBAN != null) && (insuredIBAN.length() == 0)) {
			quotationsCacheModel.insuredIBAN = null;
		}

		quotationsCacheModel.insuredDobH = getInsuredDobH();

		String insuredDobH = quotationsCacheModel.insuredDobH;

		if ((insuredDobH != null) && (insuredDobH.length() == 0)) {
			quotationsCacheModel.insuredDobH = null;
		}

		quotationsCacheModel.netPrem = getNetPrem();

		quotationsCacheModel.discountAmount = getDiscountAmount();

		quotationsCacheModel.loyaltyDiscountAmount = getLoyaltyDiscountAmount();

		quotationsCacheModel.discountPrem = getDiscountPrem();

		quotationsCacheModel.loyaltyDiscountPer = getLoyaltyDiscountPer();

		quotationsCacheModel.loadingAmount = getLoadingAmount();

		quotationsCacheModel.policyTaxes = getPolicyTaxes();

		quotationsCacheModel.policyFees = getPolicyFees();

		quotationsCacheModel.totalCoverPrem = getTotalCoverPrem();

		quotationsCacheModel.grossPrem = getGrossPrem();

		quotationsCacheModel.existingPolicyNo = getExistingPolicyNo();

		String existingPolicyNo = quotationsCacheModel.existingPolicyNo;

		if ((existingPolicyNo != null) && (existingPolicyNo.length() == 0)) {
			quotationsCacheModel.existingPolicyNo = null;
		}

		quotationsCacheModel.existingCompanyName = getExistingCompanyName();

		String existingCompanyName = quotationsCacheModel.existingCompanyName;

		if ((existingCompanyName != null) &&
			(existingCompanyName.length() == 0)) {

			quotationsCacheModel.existingCompanyName = null;
		}

		quotationsCacheModel.existingExpDate = getExistingExpDate();

		String existingExpDate = quotationsCacheModel.existingExpDate;

		if ((existingExpDate != null) && (existingExpDate.length() == 0)) {
			quotationsCacheModel.existingExpDate = null;
		}

		quotationsCacheModel.policyStatusMsg = getPolicyStatusMsg();

		String policyStatusMsg = quotationsCacheModel.policyStatusMsg;

		if ((policyStatusMsg != null) && (policyStatusMsg.length() == 0)) {
			quotationsCacheModel.policyStatusMsg = null;
		}

		quotationsCacheModel.yakeenRefNo = getYakeenRefNo();

		Date quoteSubmissionDate = getQuoteSubmissionDate();

		if (quoteSubmissionDate != null) {
			quotationsCacheModel.quoteSubmissionDate =
				quoteSubmissionDate.getTime();
		}
		else {
			quotationsCacheModel.quoteSubmissionDate = Long.MIN_VALUE;
		}

		quotationsCacheModel.quoteStatus = getQuoteStatus();

		String quoteStatus = quotationsCacheModel.quoteStatus;

		if ((quoteStatus != null) && (quoteStatus.length() == 0)) {
			quotationsCacheModel.quoteStatus = null;
		}

		quotationsCacheModel.saeedService = getSaeedService();

		String saeedService = quotationsCacheModel.saeedService;

		if ((saeedService != null) && (saeedService.length() == 0)) {
			quotationsCacheModel.saeedService = null;
		}

		quotationsCacheModel.driverAccidents = getDriverAccidents();

		quotationsCacheModel.driverAgeLess21 = getDriverAgeLess21();

		quotationsCacheModel.agencyRepairOut = getAgencyRepairOut();

		quotationsCacheModel.totalAfterDiscount = getTotalAfterDiscount();

		quotationsCacheModel.totalBeforeDisc = getTotalBeforeDisc();

		quotationsCacheModel.smsFlag = isSmsFlag();

		return quotationsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Quotations, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Quotations, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Quotations, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Quotations)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Quotations, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Quotations, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Quotations, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Quotations)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Quotations>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _addressAddNo;
	private long _addressBuildingNo;
	private String _addressDistrict;
	private String _addressStreet;
	private long _addressUnitNo;
	private long _addressZipCode;
	private String _addCover;
	private String _addDriver;
	private String _agencyRepair;
	private String _city;
	private String _deductibleValue;
	private Date _insuredDob;
	private String _insuredEmail;
	private String _insuredGender;
	private long _insuredId;
	private long _insuredIdType;
	private long _insuredMobile;
	private String _insuredName;
	private String _insuredNationality;
	private String _insuredEducation;
	private String _insuredMaritalStatus;
	private long _insuredNoChildUnder16;
	private String _loyaltyDiscount;
	private long _ncdYears;
	private long _paymemtAmount;
	private String _paymentMethod;
	private String _paymentRefNo;
	private Date _policyEffFromNo;
	private Date _policyEffTo;
	private Date _policyEffDate;
	private Date _policyIssueDate;
	private String _policyNo;
	private String _policyRefNo;
	private String _policyStatusCode;
	private String _productCode;
	private String _purposeOfVehicle;
	private long _quotationId;
	private String _referenceNo;
	private String _source;
	private String _transaction;
	private String _vehicleBodyType;
	private long _vehicleCapacity;
	private String _vehicleChassisNo;
	private String _vehicleColor;
	private long _vehicleCylinder;
	private Date _vehicleEstExpiryDate;
	private long _vehicleId;
	private long _vehicleIdType;
	private String _vehicleMake;
	private long _vehicleMfgYear;
	private String _vehicleModel;
	private String _vehiclePlateL1;
	private String _vehiclePlateL2;
	private String _vehiclePlateL3;
	private long _vehiclePlateNo;
	private String _vehiclePlateType;
	private long _vehicleValue;
	private long _vehicleWeight;
	private String _vehicleCity;
	private long _vehicleCurrentMileage;
	private long _vehicleLowerExpectedMileagePerYear;
	private long _vehicleUpperExpectedMileagePerYear;
	private String _vehicleNightLocation;
	private String _vehicleEngineSize;
	private String _vehicleTransType;
	private long _vehAxleWeight;
	private String _vehCarMods;
	private String _vehSpecs;
	private String _occCode;
	private String _insuredIBAN;
	private String _insuredDobH;
	private double _netPrem;
	private double _discountAmount;
	private double _loyaltyDiscountAmount;
	private double _discountPrem;
	private double _loyaltyDiscountPer;
	private double _loadingAmount;
	private double _policyTaxes;
	private double _policyFees;
	private double _totalCoverPrem;
	private double _grossPrem;
	private String _existingPolicyNo;
	private String _existingCompanyName;
	private String _existingExpDate;
	private String _policyStatusMsg;
	private long _yakeenRefNo;
	private Date _quoteSubmissionDate;
	private String _quoteStatus;
	private String _saeedService;
	private double _driverAccidents;
	private double _driverAgeLess21;
	private double _agencyRepairOut;
	private double _totalAfterDiscount;
	private double _totalBeforeDisc;
	private boolean _smsFlag;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Quotations, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Quotations)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ADDRESS_ADD_NUMBER", _addressAddNo);
		_columnOriginalValues.put("ADDRESS_BLDG_NO", _addressBuildingNo);
		_columnOriginalValues.put("ADDRESS_DISTRICT", _addressDistrict);
		_columnOriginalValues.put("ADDRESS_STREET", _addressStreet);
		_columnOriginalValues.put("ADDRESS_UNIT_NO", _addressUnitNo);
		_columnOriginalValues.put("ADDRESS_ZIPCODE", _addressZipCode);
		_columnOriginalValues.put("ADD_COVER", _addCover);
		_columnOriginalValues.put("ADD_DRIVER", _addDriver);
		_columnOriginalValues.put("AGENCY_REPAIR", _agencyRepair);
		_columnOriginalValues.put("CITY", _city);
		_columnOriginalValues.put("DEDUCTIBLE_VALUE", _deductibleValue);
		_columnOriginalValues.put("INSURED_DOB", _insuredDob);
		_columnOriginalValues.put("INSURED_EMAIL", _insuredEmail);
		_columnOriginalValues.put("INSURED_GENDER", _insuredGender);
		_columnOriginalValues.put("INSURED_ID", _insuredId);
		_columnOriginalValues.put("INSURED_ID_TYPE", _insuredIdType);
		_columnOriginalValues.put("INSURED_MOBILE", _insuredMobile);
		_columnOriginalValues.put("INSURED_NAME", _insuredName);
		_columnOriginalValues.put("INSURED_NATIONALITY", _insuredNationality);
		_columnOriginalValues.put("INSURED_EDUCATION", _insuredEducation);
		_columnOriginalValues.put(
			"INSURED_MARITAL_STATUS", _insuredMaritalStatus);
		_columnOriginalValues.put(
			"INSURED_NO_CHILD_UNDER_16", _insuredNoChildUnder16);
		_columnOriginalValues.put("LOYALTY_DISCOUNT", _loyaltyDiscount);
		_columnOriginalValues.put("NCD_YEARS", _ncdYears);
		_columnOriginalValues.put("PAYMENT_AMOUNT", _paymemtAmount);
		_columnOriginalValues.put("PAYMENT_METHOD", _paymentMethod);
		_columnOriginalValues.put("PAYMENT_REF_NO", _paymentRefNo);
		_columnOriginalValues.put("POLICY_EFFECTIVE_FROM_NO", _policyEffFromNo);
		_columnOriginalValues.put("POLICY_EFFECTIVE_TO", _policyEffTo);
		_columnOriginalValues.put("POLICY_EFF_DATE", _policyEffDate);
		_columnOriginalValues.put("POLICY_ISSUE_DATE", _policyIssueDate);
		_columnOriginalValues.put("POLICY_NO", _policyNo);
		_columnOriginalValues.put("POLICY_REFERENCE_NO", _policyRefNo);
		_columnOriginalValues.put("POLICY_STATUS_CODE", _policyStatusCode);
		_columnOriginalValues.put("PRODUCT_CODE", _productCode);
		_columnOriginalValues.put("PURPOSE_OF_VEHICLE", _purposeOfVehicle);
		_columnOriginalValues.put("QUOTATIONS_ID", _quotationId);
		_columnOriginalValues.put("REFERENCE_NO", _referenceNo);
		_columnOriginalValues.put("SOURCE", _source);
		_columnOriginalValues.put("TRANSACTION", _transaction);
		_columnOriginalValues.put("VEHICLE_BODY_TYPE", _vehicleBodyType);
		_columnOriginalValues.put("VEHICLE_CAPACITY", _vehicleCapacity);
		_columnOriginalValues.put("VEHICLE_CHASSIS_NO", _vehicleChassisNo);
		_columnOriginalValues.put("VEHICLE_COLOR", _vehicleColor);
		_columnOriginalValues.put("VEHICLE_CYLINDER", _vehicleCylinder);
		_columnOriginalValues.put(
			"VEHICLE_EST_EXP_DATE", _vehicleEstExpiryDate);
		_columnOriginalValues.put("VEHICLE_ID", _vehicleId);
		_columnOriginalValues.put("VEHICLE_ID_TYPE", _vehicleIdType);
		_columnOriginalValues.put("VEHICLE_MAKE", _vehicleMake);
		_columnOriginalValues.put("VEHICLE_MFG_YEAR", _vehicleMfgYear);
		_columnOriginalValues.put("VEHICLE_MODEL", _vehicleModel);
		_columnOriginalValues.put("VEHICLE_PLATE_L1", _vehiclePlateL1);
		_columnOriginalValues.put("VEHICLE_PLATE_L2", _vehiclePlateL2);
		_columnOriginalValues.put("VEHICLE_PLATE_L3", _vehiclePlateL3);
		_columnOriginalValues.put("VEHICLE_PLATE_NO", _vehiclePlateNo);
		_columnOriginalValues.put("VEHICLE_PLATE_TYPE", _vehiclePlateType);
		_columnOriginalValues.put("VEHICLE_VALUE", _vehicleValue);
		_columnOriginalValues.put("VEHICLE_WEIGHT", _vehicleWeight);
		_columnOriginalValues.put("VEHICLE_CITY", _vehicleCity);
		_columnOriginalValues.put(
			"VEHICLE_CURRENT_MILE", _vehicleCurrentMileage);
		_columnOriginalValues.put(
			"VEHICLE_LOWER_MILE", _vehicleLowerExpectedMileagePerYear);
		_columnOriginalValues.put(
			"VEHICLE_UPPER_MILE", _vehicleUpperExpectedMileagePerYear);
		_columnOriginalValues.put("VEHICLE_NIGHT_LOC", _vehicleNightLocation);
		_columnOriginalValues.put("VEHICLE_ENGINE_SIZE", _vehicleEngineSize);
		_columnOriginalValues.put("VEHICLE_TRANS_TYPE", _vehicleTransType);
		_columnOriginalValues.put("VEHICLE_AXLE_WEIGHT", _vehAxleWeight);
		_columnOriginalValues.put("VEHICLE_CAR_MODS", _vehCarMods);
		_columnOriginalValues.put("VEHICLE_SPECS", _vehSpecs);
		_columnOriginalValues.put("OCCUPATION_CODE", _occCode);
		_columnOriginalValues.put("INSURED_IBAN", _insuredIBAN);
		_columnOriginalValues.put("INSURE_DOB_H", _insuredDobH);
		_columnOriginalValues.put("NET_PREMIUM", _netPrem);
		_columnOriginalValues.put("NCD_DISCOUNT_AMOUNT", _discountAmount);
		_columnOriginalValues.put(
			"LOYALTY_DISCOUNT_AMOUNT", _loyaltyDiscountAmount);
		_columnOriginalValues.put("NCD_DISCOUNT_PER", _discountPrem);
		_columnOriginalValues.put("LOYALTY_DISCOUNT_PER", _loyaltyDiscountPer);
		_columnOriginalValues.put("LOADING_AMOUNT", _loadingAmount);
		_columnOriginalValues.put("POLICY_TAXES", _policyTaxes);
		_columnOriginalValues.put("POLICY_FEES", _policyFees);
		_columnOriginalValues.put("TOTAL_COVER_PREMIUM", _totalCoverPrem);
		_columnOriginalValues.put("GROSS_PREMIUM", _grossPrem);
		_columnOriginalValues.put("EXIST_POL_NO", _existingPolicyNo);
		_columnOriginalValues.put("EXIST_COMP_NAME", _existingCompanyName);
		_columnOriginalValues.put("EXIST_EXP_DATE", _existingExpDate);
		_columnOriginalValues.put("POLICY_STATUS_MESSAGE", _policyStatusMsg);
		_columnOriginalValues.put("YAKEEN_REFERENCE_NO", _yakeenRefNo);
		_columnOriginalValues.put(
			"QUOTE_SUBMISSION_DATE", _quoteSubmissionDate);
		_columnOriginalValues.put("QUOTE_STATUS", _quoteStatus);
		_columnOriginalValues.put("SAEED_SERVICE", _saeedService);
		_columnOriginalValues.put("DRIVER_ACCIDENTS", _driverAccidents);
		_columnOriginalValues.put("DRIVER_AGE_LESS_21", _driverAgeLess21);
		_columnOriginalValues.put("AGENCY_REPAIR_OUT", _agencyRepairOut);
		_columnOriginalValues.put("TOTAL_AFTER_DISCOUNT", _totalAfterDiscount);
		_columnOriginalValues.put("TOTAL_BEFORE_DISC", _totalBeforeDisc);
		_columnOriginalValues.put("SMS_FLAG", _smsFlag);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("ADDRESS_ADD_NUMBER", "addressAddNo");
		attributeNames.put("ADDRESS_BLDG_NO", "addressBuildingNo");
		attributeNames.put("ADDRESS_DISTRICT", "addressDistrict");
		attributeNames.put("ADDRESS_STREET", "addressStreet");
		attributeNames.put("ADDRESS_UNIT_NO", "addressUnitNo");
		attributeNames.put("ADDRESS_ZIPCODE", "addressZipCode");
		attributeNames.put("ADD_COVER", "addCover");
		attributeNames.put("ADD_DRIVER", "addDriver");
		attributeNames.put("AGENCY_REPAIR", "agencyRepair");
		attributeNames.put("CITY", "city");
		attributeNames.put("DEDUCTIBLE_VALUE", "deductibleValue");
		attributeNames.put("INSURED_DOB", "insuredDob");
		attributeNames.put("INSURED_EMAIL", "insuredEmail");
		attributeNames.put("INSURED_GENDER", "insuredGender");
		attributeNames.put("INSURED_ID", "insuredId");
		attributeNames.put("INSURED_ID_TYPE", "insuredIdType");
		attributeNames.put("INSURED_MOBILE", "insuredMobile");
		attributeNames.put("INSURED_NAME", "insuredName");
		attributeNames.put("INSURED_NATIONALITY", "insuredNationality");
		attributeNames.put("INSURED_EDUCATION", "insuredEducation");
		attributeNames.put("INSURED_MARITAL_STATUS", "insuredMaritalStatus");
		attributeNames.put(
			"INSURED_NO_CHILD_UNDER_16", "insuredNoChildUnder16");
		attributeNames.put("LOYALTY_DISCOUNT", "loyaltyDiscount");
		attributeNames.put("NCD_YEARS", "ncdYears");
		attributeNames.put("PAYMENT_AMOUNT", "paymemtAmount");
		attributeNames.put("PAYMENT_METHOD", "paymentMethod");
		attributeNames.put("PAYMENT_REF_NO", "paymentRefNo");
		attributeNames.put("POLICY_EFFECTIVE_FROM_NO", "policyEffFromNo");
		attributeNames.put("POLICY_EFFECTIVE_TO", "policyEffTo");
		attributeNames.put("POLICY_EFF_DATE", "policyEffDate");
		attributeNames.put("POLICY_ISSUE_DATE", "policyIssueDate");
		attributeNames.put("POLICY_NO", "policyNo");
		attributeNames.put("POLICY_REFERENCE_NO", "policyRefNo");
		attributeNames.put("POLICY_STATUS_CODE", "policyStatusCode");
		attributeNames.put("PRODUCT_CODE", "productCode");
		attributeNames.put("PURPOSE_OF_VEHICLE", "purposeOfVehicle");
		attributeNames.put("QUOTATIONS_ID", "quotationId");
		attributeNames.put("REFERENCE_NO", "referenceNo");
		attributeNames.put("SOURCE", "source");
		attributeNames.put("TRANSACTION", "transaction");
		attributeNames.put("VEHICLE_BODY_TYPE", "vehicleBodyType");
		attributeNames.put("VEHICLE_CAPACITY", "vehicleCapacity");
		attributeNames.put("VEHICLE_CHASSIS_NO", "vehicleChassisNo");
		attributeNames.put("VEHICLE_COLOR", "vehicleColor");
		attributeNames.put("VEHICLE_CYLINDER", "vehicleCylinder");
		attributeNames.put("VEHICLE_EST_EXP_DATE", "vehicleEstExpiryDate");
		attributeNames.put("VEHICLE_ID", "vehicleId");
		attributeNames.put("VEHICLE_ID_TYPE", "vehicleIdType");
		attributeNames.put("VEHICLE_MAKE", "vehicleMake");
		attributeNames.put("VEHICLE_MFG_YEAR", "vehicleMfgYear");
		attributeNames.put("VEHICLE_MODEL", "vehicleModel");
		attributeNames.put("VEHICLE_PLATE_L1", "vehiclePlateL1");
		attributeNames.put("VEHICLE_PLATE_L2", "vehiclePlateL2");
		attributeNames.put("VEHICLE_PLATE_L3", "vehiclePlateL3");
		attributeNames.put("VEHICLE_PLATE_NO", "vehiclePlateNo");
		attributeNames.put("VEHICLE_PLATE_TYPE", "vehiclePlateType");
		attributeNames.put("VEHICLE_VALUE", "vehicleValue");
		attributeNames.put("VEHICLE_WEIGHT", "vehicleWeight");
		attributeNames.put("VEHICLE_CITY", "vehicleCity");
		attributeNames.put("VEHICLE_CURRENT_MILE", "vehicleCurrentMileage");
		attributeNames.put(
			"VEHICLE_LOWER_MILE", "vehicleLowerExpectedMileagePerYear");
		attributeNames.put(
			"VEHICLE_UPPER_MILE", "vehicleUpperExpectedMileagePerYear");
		attributeNames.put("VEHICLE_NIGHT_LOC", "vehicleNightLocation");
		attributeNames.put("VEHICLE_ENGINE_SIZE", "vehicleEngineSize");
		attributeNames.put("VEHICLE_TRANS_TYPE", "vehicleTransType");
		attributeNames.put("VEHICLE_AXLE_WEIGHT", "vehAxleWeight");
		attributeNames.put("VEHICLE_CAR_MODS", "vehCarMods");
		attributeNames.put("VEHICLE_SPECS", "vehSpecs");
		attributeNames.put("OCCUPATION_CODE", "occCode");
		attributeNames.put("INSURED_IBAN", "insuredIBAN");
		attributeNames.put("INSURE_DOB_H", "insuredDobH");
		attributeNames.put("NET_PREMIUM", "netPrem");
		attributeNames.put("NCD_DISCOUNT_AMOUNT", "discountAmount");
		attributeNames.put("LOYALTY_DISCOUNT_AMOUNT", "loyaltyDiscountAmount");
		attributeNames.put("NCD_DISCOUNT_PER", "discountPrem");
		attributeNames.put("LOYALTY_DISCOUNT_PER", "loyaltyDiscountPer");
		attributeNames.put("LOADING_AMOUNT", "loadingAmount");
		attributeNames.put("POLICY_TAXES", "policyTaxes");
		attributeNames.put("POLICY_FEES", "policyFees");
		attributeNames.put("TOTAL_COVER_PREMIUM", "totalCoverPrem");
		attributeNames.put("GROSS_PREMIUM", "grossPrem");
		attributeNames.put("EXIST_POL_NO", "existingPolicyNo");
		attributeNames.put("EXIST_COMP_NAME", "existingCompanyName");
		attributeNames.put("EXIST_EXP_DATE", "existingExpDate");
		attributeNames.put("POLICY_STATUS_MESSAGE", "policyStatusMsg");
		attributeNames.put("YAKEEN_REFERENCE_NO", "yakeenRefNo");
		attributeNames.put("QUOTE_SUBMISSION_DATE", "quoteSubmissionDate");
		attributeNames.put("QUOTE_STATUS", "quoteStatus");
		attributeNames.put("SAEED_SERVICE", "saeedService");
		attributeNames.put("DRIVER_ACCIDENTS", "driverAccidents");
		attributeNames.put("DRIVER_AGE_LESS_21", "driverAgeLess21");
		attributeNames.put("AGENCY_REPAIR_OUT", "agencyRepairOut");
		attributeNames.put("TOTAL_AFTER_DISCOUNT", "totalAfterDiscount");
		attributeNames.put("TOTAL_BEFORE_DISC", "totalBeforeDisc");
		attributeNames.put("SMS_FLAG", "smsFlag");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private Quotations _escapedModel;

}