/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ejada.atmc.acl.db.model.impl;

import com.ejada.atmc.acl.db.model.ProductCovers;
import com.ejada.atmc.acl.db.model.ProductCoversModel;
import com.ejada.atmc.acl.db.model.ProductCoversSoap;
import com.ejada.atmc.acl.db.service.persistence.ProductCoversPK;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductCovers service. Represents a row in the &quot;MDM_PRODUCT_COVERS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductCoversModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductCoversImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductCoversImpl
 * @generated
 */
@JSON(strict = true)
public class ProductCoversModelImpl
	extends BaseModelImpl<ProductCovers> implements ProductCoversModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product covers model instance should use the <code>ProductCovers</code> interface instead.
	 */
	public static final String TABLE_NAME = "MDM_PRODUCT_COVERS";

	public static final Object[][] TABLE_COLUMNS = {
		{"MDM_PROD_CODE", Types.BIGINT}, {"MDM_SEC_CODE", Types.BIGINT},
		{"MDM_CVR_CODE", Types.VARCHAR}, {"MDM_CVR_NAME", Types.VARCHAR},
		{"MDM_CVR_NAME_AR", Types.VARCHAR}, {"MDM_CVR_DESC", Types.VARCHAR},
		{"MDM_CVR_DESC_AR", Types.VARCHAR}, {"MDM_PREMIUM", Types.VARCHAR},
		{"MDM_FIELD_1", Types.VARCHAR}, {"MDM_FIELD_2", Types.VARCHAR},
		{"MDM_FIELD_3", Types.VARCHAR}, {"MDM_FIELD_4", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MDM_PROD_CODE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MDM_SEC_CODE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MDM_CVR_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CVR_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CVR_NAME_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CVR_DESC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_CVR_DESC_AR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_PREMIUM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_FIELD_1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_FIELD_2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_FIELD_3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MDM_FIELD_4", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MDM_PRODUCT_COVERS (MDM_PROD_CODE LONG not null,MDM_SEC_CODE LONG not null,MDM_CVR_CODE VARCHAR(75) not null,MDM_CVR_NAME VARCHAR(75) null,MDM_CVR_NAME_AR VARCHAR(75) null,MDM_CVR_DESC VARCHAR(75) null,MDM_CVR_DESC_AR VARCHAR(75) null,MDM_PREMIUM VARCHAR(75) null,MDM_FIELD_1 VARCHAR(75) null,MDM_FIELD_2 VARCHAR(75) null,MDM_FIELD_3 VARCHAR(75) null,MDM_FIELD_4 VARCHAR(75) null,primary key (MDM_PROD_CODE, MDM_SEC_CODE, MDM_CVR_CODE))";

	public static final String TABLE_SQL_DROP = "drop table MDM_PRODUCT_COVERS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productCovers.id.productCode ASC, productCovers.id.sectionCode ASC, productCovers.id.coverCode ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MDM_PRODUCT_COVERS.MDM_PROD_CODE ASC, MDM_PRODUCT_COVERS.MDM_SEC_CODE ASC, MDM_PRODUCT_COVERS.MDM_CVR_CODE ASC";

	public static final String DATA_SOURCE = "extDS";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COVERCODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PRODUCTCODE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long SECTIONCODE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ProductCovers toModel(ProductCoversSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProductCovers model = new ProductCoversImpl();

		model.setProductCode(soapModel.getProductCode());
		model.setSectionCode(soapModel.getSectionCode());
		model.setCoverCode(soapModel.getCoverCode());
		model.setCoverName(soapModel.getCoverName());
		model.setCoverNameAr(soapModel.getCoverNameAr());
		model.setCoverDesc(soapModel.getCoverDesc());
		model.setCoverDescAr(soapModel.getCoverDescAr());
		model.setCoverPremium(soapModel.getCoverPremium());
		model.setCoverFld1(soapModel.getCoverFld1());
		model.setCoverFld2(soapModel.getCoverFld2());
		model.setCoverFld3(soapModel.getCoverFld3());
		model.setCoverFld4(soapModel.getCoverFld4());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ProductCovers> toModels(ProductCoversSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProductCovers> models = new ArrayList<ProductCovers>(
			soapModels.length);

		for (ProductCoversSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ProductCoversModelImpl() {
	}

	@Override
	public ProductCoversPK getPrimaryKey() {
		return new ProductCoversPK(_productCode, _sectionCode, _coverCode);
	}

	@Override
	public void setPrimaryKey(ProductCoversPK primaryKey) {
		setProductCode(primaryKey.productCode);
		setSectionCode(primaryKey.sectionCode);
		setCoverCode(primaryKey.coverCode);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ProductCoversPK(_productCode, _sectionCode, _coverCode);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ProductCoversPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ProductCovers.class;
	}

	@Override
	public String getModelClassName() {
		return ProductCovers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductCovers, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductCovers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductCovers, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductCovers)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductCovers, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductCovers, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductCovers)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductCovers, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductCovers, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProductCovers>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProductCovers.class.getClassLoader(), ProductCovers.class,
			ModelWrapper.class);

		try {
			Constructor<ProductCovers> constructor =
				(Constructor<ProductCovers>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ProductCovers, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductCovers, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductCovers, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ProductCovers, Object>>();
		Map<String, BiConsumer<ProductCovers, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProductCovers, ?>>();

		attributeGetterFunctions.put(
			"productCode", ProductCovers::getProductCode);
		attributeSetterBiConsumers.put(
			"productCode",
			(BiConsumer<ProductCovers, Long>)ProductCovers::setProductCode);
		attributeGetterFunctions.put(
			"sectionCode", ProductCovers::getSectionCode);
		attributeSetterBiConsumers.put(
			"sectionCode",
			(BiConsumer<ProductCovers, Long>)ProductCovers::setSectionCode);
		attributeGetterFunctions.put("coverCode", ProductCovers::getCoverCode);
		attributeSetterBiConsumers.put(
			"coverCode",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverCode);
		attributeGetterFunctions.put("coverName", ProductCovers::getCoverName);
		attributeSetterBiConsumers.put(
			"coverName",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverName);
		attributeGetterFunctions.put(
			"coverNameAr", ProductCovers::getCoverNameAr);
		attributeSetterBiConsumers.put(
			"coverNameAr",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverNameAr);
		attributeGetterFunctions.put("coverDesc", ProductCovers::getCoverDesc);
		attributeSetterBiConsumers.put(
			"coverDesc",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverDesc);
		attributeGetterFunctions.put(
			"coverDescAr", ProductCovers::getCoverDescAr);
		attributeSetterBiConsumers.put(
			"coverDescAr",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverDescAr);
		attributeGetterFunctions.put(
			"coverPremium", ProductCovers::getCoverPremium);
		attributeSetterBiConsumers.put(
			"coverPremium",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverPremium);
		attributeGetterFunctions.put("coverFld1", ProductCovers::getCoverFld1);
		attributeSetterBiConsumers.put(
			"coverFld1",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverFld1);
		attributeGetterFunctions.put("coverFld2", ProductCovers::getCoverFld2);
		attributeSetterBiConsumers.put(
			"coverFld2",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverFld2);
		attributeGetterFunctions.put("coverFld3", ProductCovers::getCoverFld3);
		attributeSetterBiConsumers.put(
			"coverFld3",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverFld3);
		attributeGetterFunctions.put("coverFld4", ProductCovers::getCoverFld4);
		attributeSetterBiConsumers.put(
			"coverFld4",
			(BiConsumer<ProductCovers, String>)ProductCovers::setCoverFld4);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getProductCode() {
		return _productCode;
	}

	@Override
	public void setProductCode(long productCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productCode = productCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProductCode() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("MDM_PROD_CODE"));
	}

	@JSON
	@Override
	public long getSectionCode() {
		return _sectionCode;
	}

	@Override
	public void setSectionCode(long sectionCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sectionCode = sectionCode;
	}

	@JSON
	@Override
	public String getCoverCode() {
		if (_coverCode == null) {
			return "";
		}
		else {
			return _coverCode;
		}
	}

	@Override
	public void setCoverCode(String coverCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverCode = coverCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCoverCode() {
		return getColumnOriginalValue("MDM_CVR_CODE");
	}

	@JSON
	@Override
	public String getCoverName() {
		if (_coverName == null) {
			return "";
		}
		else {
			return _coverName;
		}
	}

	@Override
	public void setCoverName(String coverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverName = coverName;
	}

	@JSON
	@Override
	public String getCoverNameAr() {
		if (_coverNameAr == null) {
			return "";
		}
		else {
			return _coverNameAr;
		}
	}

	@Override
	public void setCoverNameAr(String coverNameAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverNameAr = coverNameAr;
	}

	@JSON
	@Override
	public String getCoverDesc() {
		if (_coverDesc == null) {
			return "";
		}
		else {
			return _coverDesc;
		}
	}

	@Override
	public void setCoverDesc(String coverDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverDesc = coverDesc;
	}

	@JSON
	@Override
	public String getCoverDescAr() {
		if (_coverDescAr == null) {
			return "";
		}
		else {
			return _coverDescAr;
		}
	}

	@Override
	public void setCoverDescAr(String coverDescAr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverDescAr = coverDescAr;
	}

	@JSON
	@Override
	public String getCoverPremium() {
		if (_coverPremium == null) {
			return "";
		}
		else {
			return _coverPremium;
		}
	}

	@Override
	public void setCoverPremium(String coverPremium) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverPremium = coverPremium;
	}

	@JSON
	@Override
	public String getCoverFld1() {
		if (_coverFld1 == null) {
			return "";
		}
		else {
			return _coverFld1;
		}
	}

	@Override
	public void setCoverFld1(String coverFld1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverFld1 = coverFld1;
	}

	@JSON
	@Override
	public String getCoverFld2() {
		if (_coverFld2 == null) {
			return "";
		}
		else {
			return _coverFld2;
		}
	}

	@Override
	public void setCoverFld2(String coverFld2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverFld2 = coverFld2;
	}

	@JSON
	@Override
	public String getCoverFld3() {
		if (_coverFld3 == null) {
			return "";
		}
		else {
			return _coverFld3;
		}
	}

	@Override
	public void setCoverFld3(String coverFld3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverFld3 = coverFld3;
	}

	@JSON
	@Override
	public String getCoverFld4() {
		if (_coverFld4 == null) {
			return "";
		}
		else {
			return _coverFld4;
		}
	}

	@Override
	public void setCoverFld4(String coverFld4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_coverFld4 = coverFld4;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ProductCovers toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductCovers>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductCoversImpl productCoversImpl = new ProductCoversImpl();

		productCoversImpl.setProductCode(getProductCode());
		productCoversImpl.setSectionCode(getSectionCode());
		productCoversImpl.setCoverCode(getCoverCode());
		productCoversImpl.setCoverName(getCoverName());
		productCoversImpl.setCoverNameAr(getCoverNameAr());
		productCoversImpl.setCoverDesc(getCoverDesc());
		productCoversImpl.setCoverDescAr(getCoverDescAr());
		productCoversImpl.setCoverPremium(getCoverPremium());
		productCoversImpl.setCoverFld1(getCoverFld1());
		productCoversImpl.setCoverFld2(getCoverFld2());
		productCoversImpl.setCoverFld3(getCoverFld3());
		productCoversImpl.setCoverFld4(getCoverFld4());

		productCoversImpl.resetOriginalValues();

		return productCoversImpl;
	}

	@Override
	public int compareTo(ProductCovers productCovers) {
		ProductCoversPK primaryKey = productCovers.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductCovers)) {
			return false;
		}

		ProductCovers productCovers = (ProductCovers)object;

		ProductCoversPK primaryKey = productCovers.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductCovers> toCacheModel() {
		ProductCoversCacheModel productCoversCacheModel =
			new ProductCoversCacheModel();

		productCoversCacheModel.productCoversPK = getPrimaryKey();

		productCoversCacheModel.productCode = getProductCode();

		productCoversCacheModel.sectionCode = getSectionCode();

		productCoversCacheModel.coverCode = getCoverCode();

		String coverCode = productCoversCacheModel.coverCode;

		if ((coverCode != null) && (coverCode.length() == 0)) {
			productCoversCacheModel.coverCode = null;
		}

		productCoversCacheModel.coverName = getCoverName();

		String coverName = productCoversCacheModel.coverName;

		if ((coverName != null) && (coverName.length() == 0)) {
			productCoversCacheModel.coverName = null;
		}

		productCoversCacheModel.coverNameAr = getCoverNameAr();

		String coverNameAr = productCoversCacheModel.coverNameAr;

		if ((coverNameAr != null) && (coverNameAr.length() == 0)) {
			productCoversCacheModel.coverNameAr = null;
		}

		productCoversCacheModel.coverDesc = getCoverDesc();

		String coverDesc = productCoversCacheModel.coverDesc;

		if ((coverDesc != null) && (coverDesc.length() == 0)) {
			productCoversCacheModel.coverDesc = null;
		}

		productCoversCacheModel.coverDescAr = getCoverDescAr();

		String coverDescAr = productCoversCacheModel.coverDescAr;

		if ((coverDescAr != null) && (coverDescAr.length() == 0)) {
			productCoversCacheModel.coverDescAr = null;
		}

		productCoversCacheModel.coverPremium = getCoverPremium();

		String coverPremium = productCoversCacheModel.coverPremium;

		if ((coverPremium != null) && (coverPremium.length() == 0)) {
			productCoversCacheModel.coverPremium = null;
		}

		productCoversCacheModel.coverFld1 = getCoverFld1();

		String coverFld1 = productCoversCacheModel.coverFld1;

		if ((coverFld1 != null) && (coverFld1.length() == 0)) {
			productCoversCacheModel.coverFld1 = null;
		}

		productCoversCacheModel.coverFld2 = getCoverFld2();

		String coverFld2 = productCoversCacheModel.coverFld2;

		if ((coverFld2 != null) && (coverFld2.length() == 0)) {
			productCoversCacheModel.coverFld2 = null;
		}

		productCoversCacheModel.coverFld3 = getCoverFld3();

		String coverFld3 = productCoversCacheModel.coverFld3;

		if ((coverFld3 != null) && (coverFld3.length() == 0)) {
			productCoversCacheModel.coverFld3 = null;
		}

		productCoversCacheModel.coverFld4 = getCoverFld4();

		String coverFld4 = productCoversCacheModel.coverFld4;

		if ((coverFld4 != null) && (coverFld4.length() == 0)) {
			productCoversCacheModel.coverFld4 = null;
		}

		return productCoversCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductCovers, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductCovers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductCovers, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ProductCovers)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ProductCovers, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ProductCovers, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductCovers, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ProductCovers)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductCovers>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _productCode;
	private long _sectionCode;
	private String _coverCode;
	private String _coverName;
	private String _coverNameAr;
	private String _coverDesc;
	private String _coverDescAr;
	private String _coverPremium;
	private String _coverFld1;
	private String _coverFld2;
	private String _coverFld3;
	private String _coverFld4;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ProductCovers, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProductCovers)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("MDM_PROD_CODE", _productCode);
		_columnOriginalValues.put("MDM_SEC_CODE", _sectionCode);
		_columnOriginalValues.put("MDM_CVR_CODE", _coverCode);
		_columnOriginalValues.put("MDM_CVR_NAME", _coverName);
		_columnOriginalValues.put("MDM_CVR_NAME_AR", _coverNameAr);
		_columnOriginalValues.put("MDM_CVR_DESC", _coverDesc);
		_columnOriginalValues.put("MDM_CVR_DESC_AR", _coverDescAr);
		_columnOriginalValues.put("MDM_PREMIUM", _coverPremium);
		_columnOriginalValues.put("MDM_FIELD_1", _coverFld1);
		_columnOriginalValues.put("MDM_FIELD_2", _coverFld2);
		_columnOriginalValues.put("MDM_FIELD_3", _coverFld3);
		_columnOriginalValues.put("MDM_FIELD_4", _coverFld4);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("MDM_PROD_CODE", "productCode");
		attributeNames.put("MDM_SEC_CODE", "sectionCode");
		attributeNames.put("MDM_CVR_CODE", "coverCode");
		attributeNames.put("MDM_CVR_NAME", "coverName");
		attributeNames.put("MDM_CVR_NAME_AR", "coverNameAr");
		attributeNames.put("MDM_CVR_DESC", "coverDesc");
		attributeNames.put("MDM_CVR_DESC_AR", "coverDescAr");
		attributeNames.put("MDM_PREMIUM", "coverPremium");
		attributeNames.put("MDM_FIELD_1", "coverFld1");
		attributeNames.put("MDM_FIELD_2", "coverFld2");
		attributeNames.put("MDM_FIELD_3", "coverFld3");
		attributeNames.put("MDM_FIELD_4", "coverFld4");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("MDM_PROD_CODE", 1L);

		columnBitmasks.put("MDM_SEC_CODE", 2L);

		columnBitmasks.put("MDM_CVR_CODE", 4L);

		columnBitmasks.put("MDM_CVR_NAME", 8L);

		columnBitmasks.put("MDM_CVR_NAME_AR", 16L);

		columnBitmasks.put("MDM_CVR_DESC", 32L);

		columnBitmasks.put("MDM_CVR_DESC_AR", 64L);

		columnBitmasks.put("MDM_PREMIUM", 128L);

		columnBitmasks.put("MDM_FIELD_1", 256L);

		columnBitmasks.put("MDM_FIELD_2", 512L);

		columnBitmasks.put("MDM_FIELD_3", 1024L);

		columnBitmasks.put("MDM_FIELD_4", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProductCovers _escapedModel;

}